<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Laplace&#39;s Lab</title>
  
  <subtitle>“Meet success like a gentleman and disaster like a man.”</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://laplacetw.github.io/"/>
  <updated>2020-07-08T06:43:01.683Z</updated>
  <id>https://laplacetw.github.io/</id>
  
  <author>
    <name>LaplaceTW</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正確理解YOLO的辨識準確率</title>
    <link href="https://laplacetw.github.io/data-sci-yolo-accuracy/"/>
    <id>https://laplacetw.github.io/data-sci-yolo-accuracy/</id>
    <published>2020-07-07T17:56:17.000Z</published>
    <updated>2020-07-08T06:43:01.683Z</updated>
    
    <content type="html"><![CDATA[<p>這幾天媒體報導了<a href="https://arxiv.org/abs/2004.10934" target="_blank" rel="noopener">YOLOv4</a>的相關新聞，提到其為中研院研究團隊與俄羅斯開發者所共同研發，而這全世界最快最準的物體偵測演算法，其平均準確率為43.5%。於是這43.5%的準確率迅速引來許多不明就裡的人留言批評，我深刻體會『對自己的無知一無所知』是一件多麼可怕的事情。<a id="more"></a>不懂沒有關係，我們可以先查證，再提出質疑，而非只是「我覺得這準確率有夠低」就輕率地批評指責(中研院難道是能隨便誇大其詞的研究機構嗎？)，但你可能連state-of-the-art意味什麼都不明白。這對無私貢獻的<a href="https://zh.wikipedia.org/wiki/%E9%96%8B%E6%BA%90%E8%BB%9F%E9%AB%94" target="_blank" rel="noopener">Open Source</a>開發者一點都不公平，真是站著說話不腰疼、躺著留言不費勁。</p><h2 id="什麼是YOLO"><a href="#什麼是YOLO" class="headerlink" title="什麼是YOLO?"></a>什麼是YOLO?</h2><p></p><p><a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">YOLO官網</a>是這麼介紹它自己的：</p><blockquote><p>You only look once (YOLO) is a state-of-the-art, real-time object detection system. On a Pascal Titan X it processes images at 30 FPS and has a mAP of 57.9% on COCO test-dev. (YOLO是最先進的即時物體偵測系統，在Pascal Titan X GPU上以30 FPS的速度處理影像，於COCO測試開發資料集中的mAP為57.9%)</p></blockquote><p>然後我們可能又會疑惑：FPS? COCO? mAP? 別著急，多理解一下物體偵測。</p><p>電腦是如何進行物體偵測？一般做法是透過各種選擇性搜索演算法(selective search)，偵測、分割出影像中可能有物體存在的區域(region proposal)，那麼沒有物體存在的區域就不需要進行無效的運算，也能加快處理速度，接著再對這些可能有物體存在的區域進行辨識分類。如此先搜索region proposal再進行辨識的處理方式稱為Two Stage(e.g. R-CNN)。<br><img src="https://i.imgur.com/O62Ncev.png" alt></p><p>但這有個潛在問題，假設系統偵測出影像中有數百個甚至上千個region proposal，那麼就得進行上千次的辨識運算…個人電腦即便有高階GPU亦可能做不到即時運算，更遑論行動裝置。</p><p></p><p>圖片連結自<a href="https://github.com/ouyanghuiyu/darknet_face_with_landmark" target="_blank" rel="noopener">https://github.com/ouyanghuiyu/darknet_face_with_landmark</a>⬇︎<br><img src="https://raw.githubusercontent.com/ouyanghuiyu/darknet_face_with_landmark/master/test_imgs/selfie.jpg" alt></p><p>於是我們有了One Stage(e.g. YOLO)，物體偵測和辨識一氣呵成，這樣的做法能大幅提升處理速度。不過有一好沒兩好，要速度快你就得在準確率做點取捨，因此整體辨識準確率相較Two Stage來得差一些，但One Stage在許多應用上仍是可接受範圍內，兩種作法各有其優勢，端看需求。<br><img src="https://i.imgur.com/OdWNkUk.png" alt></p><p>回到YOLO，自從2015年發佈v1發展至今，最新版本為今年4月底所發佈的v4，處理速度簡直快到沒朋友，但YOLO的創造者<a href="https://pjreddie.com/" target="_blank" rel="noopener">Joseph Redmon</a>今年二月<a href="https://twitter.com/pjreddie/status/1230524770350817280" target="_blank" rel="noopener">於推特宣佈退出電腦視覺研究領域</a>，當時引起相當大的討論，多少人引頸期盼YOLO的下個版本，Joseph Redmon表示自己的工作對人類社會的衝擊性實在太大了，即使熱愛電腦視覺的研究工作，但其終究無法忽視自己的研究成果在軍事科技應用以及個人隱私方面可能導致的問題。因此YOLOv4為俄羅斯開發者、YOLOv3的實現 — Darknet作者<a href="https://twitter.com/alexeyab84" target="_blank" rel="noopener">Alexey Bochkovskiy</a>與中研院資科所所長Hong-Yuan Liao及博士後研究員Chien-Yao Wang等三人基於後兩位研發的CSPNet，對YOLO的最新研究成果。而Joseph Redmon也<a href="https://github.com/pjreddie/darknet#darknet" target="_blank" rel="noopener">更新</a>了YOLOv4的論文與原始碼連結，顯示YOLOv4為官方所認可的後繼版本。</p><h2 id="什麼是FPS"><a href="#什麼是FPS" class="headerlink" title="什麼是FPS?"></a>什麼是FPS?</h2><p></p><p>FPS就是影格率或是經常聽到的幀數，<a href="https://zh.wikipedia.org/wiki/%E5%BD%B1%E6%A0%BC%E7%8E%87" target="_blank" rel="noopener">維基百科</a>就有寫了沒啥好說：</p><blockquote><p>影格率是用於測量顯示影格數的量度。測量單位為「每秒顯示影格數」(Frame per Second，FPS)或「赫茲」，一般來說FPS用於描述影片、電子繪圖或遊戲每秒播放多少影格。</p></blockquote><h2 id="什麼是COCO資料集？"><a href="#什麼是COCO資料集？" class="headerlink" title="什麼是COCO資料集？"></a>什麼是COCO資料集？</h2><p></p><p><a href="https://cocodataset.org/" target="_blank" rel="noopener">COCO資料集(Common Objects in Context)</a>是微軟所發佈、擁有33萬張影像的大型開源資料集：</p><blockquote><p>COCO is a large-scale object detection, segmentation, and captioning dataset. COCO has several features:</p><ul><li>Object segmentation</li><li>Recognition in context</li><li>Superpixel stuff segmentation</li><li>330K images (&gt;200K labeled)</li><li>1.5 million object instances</li><li>80 object categories</li><li>91 stuff categories</li><li>5 captions per image</li><li>250,000 people with keypoints</li></ul></blockquote><h2 id="什麼是mAP？"><a href="#什麼是mAP？" class="headerlink" title="什麼是mAP？"></a>什麼是mAP？</h2><p></p><p>mAP的”m”代表”mean”，簡而言之，AP(average precision)是用來評估物體識別模型效能表現的指標之一。我參考維基百科<a href="https://en.wikipedia.org/wiki/Precision_and_recall" target="_blank" rel="noopener">Precison and Recall</a>頁面的說明圖片，重新繪製了下方這張圖(原圖為直向)來說明。<br>*關於Precision and Recall可參考：<a href="https://medium.com/@ChingTien/529d18abc3a" target="_blank" rel="noopener">心理學和機器學習中的 Accuracy、Precision、Recall Rate 和 Confusion Matrix</a><br><img src="https://i.imgur.com/KgFbe8Y.png" alt></p><p>假設我現在要從一些含有各種物體的影像中找出狗的圖片，那麼上圖左側深灰色矩形代表狗的圖片集合，右側淺灰色影像代表其他物體的圖片集合，中間的大圓圈則是被判定為狗的圖片的集合，其中包含真的為狗的圖片(分類正確)以及不是狗的圖片(分類錯誤)。所以precision就代表在「所有被判定為狗的圖片」之中有多少<strong>比例</strong>是「狗的圖片」。</p><p>至於average precision的計算則是將precision加總後取平均值：</p><table><thead><tr><th style="text-align:center">判定為狗且真的為狗的圖片數</th><th style="text-align:center">判定為狗的圖片數</th><th style="text-align:center">Precision</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">1/2</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">1/3</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">4</td><td style="text-align:center">2/4</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">5</td><td style="text-align:center">2/5</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr></tbody></table><p>又物體識別會有許多類別，以COCO資料集而言就有80種object categories，mean average precision便是所有類別AP加總的平均值。</p><p>＊COCO資料集究竟有多少個類別？網路上有人說80種，也有人說91種，合理推測是將object categories跟stuff categories搞混了，這兩種分類的差異我也是看了某篇論文的摘要才明白，根據<a href="https://arxiv.org/abs/1612.03716" target="_blank" rel="noopener">COCO-Stuff: Thing and Stuff Classes in Context</a>所述：</p><blockquote><p>Semantic classes can be either things (objects with a well-defined shape, e.g. car, person) or stuff (amorphous background regions, e.g. grass, sky).</p></blockquote><p>object類就是能明確界定形狀的<strong>物體</strong>，例如汽車、人。stuff類則是沒有特定形狀或邊界的<strong>背景區域</strong>，例如草地、天空。懂！</p><h2 id="效能評估指標"><a href="#效能評估指標" class="headerlink" title="效能評估指標"></a>效能評估指標</h2><p></p><p>根據COCO資料集的效能評估頁面所述：</p><blockquote><p>Average Precision (AP):</p><ul><li>AP：AP at IoU=.50:.05:.95 (primary challenge metric)</li><li>AP IoU=.50：AP at IoU=.50 (PASCAL VOC metric)</li><li>AP IoU=.75：AP at IoU=.75 (strict metric)<br></li></ul></blockquote><p>從這段敘述可以確定COCO資料集效能評估指標的AP指的就是mAP：</p><blockquote><p>AP is averaged over all categories. Traditionally, this is called “mean average precision” (mAP). We make no distinction between AP and mAP (and likewise AR and mAR) and assume the difference is clear from context.</p></blockquote><p>說到這兒又得理解一個跟AP有關係的詞：IoU(Intersection over Union，並交比)，簡而言之，物體識別的IoU為物體標記範圍與系統偵測範圍這兩個集合的交集和並集之間的比例，有請台北市立動物園的水豚君幫忙示範一下：<br><img src="https://i.imgur.com/w7sc0Vc.jpg" alt><br>假設紅框為影像的原始標記邊界範圍a1，黃框為YOLO所偵測的物體邊界範圍a2，那麼IoU則為a1與a2的<strong>交集</strong>除以a1與a2的<strong>聯集</strong>。</p><p>因此以COCO資料集的AP指標而言，可以看到其IoU並非一個固定值，而是「.50:.05:.95」，意思是IoU共有{0.5, 0.55,…0.95}10個閾值，以這10個標準做判定、計算AP再取平均，而AP50(IoU=.50)或AP75(IoU=.75)則是傳統的評估方式。</p><h2 id="平均準確率"><a href="#平均準確率" class="headerlink" title="平均準確率"></a>平均準確率</h2><p></p><p>說了一堆，可以來看底下這張效能表現比較圖了。</p><p>我直接連結<a href="https://github.com/AlexeyAB/darknet" target="_blank" rel="noopener">Darknet</a>其GitHub頁面的圖片⬇︎<br><img src="https://user-images.githubusercontent.com/4096485/82835867-f1c62380-9ecd-11ea-9134-1598ed2abc4b.png" alt></p><p>YOLOv4的效能表現是相當突出的，在FPS為90的時候，v4的AP比v3多了10%，要不光看它和YOLOv3那條線之間有好大一段垂直距離也不難理解。對於一件事情的難易度若是沒有概念，只看43.5%這個數字能看出什麼呢？</p><p>YOLOv4論文摘要：</p><blockquote><p>We use new features: WRC, CSP, CmBN, SAT, Mish activation, Mosaic data augmentation, CmBN, DropBlock regularization, and CIoU loss, and combine some of them to achieve state-of-the-art results: 43.5% AP (65.7% AP50) for the MS COCO dataset at a realtime speed of ~65 FPS on Tesla V100.</p></blockquote><p>辨識無數的物體要<strong>即時</strong>又要<strong>快狠準</strong>你說容易嗎？<br><img src="https://i.imgur.com/NG4nEoT.png" alt><br><div class="video-container"><iframe src="//www.youtube.com/embed/1_SiUOYUoOI" frameborder="0" allowfullscreen></iframe></div></p><h2 id="Research-Papers-of-YOLO"><a href="#Research-Papers-of-YOLO" class="headerlink" title="Research Papers of YOLO"></a>Research Papers of YOLO</h2><p></p><p></p><ul><li><a href="https://arxiv.org/abs/1506.02640" target="_blank" rel="noopener">You Only Look Once: Unified, Real-Time Object Detection</a></li><li><a href="https://arxiv.org/abs/1612.08242" target="_blank" rel="noopener">YOLO9000: Better, Faster, Stronger</a></li><li><a href="https://arxiv.org/abs/1804.02767" target="_blank" rel="noopener">YOLOv3: An Incremental Improvement</a></li><li><a href="https://arxiv.org/abs/2004.10934" target="_blank" rel="noopener">YOLOv4: Optimal Speed and Accuracy of Object Detection</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這幾天媒體報導了&lt;a href=&quot;https://arxiv.org/abs/2004.10934&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;YOLOv4&lt;/a&gt;的相關新聞，提到其為中研院研究團隊與俄羅斯開發者所共同研發，而這全世界最快最準的物體偵測演算法，其平均準確率為43.5%。於是這43.5%的準確率迅速引來許多不明就裡的人留言批評，我深刻體會『對自己的無知一無所知』是一件多麼可怕的事情。
    
    </summary>
    
      <category term="Data Science" scheme="https://laplacetw.github.io/categories/Data-Science/"/>
    
    
      <category term="deep learning" scheme="https://laplacetw.github.io/tags/deep-learning/"/>
    
      <category term="computer vision" scheme="https://laplacetw.github.io/tags/computer-vision/"/>
    
      <category term="yolo" scheme="https://laplacetw.github.io/tags/yolo/"/>
    
      <category term="darknet" scheme="https://laplacetw.github.io/tags/darknet/"/>
    
  </entry>
  
  <entry>
    <title>Arduino UNO R3</title>
    <link href="https://laplacetw.github.io/arduino-uno-r3-learning-kit/"/>
    <id>https://laplacetw.github.io/arduino-uno-r3-learning-kit/</id>
    <published>2020-07-02T03:00:47.000Z</published>
    <updated>2020-07-03T09:22:00.597Z</updated>
    
    <content type="html"><![CDATA[<p>終於有時間玩玩買來很久的learning kit。開發版種類繁多，但除了修課玩過Ti OMAP系列的PandaBoard、Devkit8000，也就自己買的樹莓派3B+了，<a id="more"></a>『這都2020了還沒玩過Arduino，豈不是要給人看笑話了😝』就這麼想著的某天便光速下單買來了套件組合準備試玩。</p><p><img src="https://i.imgur.com/jWi2s0M.jpg" alt></p><p>先下載<a href="https://www.arduino.cc/en/Main/Software" target="_blank" rel="noopener">Arduino IDE</a>，將Arduino透過USB接上PC，設置好USB連接埠就可以開始玩了，寫段程式碼來測試看看。<br><br>不免俗的讓UNO R3說點什麼(笑，序列埠輸出要先用<a href="https://www.arduino.cc/reference/en/language/functions/communication/serial/begin/" target="_blank" rel="noopener">Serial.begin()</a>方法初始化、設定baud rate⬇︎<br><img src="https://i.imgur.com/PPlSksQ.png" alt><br><img src="https://i.imgur.com/OEk9ppo.png" alt></p><p>Arduino的程式架構基本上就是setup()跟loop()兩個函式，用來執行初始化和持續執行的動作，經過編譯後會整合為main()函式。<a href="https://zh.wikipedia.org/wiki/Arduino" target="_blank" rel="noopener">Arduino維基頁面</a>寫著其IDE是源自Processing程式語言，哈！想起大三時曾經修過清大MOOC的玩電玩學程式課程，當時就是使用這有趣的語言，難怪有種熟悉感🤣</p><p>環境設置完成，使用幾個LED來測試、學習Arduino程式編寫：</p><h3 id="LED-Control"><a href="#LED-Control" class="headerlink" title="LED Control"></a>LED Control</h3><p><br><br><img src="https://i.imgur.com/iKiu4BM.png" alt><br>我將PIN 13設為輸出，因此板子上的LED也會跟著閃爍。<br><img src="https://i.imgur.com/AB5h1WK.gif" alt></p><h3 id="Traffic-Light"><a href="#Traffic-Light" class="headerlink" title="Traffic Light"></a>Traffic Light</h3><p>使用黃綠紅3顆LED模擬紅綠燈。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_LED_G 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_LED_Y 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_LED_R 4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  pinMode(PIN_LED_R, OUTPUT);</span><br><span class="line">  pinMode(PIN_LED_G, OUTPUT);</span><br><span class="line">  pinMode(PIN_LED_Y, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  digitalWrite(PIN_LED_G, HIGH);</span><br><span class="line">  delay(<span class="number">3000</span>);</span><br><span class="line">  digitalWrite(PIN_LED_G, LOW);</span><br><span class="line"></span><br><span class="line">  digitalWrite(PIN_LED_Y, HIGH);</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">  digitalWrite(PIN_LED_Y, LOW);</span><br><span class="line"></span><br><span class="line">  digitalWrite(PIN_LED_R, HIGH);</span><br><span class="line">  delay(<span class="number">3000</span>);</span><br><span class="line">  digitalWrite(PIN_LED_R, LOW);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/rcmlVTs.gif" alt></p><h3 id="Switch-Control"><a href="#Switch-Control" class="headerlink" title="Switch Control"></a>Switch Control</h3><p>以按鍵開關控制LED：若偵測到按鍵開關的狀態為HIGH(按下)則使PIN_LED狀態亦為HIGH。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_LED 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_SWITCH 8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  pinMode(PIN_SWITCH, INPUT);</span><br><span class="line">  pinMode(PIN_LED, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> switch_status = digitalRead(PIN_SWITCH);</span><br><span class="line">  <span class="keyword">if</span>(switch_status == HIGH)&#123;</span><br><span class="line">    digitalWrite(PIN_LED, HIGH);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    digitalWrite(PIN_LED, LOW);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/iZzRafD.gif" alt></p><h3 id="Light-Ticker"><a href="#Light-Ticker" class="headerlink" title="Light Ticker"></a>Light Ticker</h3><p>Embedded System的資源都是有限的，UNO R3 Digital I/O僅有13個port，又RX/TX佔了0和1兩個port，所以實際上能用的也就11個port，彌足珍貴呀😌&nbsp;&nbsp;當遇到需要控制多個LED的情況，例如模擬跑馬燈，讓每顆LED都佔用一個port實在太浪費，而此時便是74HC595位移暫存器派上用場的時候，只要佔用Arduino 3個port就能控制74HC595的8個port，不錯吧。<br><img src="https://i.imgur.com/hpNCaiM.jpg" alt><br>關於74HC595詳細的說明與接線可參考<a href="https://www.youtube.com/watch?v=KKdNk5lne50" target="_blank" rel="noopener">佑來了老師的教學影片</a>，他的神解釋相當通俗易懂😆</p><ul><li><p>直白的寫法：<br>雖然程式碼長了點，但我覺得這是容易理解其運作的寫法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_DATA 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_STORE 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_SHIFT 4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  pinMode(PIN_DATA, OUTPUT);</span><br><span class="line">  pinMode(PIN_SHIFT, OUTPUT);</span><br><span class="line">  pinMode(PIN_STORE, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// left --&gt; right</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">7</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">    digitalWrite(PIN_STORE, LOW);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">8</span>; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(j == i)&#123; light_up(); &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123; light_down(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    digitalWrite(PIN_STORE, HIGH);</span><br><span class="line">    delay(<span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// right --&gt; left</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)&#123;</span><br><span class="line">    digitalWrite(PIN_STORE, LOW);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">8</span>; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(j == i)&#123; light_up(); &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123; light_down(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    digitalWrite(PIN_STORE, HIGH);</span><br><span class="line">    delay(<span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">light_up</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  digitalWrite(PIN_SHIFT, LOW);</span><br><span class="line">  digitalWrite(PIN_DATA, <span class="number">1</span>);</span><br><span class="line">  digitalWrite(PIN_SHIFT, HIGH);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">light_down</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  digitalWrite(PIN_SHIFT, LOW);</span><br><span class="line">  digitalWrite(PIN_DATA, <span class="number">0</span>);</span><br><span class="line">  digitalWrite(PIN_SHIFT, HIGH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>簡潔的寫法：<br>使用<a href="https://www.arduino.cc/reference/en/language/functions/advanced-io/shiftout/" target="_blank" rel="noopener">shiftOut()</a>方法來推送8-bit的數據，由參數bit_order來控制讀取順序，MSBFIRST為由左至右，LSBFIRST則相反。我自定義了light_ticker()函式，接收bit_order參數來控制跑馬燈方向，所以loop()裡頭僅有兩行code。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_DATA 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_STORE 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_SHIFT 4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  pinMode(PIN_DATA, OUTPUT);</span><br><span class="line">  pinMode(PIN_SHIFT, OUTPUT);</span><br><span class="line">  pinMode(PIN_STORE, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  light_ticker(MSBFIRST);  <span class="comment">// left  --&gt; right</span></span><br><span class="line">  light_ticker(LSBFIRST);  <span class="comment">// right --&gt; left</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">light_ticker</span><span class="params">(<span class="keyword">bool</span> bit_order)</span> </span>&#123;</span><br><span class="line">  byte num;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)&#123;</span><br><span class="line">    num =<span class="number">0</span>;</span><br><span class="line">    digitalWrite(PIN_STORE, LOW);</span><br><span class="line">    bitSet(num, i);</span><br><span class="line">    shiftOut(PIN_DATA, PIN_SHIFT, bit_order, num);</span><br><span class="line">    digitalWrite(PIN_STORE, HIGH);</span><br><span class="line">    delay(<span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://i.imgur.com/dhVYF1i.gif" alt></p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p><a href="https://www.arduino.cc/reference/en/language/variables/data-types/int/" target="_blank" rel="noopener">Arduino - Data Types - int</a><br><a href="https://www.arduino.cc/reference/en/language/variables/data-types/byte/" target="_blank" rel="noopener">Arduino - Data Types - byte</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;終於有時間玩玩買來很久的learning kit。開發版種類繁多，但除了修課玩過Ti OMAP系列的PandaBoard、Devkit8000，也就自己買的樹莓派3B+了，
    
    </summary>
    
      <category term="Arduino" scheme="https://laplacetw.github.io/categories/Arduino/"/>
    
    
      <category term="IoT" scheme="https://laplacetw.github.io/tags/IoT/"/>
    
      <category term="arduino" scheme="https://laplacetw.github.io/tags/arduino/"/>
    
  </entry>
  
  <entry>
    <title>CIFAR-10分類任務的辨識準確率</title>
    <link href="https://laplacetw.github.io/data-sci-vgg-cifar10/"/>
    <id>https://laplacetw.github.io/data-sci-vgg-cifar10/</id>
    <published>2020-06-28T23:27:27.000Z</published>
    <updated>2020-06-29T08:51:52.006Z</updated>
    
    <content type="html"><![CDATA[<p>對DL初學者而言，最常用來測試的大概就是MNIST跟CIFAR-10這兩個數據集了。或許對大神們來說不過都是些玩具，但我認為CIFAR-10不只是個toy dataset，相較於MNIST那樣使用MLP就能輕易達到近乎99%辨識準確率的灰階影像，CIFAR-10不像”Hello World!”這麼容易吧？🤨<a id="more"></a></p><p>關於<a href="https://www.cs.toronto.edu/~kriz/cifar.html" target="_blank" rel="noopener">CIFAR-10數據集</a>，像我這樣略懂略懂的人就不贅言了，網路上介紹CIFAR-10的文章很多。不過，當我爬了許多文章之後，大致上都是介紹數據集和使用簡單的CNN來測試而已(準確率約70%)，如何對現有模型結構優化並提升CIFAR-10準確率還是沒頭緒，雖然可以直接載入Keras內建的預訓練模型，例如VGG-16、ResNET-50，但我認為那樣做沒啥意思，根本上還是沒搞懂，也像是大砲打小鳥。</p><h2 id="Keras-Sample-Code"><a href="#Keras-Sample-Code" class="headerlink" title="Keras Sample Code"></a>Keras Sample Code</h2><p></p><p><br>看一下<a href="https://keras.io/examples/cifar10_cnn/" target="_blank" rel="noopener">Keras的範例程式</a>，根據頁面說明，該範例於訓練50 epochs後達到79%的驗證準確率。實際訓練了100 epochs也差不多。</p><ul><li><p>Model Summary<br><img src="https://i.imgur.com/mgSpvB8.png" alt></p></li><li><p>Train History<br><img src="https://i.imgur.com/14YO3XH.png" alt></p></li></ul><h2 id="More-Optimization"><a href="#More-Optimization" class="headerlink" title="More Optimization"></a>More Optimization</h2><p>就Keras範例來說，我嘗試以相同結構增加其網路深度，驗證準確率有得到些微提升(約82%)，但持續盲目地加深網路卻會造成反效果。後來我找到了<a href="https://machinelearningmastery.com/how-to-develop-a-cnn-from-scratch-for-cifar-10-photo-classification/" target="_blank" rel="noopener">Jason Brownlee博士的教學</a>，那是一個很棒的tutorial，嘗試對模型結構進行優化後，訓練結果在測試數據集取得89%的準確率(Train / Valid : 94.60% / 89.35%)。</p><ul><li><p>Model Summary<br><img src="https://i.imgur.com/VxnAUMG.png" alt></p></li><li><p>Train History<br><img src="https://i.imgur.com/WzberYE.png" alt></p></li></ul><h2 id="Fractional-Max-Pooling"><a href="#Fractional-Max-Pooling" class="headerlink" title="Fractional Max-Pooling"></a>Fractional Max-Pooling</h2><p>在優化了模型結構後，測試準確率依然無法突破90%，因此我搜尋了state-of-the-art on CIFAR-10，看看大神們超脫凡俗的思路究竟是如何突破問題。於是我<a href="https://laplacetw.github.io/study-fractional-max-pooling">仔細閱讀了Fractional Max-Pooling這篇論文</a>，並實際應用到我的模型訓練，儘管我沒有使用和原始論文實驗中同樣深的網路結構，依然在測試數據集的準確率達到了93%(Train / Valid : 97.94% / 93.55%)。順帶一提，該模型在我的GTX 1660 Super訓練600 epochs需耗費30個小時左右。</p><p>關於Fractional Max-Pooling的實現，TensorFlow已有內建，而Keras可以利用Lambda來引入模型中使用：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">frac_max_pool</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.fractional_max_pool(x, [<span class="number">1.0</span>, <span class="number">1.41</span>, <span class="number">1.41</span>, <span class="number">1.0</span>], pseudo_random=<span class="keyword">True</span>, overlapping=<span class="keyword">True</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">model.add(Lambda(frac_max_pool))</span><br></pre></td></tr></table></figure></p><ul><li><p>Model Summary<br><img src="https://i.imgur.com/IW0Z2VC.png" alt></p></li><li><p>Train History<br><img src="https://i.imgur.com/mLV3eVI.png" alt></p></li></ul><h2 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h2><p>對參數量和模型大小做個比較：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">VGG-16/VGG-19</th><th style="text-align:center">VGG-like + FMP</th></tr></thead><tbody><tr><td style="text-align:center">total params</td><td style="text-align:center">10M+</td><td style="text-align:center">1.5M</td></tr><tr><td style="text-align:center">model size</td><td style="text-align:center">200+ MB</td><td style="text-align:center">12.4 MB</td></tr></tbody></table><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><p></p><p><br><a href="https://github.com/laplacetw/vgg-like-cifar10" target="_blank" rel="noopener">https://github.com/laplacetw/vgg-like-cifar10</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;對DL初學者而言，最常用來測試的大概就是MNIST跟CIFAR-10這兩個數據集了。或許對大神們來說不過都是些玩具，但我認為CIFAR-10不只是個toy dataset，相較於MNIST那樣使用MLP就能輕易達到近乎99%辨識準確率的灰階影像，CIFAR-10不像”Hello World!”這麼容易吧？🤨
    
    </summary>
    
      <category term="Data Science" scheme="https://laplacetw.github.io/categories/Data-Science/"/>
    
    
      <category term="keras" scheme="https://laplacetw.github.io/tags/keras/"/>
    
      <category term="deep learning" scheme="https://laplacetw.github.io/tags/deep-learning/"/>
    
      <category term="computer vision" scheme="https://laplacetw.github.io/tags/computer-vision/"/>
    
      <category term="cifar-10" scheme="https://laplacetw.github.io/tags/cifar-10/"/>
    
  </entry>
  
  <entry>
    <title>翻譯：Fractional Max-Pooling</title>
    <link href="https://laplacetw.github.io/study-fractional-max-pooling/"/>
    <id>https://laplacetw.github.io/study-fractional-max-pooling/</id>
    <published>2020-05-29T02:43:14.000Z</published>
    <updated>2020-06-29T11:39:34.890Z</updated>
    
    <content type="html"><![CDATA[<p>作者：Benjamin Graham<br>原文：<a href="https://arxiv.org/abs/1412.6071" target="_blank" rel="noopener">https://arxiv.org/abs/1412.6071</a><br><a id="more"></a></p><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>卷積網路幾乎總是包含若干特徵空間取樣(pooling)的形式，通常使用α x α max-pooling(α = 2)。最大取樣作用於卷積網路的隱藏層，以整數倍乘因子α來縮減隱藏層的大小。而當你拋棄了75%的數據所獲得的驚人副產物是—在網路中建立了一定程度對於平移與彈性形變的不變性。然而，如果你只是交替使用卷積層與最大取樣，則效能表現將會受限於特徵空間的快速縮減與取樣區域不相交的特性。因此，我們制訂了分數形式的最大取樣，允許α採用非整數值。分數階最大取樣是隨機的，因為構建合適的取樣區域有許多不同的方法。我們發現分數階最大取樣的形式減少了許多數據集的過擬合現象。例如，我們改善了CIFAR-100目前最先進的技術，甚至沒使用隨機去活化(dropout)。</p><h3 id="卷積神經網路"><a href="#卷積神經網路" class="headerlink" title="卷積神經網路"></a>卷積神經網路</h3><p>卷積網路被使用來解決影像辨識問題，主要由兩種類型的分層結構組成：</p><ul><li>卷積濾波層</li><li>若干形式的空間取樣，例如最大取樣(max-pooling)</li></ul><p>聚焦於改善卷積層的研究造就了豐富的技術，例如dropout <a href="#參考文獻">[10]</a>、DropConnect <a href="#參考文獻">[12]</a>、deep networks with many small filters <a href="#參考文獻">[2]</a>、large input layer filters for detecting texture <a href="#參考文獻">[5]</a>以及deeply supervised networks <a href="#參考文獻">[6]</a>。</p><p>相較之下，不起眼的取樣操作已經被逐漸忽略，長期以來2 × 2 max-pooling(MP2-pooling)已成為構建卷積神經網路的默認選項。MP2-pooling之所以受歡迎有許多原因：執行快速、能迅速縮減隱藏層的大小、對於平移與彈性形變有一定程度的不變性。然而，取樣區域的不相交特性可能限制其泛化能力。此外，由於MP2 pooling如此迅速地縮減了隱藏層的大小，因此需要透過堆疊連續的卷積層，以構建真正的深度網路 <a href="#參考文獻">[7, 9, 11]</a>。有兩種方法已經被提出來解決此問題：</p><ul><li>使用3 x 3取樣區域搭配步長2(strides = 2)的重疊取樣 <a href="#參考文獻">[5]</a></li><li>隨機取樣，即以大小偏差的取樣形式代替在每個取樣區域選擇最大值的動作 <a href="#參考文獻">[13]</a></li></ul><p>但是，這兩種技術仍將隱藏層大小縮減了兩倍。這令人不禁想問，是否能有更和緩的方法來有效地應用特徵空間取樣。如果取樣只讓隱藏層大小縮減$ \sqrt 2 $倍，那麼我們在構建卷積神經網路時能使用的取樣層數便能翻兩倍。每個取樣層都有機會以不同尺度來查看輸入影像，以正確的尺度查看影像，應該能更容易地辨識出線索特徵，並將物件標記為特定類別。</p><p>因此，本文的重點是最大取樣的一種特殊形式，我們稱之為分數階最大取樣(Fractional Max-Pooling, FMP)， FMP的想法是，將影像的特徵空間尺寸縮小α倍(1 &lt; α &lt; 2)。如同隨機取樣，FMP在取樣過程中引入了一定程度的隨機性。然而，FMP與隨機取樣不同的是，其隨機性和取樣區域的選擇有關，而非每個取樣區域內的取樣方式。</p><p>於第二節中，我們將說明分數階最大取樣的形式。簡而言之，有三種選擇會影響FMP的實現方式：</p><ul><li>取樣的非整數值α決定了取樣層輸入和輸出的特徵空間尺寸比例。例如2 × 2最大取樣對應於α = 2的特定情況。</li><li>取樣區域可以用隨機或偽隨機的方式來選擇。在FMP的隨機性和使用隨機去活化是否搭配數據增強(data augmentation)之間似乎得做適當的取捨，隨機的FMP或許可以表現得更好，但如果「過度」使用隨機去活化或訓練數據強化，則可能導致欠擬合(underfitting)。</li><li>取樣區域可以不相交(disjoint)或重疊(overlapping)。不相交的區域較容易描述，但我們發現重疊區域的效果更好。</li></ul><p>我們會在第三節中描述如何設計和訓練我們的卷積網路，並於第四節中展示MNIST手寫數字、CIFAR-10、CIFAR-100、阿薩姆語手寫文字以及CASIA-OLHWDB1.1手寫漢字等數據集的訓練結果。</p><h3 id="分數階最大取樣"><a href="#分數階最大取樣" class="headerlink" title="分數階最大取樣"></a>分數階最大取樣</h3><p>CNN的每個卷積濾波器都會產生一個隱含變數的矩陣，通常使用某種形式的取樣來縮減矩陣大小。最大取樣是一個採用$ N_{in} \times N_{in} $矩陣並返回較小的$ N_{out} \times N_{out} $輸出矩陣的過程，這是透過將$ N_{in} \times N_{in} $輸入正方形分割為$ N^2_{out} $個取樣區域$ (P_{i,j}) $而實現：<br>$$ (P_{i,j}) \subset \lbrace 1,2,…,N_{in} \rbrace ^2 \ \text{for each}\ (i,j) \in \lbrace 1,…,N_{out} \rbrace ^2 $$<br>接著令：<br>$$ Output_{i,j} = \displaystyle{\max_{(k,l)\in P_{i,j}}} Input_{k,l} $$</p><p>以我們的使用慣例2 x 2最大取樣而言，$ N_{in} = 2N_{out}\ and\ P_{i,j} = \rbrace 2i-1,2i \rbrace \times \rbrace 2j-1,2j \rbrace $。<a href="#參考文獻">參考文獻 [5]</a>中提到，最大取樣應用於3 x 3重疊取樣區域，因此$ N_{in} = 2N_{out}+1 $，$ P_{i,j} $為3 x 3正方形，以步長2進行擴展。上述兩種情況中，$ N_{in}\ /\ N_{out} \approx 2 $，因此輸入影像中任何有效特徵的空間大小會在每個取樣層中減半。相較之下，如果我們採用$ N_{in}\ /\ N_{out} \approx \sqrt[n]{2} $，則有效特徵的空間大小之縮小速率減緩N倍。為清楚起見，我們現在將重點放在$ N_{in}\ /\ N_{out} \in (1,2) $，因為我們主要感興趣的是準確率；如果對執行速度相當介意，則FMP可以採用$ N_{in}\ /\ N_{out} \in (2,3) $。</p><p><img src="https://i.imgur.com/n77VYDM.png" alt><br>Figure 1：由左至右依序為36 x 36的網格；4個偽隨機的FMP不相交取樣區域，$ \alpha \in \lbrace \sqrt[3]{2},\sqrt 2,2,\sqrt 5 \rbrace $；以及$ \alpha = \sqrt 2 $的隨機的FMP不相交取樣區域。對$ \alpha \in (1,2) $，FMP生成的矩形取樣區域其邊長為1或2。對$ \alpha \in (2,3) $，其取樣區域邊長則為2或3。</p><p>給定一對特定數值$ (N_{in},N_{out}) $，我們需要一種選擇取樣區域$ (P_{i,j}) $的方法。我們將考慮兩種類型的排列方式：重疊的正方形以及不相交的矩形集合。在Figure 1中我們展示了數種不同的方法來將36 x 36正方形網格分割為不相交的矩形。Figure 1中的第2、第3及第6張影像可以用來定義重疊的2 x 2正方形的排列：將影像中每個矩形的左上角視為其中一個正方形的左上角。為標準化地描述如何生成取樣區域，令：<br>$$ (a_i)^{N_{out}}_{i=0}\ ,\ (b_i)^{N_{out}}_{i=0} $$<br><a id="link-formula-1"></a></p><p>為兩個以1為起始、$ N_{in} $結束的整數遞增數列，且遞增量皆為1或2(i.e. $ a_{i+1}-a_i \in \lbrace 1,2 \rbrace $)。然後我們可以用以下任一方式定義取樣區域 :<br>$$ P = [a_{i-1},a_i-1] \times [b_{j-1},b_j-1]\ \text{or}\ P_{i,j} = [a_{i-1},a_i] \times [b_{j-1},b_j]\ \ (1) $$</p><p><img src="https://i.imgur.com/a1uq3oy.png" alt><br>Figure 2：左上角為柯達公司釋出的真實色彩圖片數據集，解析度為384 x 256(原始解析度為768 x 512)。其他五張影像則是以隨機的不相交FMP$ \sqrt 2 $取樣區域進行6層平均取樣的結果，解析度為左上角的八分之一。</p><p>我們稱這兩種情況分別為不相交和重疊，接著嘗試兩種不同的方法來生成整數序列：隨機數列以及偽隨機數列。如果數列的增加是透過對適當數量的1和2進行隨機排列而獲得的，那麼我們稱其為隨機數列。若是透過以下方式則稱之偽隨機數列：<br>$$ a_i = ceiling(\alpha(i+u)),\ \alpha \in (1,2)\ \text{with some}\ u  \in (0,1) $$</p><p>以下是對應$ N_{in} = 25、N_{out} = 18 $之情況的增量模式，左側增量為隨機生成，右側增量則來自偽隨機數列：</p><p>211112112211112122 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 112112121121211212<br>111222121121112121 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 212112121121121211<br>121122112111211212 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 211211212112121121</p><p>儘管兩種類型的數列都是不規則的，但偽隨機數列所生成的取樣區域較隨機數列來得穩定。為顯示取樣區域隨機化的效果，請參考Figure 2。我們拍攝了一張影像，接著疊代使用不相交的隨機取樣區域來縮減影像大小(在每個取樣區域中取平均值)。結果按比例縮減的影像顯示出彈性形變。相反地，若我們使用偽隨機取樣區域，則生成的影像僅為原始影像的真實比例縮小版本。</p><h3 id="實作方法"><a href="#實作方法" class="headerlink" title="實作方法"></a>實作方法</h3><p><br><br><img src="https://i.imgur.com/WRZu8v6.png" alt><br>Figure 3：微型FMP$ \sqrt 2 $網路各層的空間大小如圖所示。分數$ \frac32,\frac64,\frac{10}{7} $近似於$ \sqrt 2 $。</p><p>我們將使用稀疏卷積網路的實例來進行訓練，這實際上意味著我們能逐層依序指定卷積網路的結構。例如：<br>$$ 10C2-FMP \sqrt 2 -20C-30C2-FMP \sqrt 2 -40C2-50C1-output $$</p><p>輸入層的空間大小是透過由右至左的運算所獲得的：每個C2卷積層將空間大小增加為2倍，FMP$ \sqrt 2 $層則是將空間大小增加為2倍(四捨五入至最接近的整數)；參見Figure 3。輸入層通常會大於輸入影像—必要時會自動以0來補齊。分數階最大取樣也能輕易地在常用的卷積神經網路套件中實現。為簡單起見，我們使用的所有網路中每個卷積層的濾波器數量都呈線性增長。因此，我們能簡要地說明上述的網路結構為</p><p>$$ (10_nC2-FMP \sqrt 2)_3-C2-C1-output $$</p><p>$ 10_n $代表第n個卷積層中的濾波器數量為$ 10_n $，下標的3表示3對交替使用的C2/FMP層。使用隨機去活化時，進入的網路越深，所使用的隨機去活化數量就越多。我們在第一個隱藏層中使用0％隨機去活化，並在最後一個隱藏層中線性增加至50％。所使用的活化函數為leaky ReLU(帶滲漏整流線性函數)。</p><h4 id="模型平均"><a href="#模型平均" class="headerlink" title="模型平均"></a>模型平均</h4><p>每次我們基於訓練或測試目的而應用FMP網路時，都會使用不同的隨機或偽隨機序列來生成取樣區域。因此FMP網絡可以被視為相似網路的集合，而每個不同的取樣區域設定都定義了該集合的不同成員。 這類似於隨機去活化<a href="#參考文獻">[10]</a>；隨機去活化其遮罩的不同數值可以用來定義相關網路的集合。如同隨機去活化，FMP網路的模型平均可以幫助提升效能。如果你對同一張測試影像進行多次分類，可能會得到許多不同的預測結果。對每個測試影像進行多次分類後，使用多數決可以大幅提升準確度；參見Figure 4。</p><p><img src="https://i.imgur.com/NXYLssj.png" alt><br>Figure 4：重複測試對於一個由MNIST所訓練的FMP網路之影響</p><h3 id="實驗結果"><a href="#實驗結果" class="headerlink" title="實驗結果"></a>實驗結果</h3><p><br></p><h4 id="不使用數據增強或隨機去活化"><a href="#不使用數據增強或隨機去活化" class="headerlink" title="不使用數據增強或隨機去活化"></a>不使用數據增強或隨機去活化</h4><p>為比較不同種類的分數階最大取樣，我們在$ \text{MNIST}^1 $以及CIFAR-100數據集上訓練FMP網路<a href="#參考文獻">[4]</a>。對於MNIST，我們使用了小型的FMP網路：<br>$$ \text{input layer size 36 x 36：}\ (36_nC2-FMP \sqrt 2)_6-C2-C1-output $$ </p><p>對於CIFAR-100則使用了較大的網路：<br>$$ \text{input layer size 94 x 94：}\ (64_nC2-FMP \sqrt[3]{2})_{12}-C2-C1-output $$ </p><p>在不使用訓練數據增強的情況下，這兩個數據集最新的測試誤差分別為0.39%以及34.57%<a href="#參考文獻">[6]</a>。FMP網路的結果如Table 1所示。使用重複測試12次的模型平均，我們發現使用隨機重疊取樣的FMP對這兩個數據集的表現最佳。對於CIFAR-100而言，此方法相較於常規的最大取樣有著相當程度的改進。就網路的複雜程度概括來說，CIFAR-100的網路擁有1200萬個權重參數，且經過250次訓練數據的重複訓練(在GeForce GTX 780上需耗費18小時)。我們嘗試改變CIFAR-100每層的隱藏單元數量，搭配隨機重疊取樣：</p><ul><li>使用$ {16}_nC2 $(0.8M weights)的測試結果誤差為42.07% / 34.87</li><li>使用$ {32}_nC2 $(3.2M weights)的測試結果誤差為35.09% / 29.66</li><li>使用$ {96}_nC2 $(27M weights)結合隨機去活化以及較為和緩的學習率衰減，測試結果誤差為27.62% / 23.82</li></ul><p><img src="https://i.imgur.com/NblVtwE.png" alt><br>Table 1：MNIST以及CIFAR-100的測試誤差</p><p>註1：<a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">http://yann.lecun.com/exdb/mnist/</a></p><h4 id="阿薩姆語手寫文字"><a href="#阿薩姆語手寫文字" class="headerlink" title="阿薩姆語手寫文字"></a>阿薩姆語手寫文字</h4><p>為比較FMP和MP2兩種取樣方式搭配訓練數據增強的影響，我們使用線上線上阿薩姆語手寫文字數據集來測試。此數據集包含了183個印度-雅利安文字中每個文字的45個樣本。「線上」的意思是指每一筆畫皆代表(x, y)座標序列。我們使用每個文字的前36個樣本做為訓練集，剩餘的9個樣本做為測試集，並將樣本縮放為64 x 64的大小來訓練一個有6層MP2的網路：<br>$$ 32_nC3-MP2-(C2-MP2)_{12}-C2-output $$</p><p>以及使用10層隨機的重疊FMP$ \sqrt 2 $取樣的FMP網路：<br>$$ (32_nC2-FMP\sqrt 2)_{10}-C2-C1-output $$</p><p>我們訓練了沒有使用隨機去活化的網路，以及：</p><ul><li>不使用數據增強</li><li>使用隨機平移來位移文字</li><li>使用仿射轉換(平移、旋轉、拉伸以及剪切的隨機組合)</li></ul><p><img src="https://i.imgur.com/fNDKsYO.png" alt><br>Table 2：以阿薩姆語手寫文字數據集搭配不同類型的數據增強來訓練網路的測試誤差</p><p>參照Table 2。某種意義上來說，我們對於「在某種程度的輕微失真下，筆跡的意義通常是不變的」的認知，來自最大取樣與訓練數據增強這兩種不同的方式。有趣的是，不使用數據增強的FMP網路比起使用數據增強的MP2網路表現更好，顯示FMP網路更適合處理該數據集。</p><h4 id="線上中文手寫文字"><a href="#線上中文手寫文字" class="headerlink" title="線上中文手寫文字"></a>線上中文手寫文字</h4><p>CASIA-OLHWDB1.1數據集包含了3755個獨立的GBK 1級漢字手寫樣本<a href="#參考文獻">[8]</a>，每個類別大約有240個訓練樣本與60個測試樣本。使用4層的MP2取樣層可以達到5.61%的測試誤差<a href="#參考文獻">[2]</a>。</p><p>我們使用<a href="#參考文獻">[3]</a>所描述的線上字符表示法；以64 x 64的大小繪製文字，加上量測筆跡方向的特徵，生成64 x 64 x 9的陣列。使用2 x 2最大取樣、隨機去活化以及仿射訓練數據增強，測試結果誤差為3.82% <a href="#參考文獻">[3]</a>。以偽隨機的重疊FMP取代最大取樣：<br>$$ (64_nC2-FMP\sqrt 2)_7-(C2-MP2-C1)_2-C2-C1-output $$</p><p>測試結果誤差為3.26%(1 test)以及2.97%(12 tests)。</p><h4 id="CIFAR-10搭配隨機去活化與訓練數據增強"><a href="#CIFAR-10搭配隨機去活化與訓練數據增強" class="headerlink" title="CIFAR-10搭配隨機去活化與訓練數據增強"></a>CIFAR-10搭配隨機去活化與訓練數據增強</h4><p>對於CIFAR-10數據集，我們使用了隨機去活化和透過仿射轉換來擴充訓練數據：隨機對數據集執行平移、旋轉、反射、拉伸及剪切的預處理。相較之下，人類在CIFAR-10數據集的表現估計為6%$ {}^2 $ 。而近期(2015)於Kaggle平台上的CIFAR-10競賽，獲勝者的測試誤差為4.47%$ {}^3 $, 使用上述的數據增強策略和以下的網路結構：<br>$$ (300_nC2-300_nC2-MP2)_5-C2-C1-output $$</p><p>使用偽隨機的重疊FMP網路：<br>$$ (160_nC2-FMP\sqrt[3]{2})_12-C2-C1-output $$</p><p>我們得到了4.50%(1 test)，3.67%(12 tests)及3.47%(100 tests)的測試誤差。</p><p>註2：<a href="http://karpathy.github.io/2011/04/27/manually-classifying-cifar10/" target="_blank" rel="noopener">http://karpathy.github.io/2011/04/27/manually-classifying-cifar10/</a><br>註3：<a href="https://www.kaggle.com/c/cifar-10/" target="_blank" rel="noopener">https://www.kaggle.com/c/cifar-10/</a><br>＊原文中註2的原始網址(<a href="http://karpathy.ca/myblog/?p=160)已失效，推測是網站搬遷。" target="_blank" rel="noopener">http://karpathy.ca/myblog/?p=160)已失效，推測是網站搬遷。</a></p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>我們在許多受歡迎的數據集上訓練搭配分數階最大取樣的卷積網路，並於效能方面發現有顯著的改善。取樣區域重疊的FMP比起不相交的似乎表現得更好。使用訓練數據增強時，偽隨機取樣區域比隨機取樣區域的表現更佳。若微調隨機去活化的使用數量，隨機取樣可能會重新取得優勢。</p><p>再次查看Figure 2由隨機取樣所創造的失真，請注意此「失真」可以分解為「X軸的失真」和「Y軸的失真」，探究無法以<a href="#link-formula-1">方程式(1)</a>表達的取樣區域可能會很有趣，因為它們可能將更為通用的失真編碼至結果的卷積網路。</p><h3 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h3><p>[1] K. Bache and M. Lichman. UCI machine learning repository, 2013.</p><p>[2] D. Ciresan, U. Meier, and J. Schmidhuber. Multi-column deep neural networks for image classification. In Computer Vision and Pattern Recognition(CVPR), 2012 IEEE Conference on, pages 3642–3649, 2012.</p><p>[3] Ben Graham. Spatially-sparse convolutional neural networks. 2014.</p><p>[4] Alex Krizhevsky. Learning Multiple Layers of Features from Tiny Images.Technical report, 2009.</p><p>[5] Alex Krizhevsky, Ilya Sutskever, and Geoffrey E. Hinton. Imagenet classification with deep convolutional neural networks. In F.Pereira, C.J.C. Burges, L. Bottou, and K.Q. Weinberger, editors, Advances in Neural Information Processing Systems 25, pages 1097–1105. Curran Associates, Inc., 2012.</p><p>[6] Chen-Yu Lee, Saining Xie, Patrick Gallagher, Zhengyou Zhang, and Zhuowen Tu. Deeply-Supervised Nets, 2014.</p><p>[7] Min Lin, Qiang Chen, and Shuicheng Yan. Network in network. ICLR, 2014.</p><p>[8] C.-L. Liu, F. Yin, D.-H. Wang, and Q.-F. Wang. CASIA online and offline Chinese handwriting databases. In Proc. 11th International Conference on Document Analysis and Recognition (ICDAR), Beijing, China, pages 37–41, 2011.</p><p>[9] Karen Simonyan and Andrew Zisserman. Very deep convolutional networks for large-scale image recognition. 2014.</p><p>[10] Nitish Srivastava, Geoffrey Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdinov. Dropout: A Simple Way to Prevent Neural Networks from Overfitting. Journal of Machine Learning Research, 15:1929–1958, 2014.</p><p>[11] Christian Szegedy, Wei Liu, Yangqing Jia, Pierre Sermanet, Scott Reed,Dragomir Anguelov, Dumitru Erhan, Vincent Vanhoucke, and Andrew Rabinovich. Going deeper with convolutions. 2014.</p><p>[12] Li Wan, Matthew Zeiler, Sixin Zhang, Yann Lecun, and Rob Fergus. Regularization of Neural Networks using DropConnect, 2013. JMLR W&amp;CP 28 (3) : 1058–1066, 2013.</p><p>[13] Matthew D. Zeiler and Rob Fergus. Stochastic Pooling for Regularization of Deep Convolutional Neural Networks. ICLR 2013.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：Benjamin Graham&lt;br&gt;原文：&lt;a href=&quot;https://arxiv.org/abs/1412.6071&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://arxiv.org/abs/1412.6071&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Study" scheme="https://laplacetw.github.io/categories/Study/"/>
    
    
      <category term="deep learning" scheme="https://laplacetw.github.io/tags/deep-learning/"/>
    
      <category term="computer vison" scheme="https://laplacetw.github.io/tags/computer-vison/"/>
    
  </entry>
  
  <entry>
    <title>樹莓派：紅外線熱像儀</title>
    <link href="https://laplacetw.github.io/rspi-thermal-cam-amg8833/"/>
    <id>https://laplacetw.github.io/rspi-thermal-cam-amg8833/</id>
    <published>2020-04-19T15:23:39.000Z</published>
    <updated>2020-07-06T06:48:38.501Z</updated>
    
    <content type="html"><![CDATA[<p>看到火車站架設熱像儀監控旅客們的體溫，出於好奇也想做一個看看呢。<br><a id="more"></a></p><h3 id="AMG8833-Intro"><a href="#AMG8833-Intro" class="headerlink" title="AMG8833 Intro"></a>AMG8833 Intro</h3><p><img src="https://i.imgur.com/JATdb1S.jpg" alt><br>於是我買來了Adafruit AMG8833模組，這模組上頭裝著Panasonic所生產的紅外線陣列感測器。<br>Datasheet：<a href="https://b2b-api.panasonic.eu/file_stream/pids/fileversion/1819" target="_blank" rel="noopener">Panasonic IR Array Sensor Grid-EYE</a></p><p><img src="https://i.imgur.com/gQseBWz.jpg" alt><br><img src="https://i.imgur.com/DBrxsGu.jpg" alt></p><p>參考<a href="https://www.adafruit.com/product/3538" target="_blank" rel="noopener">Adafruit官網</a>的技術參數說明：</p><ol><li>感測器為8x8紅外線陣列</li><li>溫度感測區間為攝氏0度～攝氏80度(精度為正負2.5度)</li><li>人體最大感測距離為7米</li><li>透過<a href="https://zh.wikipedia.org/wiki/I%C2%B2C" target="_blank" rel="noopener">I2C協定</a>進行數據傳輸</li></ol><h3 id="Setting-amp-Installing"><a href="#Setting-amp-Installing" class="headerlink" title="Setting &amp; Installing"></a>Setting &amp; Installing</h3><p>接下來將於運行Raspbian作業系統的樹莓派上進行環境設置，我習慣<a href="https://laplacetw.github.io/rspi-meet-raspberry-pi-b3-plus/#Remote">使用VNC Server與樹莓派進行遠端連線操作</a>。</p><h4 id="系統更新"><a href="#系統更新" class="headerlink" title="系統更新"></a>系統更新</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get upgrade</span></span><br></pre></td></tr></table></figure><h4 id="啟用I2C-amp-SPI介面"><a href="#啟用I2C-amp-SPI介面" class="headerlink" title="啟用I2C &amp; SPI介面"></a>啟用I2C &amp; SPI介面</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo raspi-config</span></span><br></pre></td></tr></table></figure><p>在選項5的介面設定中啟用它們，然後測試是否成功啟用<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls /dev/i2c* /dev/spi*</span></span><br></pre></td></tr></table></figure></p><h4 id="Packge-Installing"><a href="#Packge-Installing" class="headerlink" title="Packge Installing"></a>Packge Installing</h4><p>直接安裝Adafruit的AMG88XX Package，pip會處理其他依賴的函式庫(e.g. Adafruit-Blinka)。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pip3 install adafruit-circuitpython-amg88xx</span></span><br></pre></td></tr></table></figure><br><img src="https://i.imgur.com/sANUgo1.png" alt></p><h4 id="Blinka-Test"><a href="#Blinka-Test" class="headerlink" title="Blinka Test"></a>Blinka Test</h4><p>使用Adafruit的測試範例來確認環境設定是否完成。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> board</span><br><span class="line"><span class="keyword">import</span> digitalio</span><br><span class="line"><span class="keyword">import</span> busio</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Hello blinka!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Try to great a Digital input</span></span><br><span class="line">pin = digitalio.DigitalInOut(board.D4)</span><br><span class="line">print(<span class="string">"Digital IO ok!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Try to create an I2C device</span></span><br><span class="line">i2c = busio.I2C(board.SCL, board.SDA)</span><br><span class="line">print(<span class="string">"I2C ok!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Try to create an SPI device</span></span><br><span class="line">spi = busio.SPI(board.SCLK, board.MOSI, board.MISO)</span><br><span class="line">print(<span class="string">"SPI ok!"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"done!"</span>)</span><br></pre></td></tr></table></figure><br><img src="https://i.imgur.com/msoQDyb.png" alt></p><h4 id="I2C-Test"><a href="#I2C-Test" class="headerlink" title="I2C Test"></a>I2C Test</h4><p>試著透過I2C讀取感測器數據並印出來<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> busio</span><br><span class="line"><span class="keyword">import</span> board</span><br><span class="line"><span class="keyword">import</span> adafruit_amg88xx</span><br><span class="line"></span><br><span class="line">i2c = busio.I2C(board.SCL, board.SDA)</span><br><span class="line">amg = adafruit_amg88xx.AMG88XX(i2c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> amg.pixels:</span><br><span class="line">        <span class="comment"># Pad to 1 decimal place</span></span><br><span class="line">        print([<span class="string">"&#123;0:.1f&#125;"</span>.format(temp) <span class="keyword">for</span> temp <span class="keyword">in</span> row])</span><br><span class="line">        print(<span class="string">""</span>)</span><br><span class="line">    print(<span class="string">"\n"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><br><img src="https://i.imgur.com/DK85IXe.png" alt></p><h4 id="Package-Installing"><a href="#Package-Installing" class="headerlink" title="Package Installing"></a>Package Installing</h4><p>安裝將數據進行可視化所需的函式庫<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install -y python3-scipy python3-pygame</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo pip3 install colour</span></span><br></pre></td></tr></table></figure></p><h3 id="Build-Thermal-Camera"><a href="#Build-Thermal-Camera" class="headerlink" title="Build Thermal Camera"></a>Build Thermal Camera</h3><p>依照<a href="https://pinout.xyz/" target="_blank" rel="noopener">樹莓派GPIO</a>與AMG8833進行連接：</p><ol><li>3V Power連接到Vin</li><li>GND連接到GND</li><li>連接SDA &amp; SCL<br><img src="https://i.imgur.com/ilmXszn.jpg" alt></li></ol><p>Adafruit官方範例程式：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""This example is for Raspberry Pi (Linux) only!</span></span><br><span class="line"><span class="string">   It will not work on microcontrollers running CircuitPython!"""</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> busio</span><br><span class="line"><span class="keyword">import</span> board</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> scipy.interpolate <span class="keyword">import</span> griddata</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> colour <span class="keyword">import</span> Color</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> adafruit_amg88xx</span><br><span class="line"></span><br><span class="line">i2c_bus = busio.I2C(board.SCL, board.SDA)</span><br><span class="line"></span><br><span class="line"><span class="comment">#low range of the sensor (this will be blue on the screen)</span></span><br><span class="line">MINTEMP = <span class="number">26.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#high range of the sensor (this will be red on the screen)</span></span><br><span class="line">MAXTEMP = <span class="number">32.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#how many color values we can have</span></span><br><span class="line">COLORDEPTH = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">os.putenv(<span class="string">'SDL_FBDEV'</span>, <span class="string">'/dev/fb1'</span>)</span><br><span class="line">pygame.init()</span><br><span class="line"></span><br><span class="line"><span class="comment">#initialize the sensor</span></span><br><span class="line">sensor = adafruit_amg88xx.AMG88XX(i2c_bus)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pylint: disable=invalid-slice-index</span></span><br><span class="line">points = [(math.floor(ix / <span class="number">8</span>), (ix % <span class="number">8</span>)) <span class="keyword">for</span> ix <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">64</span>)]</span><br><span class="line">grid_x, grid_y = np.mgrid[<span class="number">0</span>:<span class="number">7</span>:<span class="number">32j</span>, <span class="number">0</span>:<span class="number">7</span>:<span class="number">32j</span>]</span><br><span class="line"><span class="comment"># pylint: enable=invalid-slice-index</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sensor is an 8x8 grid so lets do a square</span></span><br><span class="line">height = <span class="number">240</span></span><br><span class="line">width = <span class="number">240</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#the list of colors we can choose from</span></span><br><span class="line">blue = Color(<span class="string">"indigo"</span>)</span><br><span class="line">colors = list(blue.range_to(Color(<span class="string">"red"</span>), COLORDEPTH))</span><br><span class="line"></span><br><span class="line"><span class="comment">#create the array of colors</span></span><br><span class="line">colors = [(int(c.red * <span class="number">255</span>), int(c.green * <span class="number">255</span>), int(c.blue * <span class="number">255</span>)) <span class="keyword">for</span> c <span class="keyword">in</span> colors]</span><br><span class="line"></span><br><span class="line">displayPixelWidth = width / <span class="number">30</span></span><br><span class="line">displayPixelHeight = height / <span class="number">30</span></span><br><span class="line"></span><br><span class="line">lcd = pygame.display.set_mode((width, height))</span><br><span class="line"></span><br><span class="line">lcd.fill((<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">pygame.display.update()</span><br><span class="line">pygame.mouse.set_visible(<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">lcd.fill((<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">pygame.display.update()</span><br><span class="line"></span><br><span class="line"><span class="comment">#some utility functions</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">constrain</span><span class="params">(val, min_val, max_val)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> min(max_val, max(min_val, val))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">map_value</span><span class="params">(x, in_min, in_max, out_min, out_max)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min</span><br><span class="line"></span><br><span class="line"><span class="comment">#let the sensor initialize</span></span><br><span class="line">time.sleep(<span class="number">.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">#read the pixels</span></span><br><span class="line">    pixels = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> sensor.pixels:</span><br><span class="line">        pixels = pixels + row</span><br><span class="line">    pixels = [map_value(p, MINTEMP, MAXTEMP, <span class="number">0</span>, COLORDEPTH - <span class="number">1</span>) <span class="keyword">for</span> p <span class="keyword">in</span> pixels]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#perform interpolation</span></span><br><span class="line">    bicubic = griddata(points, pixels, (grid_x, grid_y), method=<span class="string">'cubic'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#draw everything</span></span><br><span class="line">    <span class="keyword">for</span> ix, row <span class="keyword">in</span> enumerate(bicubic):</span><br><span class="line">        <span class="keyword">for</span> jx, pixel <span class="keyword">in</span> enumerate(row):</span><br><span class="line">            pygame.draw.rect(lcd, colors[constrain(int(pixel), <span class="number">0</span>, COLORDEPTH- <span class="number">1</span>)],</span><br><span class="line">                             (displayPixelHeight * ix, displayPixelWidth * jx,</span><br><span class="line">                              displayPixelHeight, displayPixelWidth))</span><br><span class="line"></span><br><span class="line">    pygame.display.update()</span><br></pre></td></tr></table></figure><br><br><br>迷你紅外線熱像儀就這麼運作起來囉～🙆‍♂️ 可依照自己的測試環境，嘗試調整感測溫度上下限讓影像清晰一些。<br><img src="https://i.imgur.com/KtWuOfU.gif" alt></p><p>＊參考</p><ol><li><a href="https://www.strongpilab.com/i2c-introduction/" target="_blank" rel="noopener">I2C-協定用法原理簡介-晶片溝通的橋樑</a></li><li><a href="https://learn.adafruit.com/circuitpython-on-raspberrypi-linux/installing-circuitpython-on-raspberry-pi" target="_blank" rel="noopener">Installing CircuitPython Libraries on Raspberry Pi</a></li><li><a href="https://learn.adafruit.com/adafruit-amg8833-8x8-thermal-camera-sensor/python-circuitpython" target="_blank" rel="noopener">Adafruit AMG8833 8x8 Thermal Camera Sensor</a></li><li><a href="https://learn.adafruit.com/adafruit-amg8833-8x8-thermal-camera-sensor/raspberry-pi-thermal-camera" target="_blank" rel="noopener">Raspberry Pi Thermal Camera</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到火車站架設熱像儀監控旅客們的體溫，出於好奇也想做一個看看呢。&lt;br&gt;
    
    </summary>
    
      <category term="Raspberry Pi" scheme="https://laplacetw.github.io/categories/Raspberry-Pi/"/>
    
    
      <category term="IoT" scheme="https://laplacetw.github.io/tags/IoT/"/>
    
      <category term="raspberry pi" scheme="https://laplacetw.github.io/tags/raspberry-pi/"/>
    
      <category term="adafruit" scheme="https://laplacetw.github.io/tags/adafruit/"/>
    
      <category term="thermal camera" scheme="https://laplacetw.github.io/tags/thermal-camera/"/>
    
  </entry>
  
  <entry>
    <title>Python批次影片轉GIF</title>
    <link href="https://laplacetw.github.io/python-batch-video-to-gif/"/>
    <id>https://laplacetw.github.io/python-batch-video-to-gif/</id>
    <published>2020-04-09T17:30:51.000Z</published>
    <updated>2020-07-06T08:37:51.872Z</updated>
    
    <content type="html"><![CDATA[<p>偶爾會為了DEMO用途，需要將影片轉換為GIF的形式，便於穿插在文章裡頭，但我不想為了這小小的需求安裝什麼軟體。<a id="more"></a>而線上服務就是圖個方便打到很多使用者的痛點，但你必須將圖片上傳，這對某些使用者而言可能有疑慮…雖然我見到的線上轉檔服務使用者都是莫名安心地上傳的(?)</p><p>Python是非常美好的程式語言，自己寫段程式碼來處理就行了😎&nbsp;&nbsp;我們只需要先在電腦安裝<a href="https://ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a>，然後引入<a href="https://pypi.org/project/moviepy/" target="_blank" rel="noopener">moviepy</a>這個套件就行了，作者zulko在他的個人網站有<a href="http://zulko.github.io/blog/2014/01/23/making-animated-gifs-from-video-files-with-python/" target="_blank" rel="noopener">詳細的教學</a>。</p><hr><p>範例程式：</p><p>設置參數可更換影片輸入格式、是否加入浮水印以及生成的GIF和浮水印的縮放倍率。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> moviepy.editor <span class="keyword">as</span> mp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># setting</span></span><br><span class="line">filetype = <span class="string">'.mov'</span></span><br><span class="line">watermark = <span class="string">'./devilcat.png'</span></span><br><span class="line">scale_gif = <span class="number">0.3</span></span><br><span class="line">scale_mark = <span class="number">0.3</span></span><br><span class="line"></span><br><span class="line">videos = glob(<span class="string">'./*'</span> + filetype)</span><br><span class="line">videos.sort()</span><br><span class="line"><span class="keyword">for</span> video <span class="keyword">in</span> videos:</span><br><span class="line">    output = video.replace(filetype, <span class="string">'.gif'</span>)</span><br><span class="line">    <span class="keyword">with</span> mp.VideoFileClip(video).resize(scale_gif) <span class="keyword">as</span> clip:</span><br><span class="line">        <span class="keyword">if</span> watermark == <span class="string">''</span>:  <span class="comment"># no watermark</span></span><br><span class="line">            clip.write_gif(output, fps=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mark_image = (mp.ImageClip(watermark)</span><br><span class="line">            .resize(scale_mark)</span><br><span class="line">            .set_duration(clip.duration)</span><br><span class="line">            .set_pos((<span class="string">"left"</span>, <span class="string">"top"</span>)))</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># add watermark to video</span></span><br><span class="line">            mark_video = mp.CompositeVideoClip([clip, mark_image])</span><br><span class="line">            mark_video.write_gif(output, fps=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><br>＊關於resize的錯誤參考：<a href="https://stackoverflow.com/questions/57696343/moviepy-does-not-recognize-resize-function" target="_blank" rel="noopener">stackoverflow — Moviepy does not recognize resize function</a></p><hr><p>我使用<a href="https://youtu.be/H4Cn4taeuA4" target="_blank" rel="noopener">YT頻道哈哈台訪問浪漫Duke經典片段</a>當範例，實際執行將影片轉換為GIF動圖並加上浮水印。</p><ul><li><p>首先來畫一個浮水印…惡魔貓男！你今晚的惡夢！(激動 ⬇︎<br><img src="https://i.imgur.com/FwCJqVN.png" alt></p></li><li><p>接著準備幾個要轉成GIF的片段，開始轉換⬇︎<br><img src="https://i.imgur.com/6FNRGii.png" alt></p></li><li><p>轉檔結果，可以看到GIF左上角出現剛剛畫的浮水印🤣&nbsp;&nbsp;⬇︎</p></li></ul><table><thead><tr><th style="text-align:center">世界要有愛!</th><th style="text-align:center">雞肉飯❤️</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://i.imgur.com/tLDHNqj.gif" alt></td><td style="text-align:center"><img src="https://i.imgur.com/IaS7v3K.gif" alt></td></tr><tr><td style="text-align:center">好看!</td><td style="text-align:center">浪漫Duke❤️</td></tr><tr><td style="text-align:center"><img src="https://i.imgur.com/XLTZUVm.gif" alt></td><td style="text-align:center"><img src="https://i.imgur.com/aKcPhnH.gif" alt></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶爾會為了DEMO用途，需要將影片轉換為GIF的形式，便於穿插在文章裡頭，但我不想為了這小小的需求安裝什麼軟體。
    
    </summary>
    
    
      <category term="python" scheme="https://laplacetw.github.io/tags/python/"/>
    
      <category term="moviepy" scheme="https://laplacetw.github.io/tags/moviepy/"/>
    
      <category term="mytoolbox" scheme="https://laplacetw.github.io/tags/mytoolbox/"/>
    
  </entry>
  
  <entry>
    <title>eMask口罩預購&amp;取貨</title>
    <link href="https://laplacetw.github.io/taiwan-emask-pre-order/"/>
    <id>https://laplacetw.github.io/taiwan-emask-pre-order/</id>
    <published>2020-03-26T14:40:12.000Z</published>
    <updated>2020-03-29T17:03:12.627Z</updated>
    
    <content type="html"><![CDATA[<p>Taiwan No.1❤️<a id="more"></a></p><h3 id="口罩預購"><a href="#口罩預購" class="headerlink" title="口罩預購"></a>口罩預購</h3><p><br><br><a href="https://emask.taiwan.gov.tw/msk/index.jsp" target="_blank" rel="noopener">eMask口罩預購系統</a>於3/12~3/18開放首波預購，今天終於開始取貨啦！取貨時間為3/26~4/1，若沒有在期限內完成領取就視同放棄唷。(這可不是什麼愚人節梗！</p><p>第二波預購期間為3/25~3/27晚上8點截止，詳情見<a href="https://mrmad.com.tw/emask-taiwan-gov-20-app" target="_blank" rel="noopener">衛福部公告</a>，我個人是使用健保快易通APP來預購的，相關設定可以參考這篇教學：<a href="https://mrmad.com.tw/emask-taiwan-gov-20-app" target="_blank" rel="noopener">點我</a>，無須讀取我們的<del>地表最強</del>健保卡，非常方便。</p><p>預購完成後就等待抽籤，首波預購人數不多，因此有參加預購的人都能買到(儘管有18萬人沒有繳費…)，第二波就未知數了＠＠<br>3/28 更新：因為第二波預購人數依然未超過上限，因此登記預購者都能買到。<br><img src="https://i.imgur.com/vRZqnCX.jpg" alt></p><h3 id="預購繳費"><a href="#預購繳費" class="headerlink" title="預購繳費"></a>預購繳費</h3><p><br><br>第二波預購開放APP也能刷卡繳費囉～話說填寫信用卡資訊的這個「卡片後三碼」反而讓我有點錯愕，就檢核碼呀😅<br><img src="https://i.imgur.com/Hi10jKK.png" alt><br>繳費成功！<br><img src="https://i.imgur.com/t3NxohE.png" alt></p><h3 id="口罩領取"><a href="#口罩領取" class="headerlink" title="口罩領取"></a>口罩領取</h3><p><br><br>統一超商ibon首頁就能看到口罩取貨專區😷<br><img src="https://i.imgur.com/c0mPcLA.jpg" alt></p><p>輸入身分證後4碼以及取貨通知簡訊中的取貨序號<br><img src="https://i.imgur.com/jEZxkSq.jpg" alt></p><p>拿著小白單到超商櫃檯就能領取到珍貴的口罩！<br><img src="https://i.imgur.com/CW90CFq.jpg" alt></p><p>希望這糟糕的一切能盡快結束😬，祝福我們都健健康康💪。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Taiwan No.1❤️
    
    </summary>
    
      <category term="Daily" scheme="https://laplacetw.github.io/categories/Daily/"/>
    
    
      <category term="covid-2019" scheme="https://laplacetw.github.io/tags/covid-2019/"/>
    
  </entry>
  
  <entry>
    <title>Manjaro安裝NVIDIA Driver＆CUDA</title>
    <link href="https://laplacetw.github.io/linux-manjaro-nvidia-driver-and-cuda/"/>
    <id>https://laplacetw.github.io/linux-manjaro-nvidia-driver-and-cuda/</id>
    <published>2020-03-02T17:19:26.000Z</published>
    <updated>2020-03-02T17:20:23.761Z</updated>
    
    <content type="html"><![CDATA[<p>搞定Manjaro的基本環境後，接下來要設定GTX 1660 Super以利後續的運算任務…噢，又折騰了不少時間，得好好紀錄過程與問題才行吶。<a id="more"></a></p><h3 id="Manjaro-freezing-at-boot-screen-after-NVIDIA-driver-installed"><a href="#Manjaro-freezing-at-boot-screen-after-NVIDIA-driver-installed" class="headerlink" title="Manjaro freezing at boot screen after NVIDIA driver installed"></a>Manjaro freezing at boot screen after NVIDIA driver installed</h3><p>透過Manjaro硬體偵測安裝non-free driver：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mhwd -a pci nonfree 0300</span><br></pre></td></tr></table></figure><br><img src="https://i.imgur.com/mfQGFmj.png" alt></p><p>重新開機後，很好，畫面就停在黑螢幕了，進不去登入畫面(傻眼。原來在安裝了NVIDIA驅動後還必須手動修改硬體設定，否則視窗服務的運作會異常，導致系統看起來掛了，所以安裝N卡驅動的正確姿勢應該是要先修改設定文件後再重新啟動。首先，在黑螢幕的畫面按下ctrl + alt + F3來進入Terminal：</p><p>查詢GPU BusID<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lspci | grep -E <span class="string">"VGA|3D"</span></span><br></pre></td></tr></table></figure><br>輸出訊息前三組數字即為BusID(忽略前綴0)，例如「01:00.0」則BusID為「1:0:0」。</p><p>備份設定<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv /etc/X11/xorg.conf.d/90-mhwd.conf /etc/X11/xorg.conf.d/90-mhwd.conf.bak</span><br></pre></td></tr></table></figure></p><p>寫入 /etc/X11/xorg.conf.d/90-mhwd.conf，BusID改為你要設定的GPU，我是設定為內顯的AMD GPU。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Section <span class="string">"Module"</span></span><br><span class="line">    Load <span class="string">"modesetting"</span></span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section <span class="string">"Device"</span></span><br><span class="line">    Identifier <span class="string">"nvidia"</span></span><br><span class="line">    Driver <span class="string">"nvidia"</span></span><br><span class="line">    BusID <span class="string">"PCI:1:0:0"</span></span><br><span class="line">    Option <span class="string">"AllowEmptyInitialConfiguration"</span></span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure></p><p>修改完成後重新啟動即可。</p><p>參考：<a href="https://blog.csdn.net/baidu_33340703/article/details/103977592" target="_blank" rel="noopener">https://blog.csdn.net/baidu_33340703/article/details/103977592</a></p><h3 id="CUDA＆cuDNN"><a href="#CUDA＆cuDNN" class="headerlink" title="CUDA＆cuDNN"></a>CUDA＆cuDNN</h3><p>在安裝CUDA之前，先確認N卡驅動是否正確安裝：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvidia-smi</span><br></pre></td></tr></table></figure><br><img src="https://i.imgur.com/UKIf8U1.png" alt></p><p>安裝CUDA、cuDNN以及後續會用到的Python函式庫：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -Syu tensorflow-cuda cuda cudnn python-pycuda python-tensorflow-cuda python-matplotlib</span><br></pre></td></tr></table></figure><br>＊為避免和pacman軟體庫提供的版本衝突，Arch/Manjaro移除了pip軟體庫中的tensorflow-gpu，以tensorflow-cuda取代之。</p><p>將CUDA安裝目錄中的samples複製到home目錄下，編譯然後測試CUDA是否安裝成功：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cp -r /opt/cuda/samples ~</span><br><span class="line">$ ~/samples</span><br><span class="line">$ sudo make -k</span><br></pre></td></tr></table></figure><br>編譯過程需要點時間，大概30分鐘，編譯完成後執行deviceQuery：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/samples/1_Utilities/deviceQuery</span><br><span class="line">$ ./deviceQuery</span><br><span class="line">./deviceQuery Starting...</span><br><span class="line"></span><br><span class="line">CUDA Device Query (Runtime API) version (CUDART static linking)</span><br><span class="line"></span><br><span class="line">Detected 1 CUDA Capable device(s)</span><br><span class="line"></span><br><span class="line">Device 0: <span class="string">"GeForce GTX 1660 SUPER"</span></span><br><span class="line"> CUDA Driver Version / Runtime Version          10.2 / 10.2</span><br><span class="line"> CUDA Capability Major/Minor version number:    7.5</span><br><span class="line"> Total amount of global memory:                 5945 MBytes (6233391104 bytes)</span><br><span class="line"> (22) Multiprocessors, ( 64) CUDA Cores/MP:     1408 CUDA Cores</span><br><span class="line"> </span><br><span class="line">(略...)</span><br><span class="line"></span><br><span class="line">deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 10.2, CUDA Runtime Version = 10.2, NumDevs = 1</span><br><span class="line">Result = PASS  <span class="comment"># PASS表示CUDA安裝成功</span></span><br></pre></td></tr></table></figure></p><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><p>用<a href="https://laplacetw.github.io/data-sci-ml-hello-world-mnist/">MNIST手寫數字辨識</a>來做測試，每批次都1秒就運算完了，雖然實際應該不到1秒XD</p><h3 id="Keras-could-not-create-cudnn-handle-cudnn-status-alloc-failed"><a href="#Keras-could-not-create-cudnn-handle-cudnn-status-alloc-failed" class="headerlink" title="Keras could not create cudnn handle: cudnn_status_alloc_failed"></a>Keras could not create cudnn handle: cudnn_status_alloc_failed</h3><p>噢，正想說一切都配置好了，趕緊來繼續實驗放置了半個月的cifar-10模型訓練(因為Google CoLab的免費資源太熱門導致經常斷線而白忙，只好自己建置運算環境了😂)，結果出現了一個看起來很厲害的錯誤訊息(傻眼x2。查詢後發現是GPU記憶體配置問題，<a href="https://www.tensorflow.org/guide/gpu#limiting_gpu_memory_growth" target="_blank" rel="noopener">Tensorflow為了避免記憶體碎片化</a>，預設會盡可能把可見的GPU記憶體都映射給當前的進程：</p><blockquote><p>By default, TensorFlow maps nearly all of the GPU memory of all GPUs (subject to CUDA_VISIBLE_DEVICES) visible to the process. This is done to more efficiently use the relatively precious GPU memory resources on the devices by reducing memory fragmentation.</p></blockquote><p>結果就是cifar-10這樣的運算量就導致記憶體不足而拋出錯誤訊息，所以我們必須讓Tensorflow按需求配置GPU記憶體：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config = tf.compat.v1.ConfigProto()  <span class="comment"># tensorflow-gpu 2.1.0</span></span><br><span class="line">config.gpu_options.allow_growth=<span class="keyword">True</span></span><br><span class="line">tf.compat.v1.keras.backend.set_session(tf.compat.v1.Session(config=config))</span><br></pre></td></tr></table></figure></p><p>解決～每批次的運算速度比我在CoLab上面快10秒呢，$$沒有白花了QQ</p><p>參考：</p><ul><li><a href="https://blog.csdn.net/weixin_42769131/article/details/88848478" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42769131/article/details/88848478</a></li><li><a href="https://blog.csdn.net/zuoyouzouzou/article/details/104329286" target="_blank" rel="noopener">https://blog.csdn.net/zuoyouzouzou/article/details/104329286</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搞定Manjaro的基本環境後，接下來要設定GTX 1660 Super以利後續的運算任務…噢，又折騰了不少時間，得好好紀錄過程與問題才行吶。
    
    </summary>
    
      <category term="Linux" scheme="https://laplacetw.github.io/categories/Linux/"/>
    
    
      <category term="keras" scheme="https://laplacetw.github.io/tags/keras/"/>
    
      <category term="linux" scheme="https://laplacetw.github.io/tags/linux/"/>
    
      <category term="manjaro" scheme="https://laplacetw.github.io/tags/manjaro/"/>
    
      <category term="nvidia" scheme="https://laplacetw.github.io/tags/nvidia/"/>
    
  </entry>
  
  <entry>
    <title>Manjaro:You need to load kernel first</title>
    <link href="https://laplacetw.github.io/linux-need-to-load-kernel-first/"/>
    <id>https://laplacetw.github.io/linux-need-to-load-kernel-first/</id>
    <published>2020-02-23T16:58:38.000Z</published>
    <updated>2020-02-23T16:59:41.830Z</updated>
    
    <content type="html"><![CDATA[<p>Manjaro在安裝完成並執行同步軟體庫&amp;更新後，重新開機黑屏顯示「error: file ‘/boot/vmlinuz-4.19-x86_64’ not found」<a id="more"></a>、「error: You need to load kernel first」，這問題在我重新安裝並更新後依然發生了，到Manjaro Forum爬文才得知此問題來自pacman原始碼的變更，若使用低於18.1.5的舊版本ISO檔進行安裝就可能會受到影響，而我是使用18.0.1來安裝的😅</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>使用live USB來開機啟動Manjaro，在terminal執行以下指令 :<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo manjaro-chroot -a</span><br><span class="line">$ pacman -S linux419 linux419-headers</span><br><span class="line">$ mkinitcpio -P</span><br><span class="line">$ update-grub</span><br><span class="line">$ sync</span><br><span class="line">$ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure></p><p>header版本依照錯誤訊息顯示哪個版本not found，重新安裝該版本就行了，指令執行完畢重新開機即可。</p><p>參考 :</p><ul><li><a href="https://forum.manjaro.org/t/howto-rescue-your-system-error-hook-invalid-value-path/123226" target="_blank" rel="noopener">Rescue your system: error: hook … Invalid value Path</a></li><li><a href="https://forum.manjaro.org/t/error-file-boot-vmlinux-4-19-x86-64-not-found/123303" target="_blank" rel="noopener">error: file ‘/boot/vmlinux-4.19-x86_64’ not found</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Manjaro在安裝完成並執行同步軟體庫&amp;amp;更新後，重新開機黑屏顯示「error: file ‘/boot/vmlinuz-4.19-x86_64’ not found」
    
    </summary>
    
      <category term="Linux" scheme="https://laplacetw.github.io/categories/Linux/"/>
    
    
      <category term="error" scheme="https://laplacetw.github.io/tags/error/"/>
    
      <category term="linux" scheme="https://laplacetw.github.io/tags/linux/"/>
    
      <category term="manjaro" scheme="https://laplacetw.github.io/tags/manjaro/"/>
    
  </entry>
  
  <entry>
    <title>Manjaro KDE 安裝＆個人化</title>
    <link href="https://laplacetw.github.io/linux-manjaro-install-and-optimization/"/>
    <id>https://laplacetw.github.io/linux-manjaro-install-and-optimization/</id>
    <published>2020-02-22T11:25:53.000Z</published>
    <updated>2020-06-05T07:04:42.582Z</updated>
    
    <content type="html"><![CDATA[<p>前陣子組了一台新主機，安裝了Manjaro Linux。<br><a id="more"></a><br>其實是為了NVIDIA GPU的運算力，礙於窮學生經費有限僅能擠出20K左右的預算，取捨後實際花費為18K。</p><ul><li>AMD AM4 Ryzen 5 2400G</li><li>ASUS PRIME A320M-K</li><li>Crucial 16GB DDR4-3200 Ballistix SportLT</li><li>WD Blue 250GB(M.2 SATA 3D TLC)</li><li>Power Master N9 RGB/ATX</li><li>Antec NX650</li><li>Zotec GTX1660 SUPER Twin Fan 6G(T16620F-10L)</li></ul><p><img src="https://i.imgur.com/E7LsmEN.jpg" alt><br><img src="https://i.imgur.com/9waIGr8.jpg" alt></p><h3 id="About-Manjaro"><a href="#About-Manjaro" class="headerlink" title="About Manjaro"></a>About Manjaro</h3><p>目前實際接觸過的Linux版本也就Ubuntu跟Raspberry Pi的Raspbian，本來也是預計要裝Ubuntu，但無意間看到Manjaro的相關文章，決定安裝KDE桌面環境版本，內建的下拉式terminal真香😋</p><p>Manjaro是基於Arch的Linux發行版(這意味著許多問題都能在<a href="https://wiki.archlinux.org" target="_blank" rel="noopener">Arch Wiki</a>找到答案)，初始版本發行日期為2011年7月10日，目標為使強大的Arch Linux能被人們更容易地使用，硬體檢測與核心切換是Manjaro相當突出的特色。<a href="https://manjaro.org/download/" target="_blank" rel="noopener">官方</a>支援桌面環境有XFCE、KDE Plasma、GNOME，另外社群也支援了其他桌面環境，例如MATE、LXDE等。Manjaro雖然和Arch同樣採用滾動更新，但<a href="https://manjaro.org/features/fresh-and-stable/" target="_blank" rel="noopener">根據Manjaro官方所述</a>，為避免滾動更新可能引發的相容性問題或錯誤，Manjaro有3個軟體庫:Stable、Testing、Unstable，Arch的滾動更新在經過Manjaro官方測試後才會正式發佈給Manjaro的使用者，所以Manjaro的滾動更新相對於Arch會有一定的延遲。至於安全性相關的更新則採用「快速追蹤」的做法，其有較高的優先測試等級，甚至是略過測試，以便盡快修復安全性問題。(↓官網圖片)<br><img src="https://manjaro.org/img/features/repositories.png" alt></p><p>社群資源 :</p><ul><li><a href="https://forum.manjaro.org" target="_blank" rel="noopener">Manjaro Forum</a></li><li><a href="https://wiki.manjaro.org/" target="_blank" rel="noopener">Manjaro Wiki</a> / <a href="https://wiki.archlinux.org/index.php/Main_page_(正體中文" target="_blank" rel="noopener">Manjaro Wiki(繁中)</a> )</li><li><a href="https://manjaro-zh.blogspot.com/p/blog-page_7.html" target="_blank" rel="noopener">Manjaro＠中文</a></li></ul><p>＊Wiki頁面亦有列出官方推特、臉書與Reddit討論版的連結。另外，官方論壇雖然也有(簡體)中文討論區，但目前活躍程度跟Manjaro＠中文(繁體)討論區差不多…主要還是英文討論區較為活躍。</p><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><p>ISO載點 : <a href="https://manjaro.org/download/" target="_blank" rel="noopener">官網</a>、<a href="https://osdn.net/projects/manjaro/storage/" target="_blank" rel="noopener">OSDN(含社群版本)</a><br>接下來就是找支閒置的4GB+ USB來製作開機隨身碟，燒錄工具推薦<a href="https://www.balena.io/etcher/" target="_blank" rel="noopener">BalenaEtcher</a>。完成後就使用這支隨身碟來開機，Manjaro啟動選項的驅動設定建議選擇non-free，進入桌面環境後啟動安裝程式<del>然後就是下一步下一步下一步</del>。<br><img src="https://i.imgur.com/BdZpaEz.png" alt></p><p>Manjaro的安裝就跟M$的作業系統一樣簡單沒啥好說😁</p><h3 id="Setting"><a href="#Setting" class="headerlink" title="Setting"></a>Setting</h3><p>核心切換<br><img src="https://i.imgur.com/VP0nbJW.png" alt><br>MHWD - Manjaro Hardware Detection<br><img src="https://i.imgur.com/890z6MZ.png" alt></p><h4 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h4><p>↓DSL就是設定一般家用有線網路，例如CHT ADSL。<br><img src="https://i.imgur.com/i3sv4Dh.png" alt></p><h4 id="WiFi"><a href="#WiFi" class="headerlink" title="WiFi"></a>WiFi</h4><p>這部分有點折騰🤪，原本買了某知名A牌廠商的USB網卡，外盒寫了支援WIN、MAC、LINUX，而Manjaro早就內建該網卡的WiFi晶片驅動了…但無論是內建或是AUR下載來的，怎麼搞就是抓不到，我耗了好幾個晚上的時間在爬文跟測試，最後還在Manjaro Forum發問仍是沒有解決，於是我決定棄用(狀態顯示為很混怒)。</p><p>查了一下直接買來TP-Link TL-WN722N，我他X什麼設定都沒搞！什麼驅動都沒裝！一插就爽！！！<br><img src="https://i.imgur.com/hp7z3aA.jpg" alt></p><h4 id="Chinese-IME-Input-Method-Editor"><a href="#Chinese-IME-Input-Method-Editor" class="headerlink" title="Chinese IME(Input Method Editor)"></a>Chinese IME(Input Method Editor)</h4><p>中文輸入法安裝參考 : <a href="https://manjaro-zh.blogspot.com/2015/05/manjaro-linux-gcin.html" target="_blank" rel="noopener">Manjaro@中文</a><br>安裝gcin<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -S gcin</span><br></pre></td></tr></table></figure></p><p>編輯.xprofile<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kate ~/.xprofile</span><br></pre></td></tr></table></figure><br>寫入以下設定 :<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=gcin</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=gcin</span><br><span class="line"><span class="built_in">export</span> LC_CTYPE=zh_TW.UTF-8</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=<span class="string">"@im=gcin"</span></span><br><span class="line">gcin &amp;</span><br></pre></td></tr></table></figure></p><p>打開terminal執行下列指令 :<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gtk-query-immodules-2.0 --update-cache</span><br><span class="line">$ sudo gtk-query-immodules-3.0 --update-cache</span><br></pre></td></tr></table></figure></p><p>然後重新登入即可使用。</p><h4 id="Google-Chrome-Chromium"><a href="#Google-Chrome-Chromium" class="headerlink" title="Google Chrome / Chromium"></a>Google Chrome / Chromium</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -S chromium</span><br><span class="line">$ sudo pacman -S google-chrome</span><br></pre></td></tr></table></figure><h4 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -S code</span><br></pre></td></tr></table></figure><h3 id="MacOS-like-KDE"><a href="#MacOS-like-KDE" class="headerlink" title="MacOS-like KDE"></a>MacOS-like KDE</h3><p>全域主題 : Glassy<br>圖示 : McMojave-circle-dark<br>游標 : McMojave-circle-dark<br>安裝 Latte Dock桌面元件 :<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -S latte-dock</span><br></pre></td></tr></table></figure></p><p>↓看起來跟Mac OS桌面環境有87%像🤣🤣🤣<br><img src="https://i.imgur.com/5xQmNUU.png" alt><br><img src="https://i.imgur.com/8jMN6Zb.png" alt><br><img src="https://i.imgur.com/W5KyxXn.png" alt><br><img src="https://i.imgur.com/EvXxv3m.png" alt></p><p>虛擬桌面切換 :<br><img src="https://i.imgur.com/F2H0OyB.gif" alt></p><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p>查詢Pacman Mirror來源<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman-mirrors -l</span><br></pre></td></tr></table></figure></p><p>變更Mirror來源為Taiwan<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman-mirrors -t 5 -c Taiwan</span><br></pre></td></tr></table></figure></p><p>同步軟體庫＆更新<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -Syyu</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/yHCOIyM.png" alt></p><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><p>原則上會在此條目持續紀錄自己使用Manjaro Linux所遇到的問題，特別是系統更新後Orz<br><br></p><h4 id="Mojibake-Garbled-Text"><a href="#Mojibake-Garbled-Text" class="headerlink" title="Mojibake(Garbled Text)"></a>Mojibake(Garbled Text)</h4><p>系統更新後若發生中文亂碼的情況，則需安裝字體並重新登入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -S noto-fonts-cjk</span><br></pre></td></tr></table></figure></p><p>我所安裝的Noto Fonts為Google的開源字型，<a href="https://tinyurl.com/uhwvs4w" target="_blank" rel="noopener">Arch Wiki</a>亦有其他推薦的中文字體可選擇。</p><h4 id="Dolphin-Launch-Error"><a href="#Dolphin-Launch-Error" class="headerlink" title="Dolphin Launch Error"></a>Dolphin Launch Error</h4><p>系統更新後於啟動Dolphin時無法正常顯示檔案，並顯示錯誤訊息：<br>Unable to create io-slave. klauncher said: Error loading ‘/usr/lib/qt/plugins/kf5/kio/file.so’</p><p>在<a href="https://forum.manjaro.org/t/unable-to-create-io-slave-klauncher-said-error-loading-usr-lib-qt-plugins-kf5-kio-file-so/25866" target="_blank" rel="noopener">Manjaro Forum</a>找到問題的發生原因是Qt版本衝突導致的，因為系統當下仍載入舊版本Qt，然後我們執行了系統更新。</p><p>將電腦重新啟動，或在terminal執行以下命令重新啟動Dolphin即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dbus-launch dolphin</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前陣子組了一台新主機，安裝了Manjaro Linux。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://laplacetw.github.io/categories/Linux/"/>
    
    
      <category term="linux" scheme="https://laplacetw.github.io/tags/linux/"/>
    
      <category term="manjaro" scheme="https://laplacetw.github.io/tags/manjaro/"/>
    
      <category term="kde" scheme="https://laplacetw.github.io/tags/kde/"/>
    
  </entry>
  
  <entry>
    <title>Python批次加密PDF文件</title>
    <link href="https://laplacetw.github.io/python-pdf-batch-encrypt/"/>
    <id>https://laplacetw.github.io/python-pdf-batch-encrypt/</id>
    <published>2020-02-17T14:30:28.000Z</published>
    <updated>2020-07-06T02:57:07.205Z</updated>
    
    <content type="html"><![CDATA[<p>又好一段時間沒更新了(忙，然後就2020年了…紀錄一下前陣子寫了段程式碼幫人處理批次加密PDF。<br><a id="more"></a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>事實上這需求與薪資系統有關，我只知道那系統似乎很瞎，但人工處理這種大量重複性的問題更瞎🙄<br>於是我們會有無數個PDF文件和一個txt文件，PDF內容是個人機密😎，而txt裡頭則是對照表，當程式讀進路徑下所有PDF文件後，會依照PDF檔名去對照每個人的ID Number，以作為PDF文件加密的密碼，然後使用PyPDF2這個模組來進行加密。需注意讀取跟寫入的檔名不能相同，因為加密完會遇到檔案已存在而無法回寫的情況，只好在讀檔之前一律先把檔名改為”tmp.pdf”，讀進來加密完再另存回原檔名，然後刪除”tmp.pdf”，如此完成一個PDF文件的加密。</p><p>＊PDF檔名即為code，而txt檔裡頭的對照表有兩個欄位：code | id_number</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># *** coding:utf-8 ***</span></span><br><span class="line"><span class="keyword">import</span> os, glob</span><br><span class="line"><span class="keyword">from</span> PyPDF2 <span class="keyword">import</span> PdfFileReader <span class="keyword">as</span> pdfReader</span><br><span class="line"><span class="keyword">from</span> PyPDF2 <span class="keyword">import</span> PdfFileWriter <span class="keyword">as</span> pdfWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_id_by_code</span><span class="params">(code, table)</span>:</span></span><br><span class="line">    pswd = <span class="string">"123456"</span>  <span class="comment"># default password</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        <span class="keyword">if</span> code <span class="keyword">in</span> i:</span><br><span class="line">            pswd = str(i).split()[<span class="number">1</span>]</span><br><span class="line">            print(code, <span class="string">"--&gt;"</span>, pswd)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> pswd</span><br><span class="line"></span><br><span class="line">id = open(<span class="string">"ID.txt"</span>)</span><br><span class="line">ID_table = list(id)</span><br><span class="line">id.close()</span><br><span class="line"></span><br><span class="line">pdf_files = glob.glob(<span class="string">r"*.pdf"</span>)</span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> pdf_files:</span><br><span class="line">    code = path.replace(<span class="string">".pdf"</span>, <span class="string">""</span>)</span><br><span class="line">    os.rename(path, <span class="string">"tmp.pdf"</span>)</span><br><span class="line">    in_file = open(<span class="string">"tmp.pdf"</span>, <span class="string">"r+b"</span>)</span><br><span class="line">    in_pdf = pdfReader(in_file)</span><br><span class="line"></span><br><span class="line">    out_pdf = pdfWriter()</span><br><span class="line">    out_pdf.appendPagesFromReader(in_pdf)</span><br><span class="line">    pswd = find_id_by_code(code, ID_table)</span><br><span class="line">    out_pdf.encrypt(pswd)</span><br><span class="line"></span><br><span class="line">    out_file = open(path, <span class="string">"wb"</span>)</span><br><span class="line">    out_pdf.write(out_file)</span><br><span class="line"></span><br><span class="line">    in_file.close()</span><br><span class="line">    out_file.close()</span><br><span class="line">    os.remove(<span class="string">"tmp.pdf"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> in_pdf, out_pdf</span><br><span class="line">input(<span class="string">"Encrypt Complete! Now you can close the window."</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又好一段時間沒更新了(忙，然後就2020年了…紀錄一下前陣子寫了段程式碼幫人處理批次加密PDF。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https://laplacetw.github.io/categories/Python/"/>
    
    
      <category term="python" scheme="https://laplacetw.github.io/tags/python/"/>
    
      <category term="mytoolbox" scheme="https://laplacetw.github.io/tags/mytoolbox/"/>
    
      <category term="pdf" scheme="https://laplacetw.github.io/tags/pdf/"/>
    
  </entry>
  
  <entry>
    <title>大眾運輸x穿戴裝置x感應進站</title>
    <link href="https://laplacetw.github.io/apple-watch-with-ipass/"/>
    <id>https://laplacetw.github.io/apple-watch-with-ipass/</id>
    <published>2019-09-13T12:51:42.000Z</published>
    <updated>2019-11-04T07:42:11.110Z</updated>
    
    <content type="html"><![CDATA[<p>自從改用icash 2.0搭台鐵以來，在感應進站的時候，明顯感覺icash 2.0需要大約2秒的感應時間😒 於是我想到並馬上設定了line pay一卡通，但想要做到「感應進站」這件事，似乎沒有這麼順利…<a id="more"></a>當我仔細研究了line pay的「<a href="https://www.i-pass.com.tw/IPS/Event/LINEPay-iPASS/an006.html" target="_blank" rel="noopener">乘車碼</a>」功能，才知道目前僅有高雄捷運、高雄客運橘12以及東南客運橘20能用啊😬 另外，高雄捷運已經和Mastercard合作啦，所以是可以搭配Apple Pay或其他電子支付來感應進站的。</p><p>花了點時間做資訊收集，總之，要用我手上的iPhone逼～進台鐵或搭公車目前還是做不到的(台鐵目前只允許台鐵E訂通產生的對號座QR碼讀取進站)。看來，只能透過「物理」的方式來達成我的需求了，目標是讓隨身物品附加上電子票證的功能，例如手錶。</p><p>立馬找了網拍賣家，買來一卡通貼片，將錶帶用酒精清潔乾淨後，仔細地貼上。</p><p><img src="https://i.imgur.com/ZyhdWvs.png" alt><br><img src="https://i.imgur.com/A2ujMAY.png" alt><br><img src="https://i.imgur.com/jtjIOaj.png" alt></p><p>之所以會選擇一卡通，是打算綁定到line pay一卡通帳戶上來使用其自動加值的功能。首先，到手機上的line pay頁面，點選設定–&gt;連結一卡通–&gt;輸入卡號，設定完成後，因為一卡通尚未完成記名設定，因此line pay會提示使用者要到全家FamiPort完成卡片更新。</p><p><img src="https://i.imgur.com/GoVhvle.png" alt><br><img src="https://i.imgur.com/joqo0wD.png" alt><br><img src="https://i.imgur.com/OytTTZS.png" alt></p><p>不過…<a href="https://www.i-pass.com.tw/IPS/Event/LINEPay-iPASS/an009.html" target="_blank" rel="noopener">自動加值</a>只適用於一卡通的特約商店，不包含7-ELEVEN、台鐵、高鐵、公車、捷運等🙄 算了，反正我還是帶著Apple Watch到超商完成加值並開始使用了。</p><hr><p>使用電子票證貼片來搭乘台鐵約一週後，我認為它是仍有改善空間的解決方案 :</p><ul><li>貼片的邊緣部分會沾黏灰塵而逐漸減弱黏性，黏貼的方式或許比較適合封閉的環境，例如前陣子爆紅的寶貝球悠遊卡或其他吊飾的內部</li><li>台鐵自動驗票閘門的感應區域在右側，但手錶配戴之慣用手則是因人而異，以我配戴於左手為例，感應進站需要稍微蹲低並轉動手腕才能順利感應…</li></ul><p>因為受不了貼片黏膠，就把貼片給撕下來了，錶帶整個黏呼呼的，還得用橡皮擦把殘膠嚕個乾淨。有了貼片的使用經驗，目前順利使用中的是網路賣家客製的電子票證手機貼片，但我可沒想再黏貼於任何地方了，就讓它在手機和保護殼之間的夾縫中生存吧，這樣一來無論是換手機還是換保護殼都很方便，搭乘台鐵就直接拿出手機來感應吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自從改用icash 2.0搭台鐵以來，在感應進站的時候，明顯感覺icash 2.0需要大約2秒的感應時間😒 於是我想到並馬上設定了line pay一卡通，但想要做到「感應進站」這件事，似乎沒有這麼順利…
    
    </summary>
    
      <category term="Daily" scheme="https://laplacetw.github.io/categories/Daily/"/>
    
    
      <category term="apple watch" scheme="https://laplacetw.github.io/tags/apple-watch/"/>
    
      <category term="ipass" scheme="https://laplacetw.github.io/tags/ipass/"/>
    
      <category term="e-payment" scheme="https://laplacetw.github.io/tags/e-payment/"/>
    
  </entry>
  
  <entry>
    <title>動手更換老舊的電源插座</title>
    <link href="https://laplacetw.github.io/replace-electrical-socket/"/>
    <id>https://laplacetw.github.io/replace-electrical-socket/</id>
    <published>2019-09-06T08:12:17.000Z</published>
    <updated>2019-09-06T09:36:12.928Z</updated>
    
    <content type="html"><![CDATA[<p>突然想起很久、很久以前，似乎在五金賣場買了兩個插座要來更換，但買回來後就一直擱著…然後就忘了這件事😅<a id="more"></a>雖然插座不知道為什麼某天就突然插不緊了，我一開始還以為是裡頭的簧片變形之類的，不過就一直忘了換，儘管插頭插上去不是很穩固，但也還算得上堪用。</p><p>＊<span style="color:red;">安全至上，插座是有電的，更換前務必切掉總開關。</span></p><p>但我終於想起來啦，趕緊把兩個放到長灰塵的新插座挖出來，開始拆掉舊的插座，卸下蓋板、轉開兩顆固定螺絲…草泥馬呀！😱我想說怎麼看起來怪怪的，原來是插座本體的塑膠外殼竟然劣化斷掉了，所以才會直接看到裡頭的簧片…我以為只是簧片變形 ＝＝<br><img src="https://i.imgur.com/VVpK0Au.png" alt></p><p>接著用一字起子往電線旁紅圈處的卡榫插進去，就可以把電線給卸除了，不過我手邊沒有一字起子，所以用之前魚缸用的不鏽鋼長夾代替XD 如果怕忘了怎麼裝(或原本裝設的人裝反了)，卸除電線之前可以先拍照紀錄，通常紅色的為火線(有電)、白色的為水線(無電)，如果是三孔插座的話還會有綠色的接地線。</p><p>話說這插座還真是裂得誇張…<br><img src="https://i.imgur.com/wID59J9.png" alt></p><p>電線都卸除後就可以安裝新的插座啦，電線安裝的孔位旁邊會有圖示，較短的橫槓表示為火線安裝處，較長的橫槓則為水線，或有標示一個大寫英文字母W的字樣，中間則是接地線，務必確認電線有插到底不會鬆脫。而我當初買的是兩孔插座並沒有接地的設計，所以兩條接地線稍微整個線收好，就可以把插座面板鎖回去啦。<br><img src="https://i.imgur.com/hqiXjor.png" alt></p><p>打開電源總開關測試一下插座是否安裝正確，裝上插座蓋板，完成～😎<br><img src="https://i.imgur.com/uLTa5wO.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然想起很久、很久以前，似乎在五金賣場買了兩個插座要來更換，但買回來後就一直擱著…然後就忘了這件事😅
    
    </summary>
    
      <category term="Daily" scheme="https://laplacetw.github.io/categories/Daily/"/>
    
    
      <category term="DIY" scheme="https://laplacetw.github.io/tags/DIY/"/>
    
      <category term="plug socket" scheme="https://laplacetw.github.io/tags/plug-socket/"/>
    
  </entry>
  
  <entry>
    <title>南科自造基地研習Part 2</title>
    <link href="https://laplacetw.github.io/maker-space-workshop-part-2/"/>
    <id>https://laplacetw.github.io/maker-space-workshop-part-2/</id>
    <published>2019-08-26T16:44:42.000Z</published>
    <updated>2019-09-01T14:03:53.452Z</updated>
    
    <content type="html"><![CDATA[<p>人工智慧―自然語言處理與聊天機器人開發。<br><a id="more"></a><br>Part 2於8/26 ~ 8/27在成大系統系館進行，講師為A.P. Wen-Hsiang Lu。</p><h3 id="研習內容大綱"><a href="#研習內容大綱" class="headerlink" title="研習內容大綱"></a>研習內容大綱</h3><p><br></p><ul><li>自然語言處理(NLP)技術和應用簡介</li><li>自然語言處理工具練習</li><li>命名實體識別(NER)語意分析練習</li><li>聊天機器人(ChatBot)實作練習</li></ul><hr><h3 id="筆記"><a href="#筆記" class="headerlink" title="筆記"></a>筆記</h3><p><br></p><ul><li>NLP的最終目標—自動化的語言理解/處理/分析/推理</li><li>NLP的重要性—使人機互動能做到真正的「溝通」</li><li>語言句法結構<ul><li>例1：日文為SOV結構(動詞在句尾)</li><li>例2：原民語為VSO結構(動詞在句首)</li></ul></li><li>語言學相關知識類型<ul><li>聲學知識(音譯)</li><li>詞彙學知識(字根)</li><li>詞性知識</li><li>文法知識</li><li>語意學知識</li><li>實用知識：情境如何影響句子的解釋</li><li>世界知識：我的理解是common sense，例如「I read an article about ＯＯＯ in the paper.」，我們會「直覺」地認為句子中的paper指的是「論文」。</li></ul></li><li>NLP相關技術<ul><li>概率與資訊理論</li><li>語言學知識</li><li>字彙/詞庫/語料庫/片語/詞義辨識</li><li>Ｎ-gram語言建模／隱性馬可夫模型</li><li>詞性標記</li><li>文法解析</li><li>深度學習</li><li>計算語言學<ul><li>語言描述：普遍性與跨語言研究</li><li>計算模型的實現<ul><li>演算法與資料結構</li><li>知識表徵模型</li><li>推理過程模型</li></ul></li></ul></li><li>心理語言學<ul><li>人類為語言理解可計算性的存在證明</li><li>心理學研究可以被用來解釋計算模型</li></ul></li></ul></li><li>NLP技術問題<ul><li>龐大的字彙量/無數的現象與規則</li><li>不規則變化(例外、例外中的例外…)</li><li>字彙/情境/文法中的歧義</li><li>網路時代的多語言問題<ul><li>語言障礙(人類語言據估算約有5000到7000種)</li><li>資訊過載</li></ul></li></ul></li><li>NLP相關應用<ul><li>機器翻譯</li><li>自動語音識別</li><li>(跨語言)資訊檢索</li><li>(跨語言)問題回答</li><li>文本摘要</li><li>資訊抽取</li><li>對話系統/聊天機器人</li></ul></li><li>NLP基本機率模型<ul><li>N-gram Language Model</li><li>Hidden Markov Model(HMM)</li></ul></li><li>NLP深度學習模型<ul><li>模型發展：訓練結果的詞向量由非上下文相關 –&gt; 上下文相關(詞彙於不同句子中有各自的向量表示)</li><li>Word2Vec<ul><li>CBOW(Continuous Bag of Words)：利用周圍的詞預測中心的詞</li><li>Skip-gram：利用中心的詞預測周圍的詞，訓練時間久、結果較CBOW準確</li></ul></li><li>RNN(Recurrent Neural Network)</li><li>LSTM(Long Short-Term Memory)</li><li>Seq2Seq(Sequence to Seqence)</li><li>Seq2Seq with Attention</li></ul></li><li>命名實體識別(NER)<ul><li>擷取文字資料中的人名、地名、組織名等目標實體進行分析、標記</li><li>模型構建<ul><li>Rule-based:<ul><li>Pos Tagging Pattern + statistic</li><li>Dictionary-based</li></ul></li><li>Traditional ML-based:<ul><li>Hidden Markov Model(HMM)</li><li>CRF(Conditional Random Field) + template</li></ul></li><li>DL-based:<ul><li>LSTM(Long Short-Term Memory)</li><li>LSTM with Attention</li></ul></li></ul></li><li>Viterbi Algorithm(維特比演算法)<ul><li>動態規劃演算法</li><li>在語音辨識中，聲音訊號做為觀察到的事件序列，而文字字串被視為隱含產生聲音訊號的原因，因此可對聲音訊號應用維特比演算法尋找出最有可能的文字字串。</li></ul></li><li>CRF++：條件隨機域詞性標記工具</li></ul></li><li>線上工具<ul><li><a href="http://ehownet.iis.sinica.edu.tw/index.php" target="_blank" rel="noopener">中研院E-HowNet繁體知網系統</a></li><li><a href="http://ckipsvr.iis.sinica.edu.tw" target="_blank" rel="noopener">中研院CKIP中文斷詞系統</a></li><li><a href="http://parser.iis.sinica.edu.tw" target="_blank" rel="noopener">中研院CKIP中文剖析器線上測試版</a></li><li><a href="http://nlp.stanford.edu:8080/parser/" target="_blank" rel="noopener">Stanford Parser</a></li></ul></li></ul><h3 id="實作練習"><a href="#實作練習" class="headerlink" title="實作練習"></a>實作練習</h3><p></p><h4 id="中文斷詞工具"><a href="#中文斷詞工具" class="headerlink" title="中文斷詞工具"></a>中文斷詞工具</h4><p>此工具使用了教育部國語辭典(16萬詞)來協助斷詞比對，練習用Python實作一個中文斷詞工具，大致上的概念為「先斷句，再斷詞」。</p><p>程式範例：先用正則式比對各種標點符號進行斷句後，再逐句來處理斷詞。斷詞的部分，則是由左至右循序比對、抽取出句子中最長的詞，然後再比對剩下的句子…透過重複前述步驟來拆解句子。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">book = &#123;&#125;</span><br><span class="line">result = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">segment</span><span class="params">(sentences)</span>:</span></span><br><span class="line">    lines = re.split(<span class="string">r'[，。；：！？／（）「」『』【】]'</span>, sentences)</span><br><span class="line">    end = len(lines) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> lines[end] == <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">del</span> lines[end]</span><br><span class="line">    <span class="keyword">return</span> lines</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare</span><span class="params">(txt)</span>:</span></span><br><span class="line">    end = len(txt)</span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> end != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> txt[<span class="number">0</span>:end] <span class="keyword">in</span> book:</span><br><span class="line">            res = txt[<span class="number">0</span>:end]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        end -= <span class="number">1</span></span><br><span class="line">    res = res <span class="keyword">if</span> res != <span class="string">""</span> <span class="keyword">else</span> txt</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">breakSen</span><span class="params">(txt)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> result</span><br><span class="line">    str_len = len(txt)</span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    end = str_len + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; str_len:</span><br><span class="line">        _slice = txt[start:end]</span><br><span class="line">        word = compare(_slice)</span><br><span class="line">        result += word</span><br><span class="line">        start += len(word)</span><br><span class="line">        <span class="keyword">if</span> start != str_len:</span><br><span class="line">            result += <span class="string">"/"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'words.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    lines = file.read().splitlines()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        book[line] = line</span><br><span class="line">txt = <span class="string">"長頸鹿屬是一屬生長在非洲的反芻偶蹄動物，共有四個物種，是現存世界上最高的陸生動物。一般雄性個體高達4.8到5.5公尺高，重達900公斤。雌性個體一般要小一些。"</span></span><br><span class="line">print(<span class="string">"\ntxt : \n\n"</span>, txt, <span class="string">"\n"</span>)</span><br><span class="line">sentences = segment(txt)</span><br><span class="line">print(<span class="string">"segment : \n\n"</span>, sentences, <span class="string">"\n"</span>)</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> sentences:</span><br><span class="line">    breakSen(s)</span><br><span class="line">    <span class="keyword">if</span> s != sentences[len(sentences) - <span class="number">1</span>]:</span><br><span class="line">        result += <span class="string">"/"</span></span><br><span class="line">print(<span class="string">"result : \n\n"</span> + result, <span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/1DFMiqJ.png" alt></p><h4 id="聊天機器人"><a href="#聊天機器人" class="headerlink" title="聊天機器人"></a>聊天機器人</h4><p>使用Google Dialogflow負責NLP，並與Line Channel串接為可自動回應的Chatbot。網路上<a href="https://www.appcoda.com.tw/chatbot-dialogflow-ios/" target="_blank" rel="noopener">基礎教學</a>很多，因此設定過程省略，基本上就是建立一個Agent來負責處理回應的接收和傳送，在Agent底下可以建立Intents以及Entities來設定對話流程、關鍵字。</p><p><img src="https://i.imgur.com/NNhEuJO.png" alt><br><img src="https://i.imgur.com/WWiDs8E.png" alt><br><img src="https://i.imgur.com/Aqqcwxy.png" alt></p><hr><h3 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h3><p><br><br>透過盧老師的詳細講解，讓大家了解到自然語言處理(NLP)所涉及包含社會科學等各方面的技術知識，以及在NLP領域還有許多難題尚待解決，如果少了NLP相關技術的話，未來的人機互動將會缺少相當重要的一塊，而人類的語言是如此多元、複雜，絕非單純把數據無腦地丟進深度學習模型就能解決(自從Google DeepMind讓阿發狗秀了一波騷操作後，人們聽到AI深度學習什麼的就像聽到傳說中的<del>EX咖哩棒</del>Excalibur呀😂)。</p><p>經過Part 2的研習，對於NLP中所謂的「斷詞」總算是有較完整的概念了，雖然自己在工作上有寫過Line與Web聊天機器人，但我自己明白那有多粗糙，就只是抓取關鍵字做出相對的回應罷了，一點兒都不智慧😕雖然使用者還是會很認真和機器人對話，但看在龜毛的人眼裡是很介意的<del>，我絕對不會承認我很介意</del>。我想我接下來可以嘗試使用NLP來做點什麼，並從經驗中更進一步理解關於NLP的知識。</p><p>感謝A.P. Wen-Hsiang Lu與助教們的用心講解，受益良多。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人工智慧―自然語言處理與聊天機器人開發。&lt;br&gt;
    
    </summary>
    
      <category term="Workshop" scheme="https://laplacetw.github.io/categories/Workshop/"/>
    
    
      <category term="NLP" scheme="https://laplacetw.github.io/tags/NLP/"/>
    
      <category term="semantic analysis" scheme="https://laplacetw.github.io/tags/semantic-analysis/"/>
    
      <category term="chatbot" scheme="https://laplacetw.github.io/tags/chatbot/"/>
    
  </entry>
  
  <entry>
    <title>什麼是兒童急性壞死性腦病(ANEC)？</title>
    <link href="https://laplacetw.github.io/study-acute-necrotizing-encephalopathy-of-childhood/"/>
    <id>https://laplacetw.github.io/study-acute-necrotizing-encephalopathy-of-childhood/</id>
    <published>2019-08-23T17:05:33.000Z</published>
    <updated>2020-06-12T17:20:47.914Z</updated>
    
    <content type="html"><![CDATA[<p>前幾天於PTT看到某篇<a href="https://www.ptt.cc/bbs/BabyMother/M.1566400996.A.FC7.html" target="_blank" rel="noopener">媽寶版的文章</a>，才知道如此令人心碎的疾病。<a id="more"></a>作者的孩子(1Y10M)其病況始於突然反覆發燒，於短短幾天內病情便急轉直下、陷入昏迷，神經科醫師診斷可能有腦部損傷，疑似兒童急性壞死性腦病(ANEC)，經緊急安排腦部核磁共振檢查，結果發現視丘及腦幹受損相當嚴重！去年遇到相同狀況的<a href="https://www.parenting.com.tw/article/5079996" target="_blank" rel="noopener">賴教授與其夫人</a>得知此事，便和作者聯繫並給予鼓勵，我也和大家留言鼓勵作者，無論如何都希望奇蹟能出現。</p><p>這樣的事令我感到相當震驚與難過，無知的我以為都2019年了，除了那些罕見遺傳性疾病，我們對於大多數的已知疾病應該都有所掌握才對…我這想法真可笑。出於好奇，我在網路上搜尋了關於ANEC的資訊，想知道關於其預防及治療的進展。</p><hr><h3 id="什麼是兒童急性壞死性腦病-ANEC-？"><a href="#什麼是兒童急性壞死性腦病-ANEC-？" class="headerlink" title="什麼是兒童急性壞死性腦病(ANEC)？"></a>什麼是兒童急性壞死性腦病(ANEC)？</h3><p>吳昌騰醫師今年1月曾於其<a href="https://zh-tw.facebook.com/TaiwanPerDoctor/posts/268050263890017" target="_blank" rel="noopener">臉書貼文</a>說到：<br><blockquote><p>兒童急性壞死性腦病(acute necrotizing encephalopathy of children，ANEC)絕對是令兒科急診醫師人人驚心動魄的疾病。ANEC是一種高死亡率的腦病變，主要好發於日本、台灣和韓國。目前為止全世界已經有許多的病例報告。雖然致病機轉尚未完全明瞭，不過目前認為此病與人體的免疫系統和代謝有關。不同病毒皆能引發ANEC，包括A型及B型流感、副流感、帶狀泡疹病毒(水痘)、德國痲疹、HHV-6 及 HHV-8、腸道病毒及柯薩奇病毒 A9；ANEC亦分偶發性或遺傳性，死亡率達70%。ANEC具有病情急、進展快、死亡率高等特點，兒童患者常伴隨嘔吐、快速的意識喪失、不同程度肝功能障礙，預後差，存活者常伴有嚴重的神經系統後遺症。目前ANEC尚缺乏有效的治療方法，治療方法通常為支持療法，如抗生素、抗病毒藥物、IVIG等等治療。</p></blockquote></p><p>＊「預後」: 疾病發生後，對疾病未來發展的病程和結果(痊愈、複發、惡化、致殘、 併發症及死亡等)的預測。</p><h3 id="疾病管制署致醫界通函第369號"><a href="#疾病管制署致醫界通函第369號" class="headerlink" title="疾病管制署致醫界通函第369號"></a>疾病管制署致醫界通函第369號</h3><p>衛福部疾管署曾於今年2/26發佈<a href="https://www.cdc.gov.tw/Bulletin/Detail/RZNFvB_786v_kT6tQ2HTBQ?typeid=48" target="_blank" rel="noopener">醫界通函</a>，呼籲臨床醫師針對流感併發腦炎之病例提高警覺：<br><blockquote><p>全國醫界朋友，您好：</p><p>國內自2018年10月1日起累計406例流感併發重症病例(以217例感染H1N1、166例感染H3N2為多)，34例死亡(21例H1N1、13例H3N2)，包含4名孩童死亡病例，其中3名孩童未接種本季流感疫苗。此4名死亡孩童皆併發腦炎，其病毒學檢驗結果皆為H1N1，又其發病至出現神經學症狀中位數為1天(範圍0–4天)，且病程快速惡化，雖均使用流感抗病毒藥物治療，仍於發病後2至5天內死亡。</p><p>根據國內研究，兒童感染流感後約有1–2%出現腦炎症狀，然而其最嚴重的表現為急性壞死性腦病變(acute necrotizing encephalopathy)，死亡率可高達30-40%。<span style="color:red;">疾管署籲請醫師提高警覺，於流感流行季，對於出現疑似腦炎的神經學症狀，如意識改變、抽搐、局部神經學症狀等個案，應儘速進行流感相關檢驗並使用流感抗病毒藥物</span>；另根據日本少數病例治療經驗，針對未侵犯腦幹之急性壞死性腦病變部分個案，早期使用類固醇可能對個案預後有幫忙，請臨床醫師評估個案狀況審慎使用。</p><p>感謝您與我們共同維護全民的健康安全。</p></blockquote></p><p>因為發現疾管署曾發佈此醫界通函，便找了找相關的新聞報導，但我對於ANEC的新聞搜尋結果感到疑惑，只找到幾則於今年2月所發佈關於流感併發腦炎的報導，這才提到兒童急性壞死性腦病這個詞…呵呵。</p><h3 id="相關文獻"><a href="#相關文獻" class="headerlink" title="相關文獻"></a>相關文獻</h3><h4 id="Acute-necrotising-encephalopathy-of-childhood-a-new-syndrome-presenting-with-multifocal-symmetric-brain-lesions"><a href="#Acute-necrotising-encephalopathy-of-childhood-a-new-syndrome-presenting-with-multifocal-symmetric-brain-lesions" class="headerlink" title="Acute necrotising encephalopathy of childhood: a new syndrome presenting with multifocal, symmetric brain lesions"></a>Acute necrotising encephalopathy of childhood: a new syndrome presenting with multifocal, symmetric brain lesions</h4><p>ANEC係由<a href="https://www.ncnp.go.jp/nin/english/department.html" target="_blank" rel="noopener">日本國立神經科學研究中心</a>的Mizuguchi等人於1995年發表的<a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1073485/" target="_blank" rel="noopener">論文</a>所提出，文件中回顧了13位接受治療的連續患者與28份報告的病例記錄，描述日本兒童中普遍存在著一種未被識別的急性腦病類型之臨床病理學特徵，於呼吸道感染後，原本健康的兒童開始出現<span style="color:red;">昏迷，抽搐，嘔吐，高燒以及肝腫大等症狀</span>。此急性腦病被認為是多發性兒童急性壞死性腦病的新型實體，<span style="color:red;">電腦斷層掃描與核磁共振結果顯示，ANEC於視丘、白質、腦幹及小腦造成之腦損傷呈現對稱分佈</span>。</p><h4 id="Neuropsychological-outcomes-of-childhood-acute-necrotizing-encephalopathy"><a href="#Neuropsychological-outcomes-of-childhood-acute-necrotizing-encephalopathy" class="headerlink" title="Neuropsychological outcomes of childhood acute necrotizing encephalopathy"></a>Neuropsychological outcomes of childhood acute necrotizing encephalopathy</h4><p>此<a href="https://www.sciencedirect.com/science/article/abs/pii/S0387760419301627" target="_blank" rel="noopener">論文</a>描述了3位ANEC患者的神經心理學結果，研究於經歷ANEC後的18個月至10年之間，對患者長期認知與心理的影響。3個病例均表現出<span style="color:red;">注意力不集中、精細動作困難(例如:書寫、下棋)、焦慮，甚至社交障礙</span>。長期損害的嚴重程度與急性症狀表現及恢復期的神經成像有關，這些研究結果強調了詳細的神經心理學評估和長期恢復之必要性。</p><h4 id="Acute-Necrotizing-Encephalopathy-of-Childhood-with-Novel-Influenza-A-swH1-Infection-A-Case-Report"><a href="#Acute-Necrotizing-Encephalopathy-of-Childhood-with-Novel-Influenza-A-swH1-Infection-A-Case-Report" class="headerlink" title="Acute Necrotizing Encephalopathy of Childhood with Novel Influenza A (swH1) Infection : A Case Report"></a>Acute Necrotizing Encephalopathy of Childhood with Novel Influenza A (swH1) Infection : A Case Report</h4><p>此病例報告為發表於童綜合醫學雜誌(2018，P.123-P.128)上的<a href="http://zh-tw.sltung.com.tw/uploadfiles/files/20190510_092057_4490.pdf" target="_blank" rel="noopener">論文</a>，病患為4歲8個月的女童，發病前相當健康。其初始症狀為間歇性發燒與嘔吐表現，隨著發生<span style="color:red;">抽搐與快速的意識喪失</span>，以及鼻腔檢體分離出豬流感病毒，腦部神經成像出現典型的兒童急性壞死性腦病特徵。此女童於醫療團隊積極使用Oseltamivir(克流感)，搭配immunoglobulin(免疫球蛋白)和methylprednisolone(類固醇)治療後存活下來。</p><hr><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>這幾天看了些相關資訊與近一年內的文獻，除上述所提到的，還有<a href="https://jcpsp.pk/archive/2019/Jul2019/13.pdf" target="_blank" rel="noopener">ANEC患者之臨床特徵</a>、<a href="https://journals.sagepub.com/doi/abs/10.1177/1535370219846497" target="_blank" rel="noopener">發展小鼠急性腦病模型以釐清致病機制</a>以及針對成人ANE患者的相關研究，於前述臨床特徵的研究中甚至發現，抗病毒藥物搭配免疫調節治療並未改變疾病進程。看來，ANEC至今仍是缺乏有效的治療方法，但我相信醫學研究很快就會找到答案的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前幾天於PTT看到某篇&lt;a href=&quot;https://www.ptt.cc/bbs/BabyMother/M.1566400996.A.FC7.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;媽寶版的文章&lt;/a&gt;，才知道如此令人心碎的疾病。
    
    </summary>
    
      <category term="Study" scheme="https://laplacetw.github.io/categories/Study/"/>
    
    
      <category term="ANEC" scheme="https://laplacetw.github.io/tags/ANEC/"/>
    
      <category term="influenza" scheme="https://laplacetw.github.io/tags/influenza/"/>
    
  </entry>
  
  <entry>
    <title>南科自造基地研習Part 1</title>
    <link href="https://laplacetw.github.io/maker-space-workshop-part-1/"/>
    <id>https://laplacetw.github.io/maker-space-workshop-part-1/</id>
    <published>2019-08-18T15:46:01.000Z</published>
    <updated>2019-09-01T10:55:57.132Z</updated>
    
    <content type="html"><![CDATA[<p>系統晶片應用―以無線心律檢測為例。<br><a id="more"></a><br>Part 1於8/14 ~ 8/16在成大系統系館進行，講師為Prof. Shuenn-Yuh Lee。</p><h3 id="研習內容大綱"><a href="#研習內容大綱" class="headerlink" title="研習內容大綱"></a>研習內容大綱</h3><p><br></p><ul><li>應用於智慧互動照護與監控系統之體外感測網路簡介</li><li>應用於身體感測網路之低功率無線心電訊號擷取電路與系統<ul><li>ZigBee無線心電訊號擷取系統晶片</li><li>身體感測網路之低功率無線心電訊號擷取與分類系統</li></ul></li><li>應用於神經調節之植入式身體感測網路</li><li>應用於植入式身體感測網路之低功率雙向遙測裝置結合微型心臟起搏器</li></ul><hr><h3 id="筆記"><a href="#筆記" class="headerlink" title="筆記"></a>筆記</h3><p><br></p><ul><li>IP-Based vs. Solution-Based</li><li>遠距醫療照護服務的潛在市場與預期成長</li><li>心肌於心搏週期中之極化、去極化、再極化</li><li>心電圖(ECG)之P波、QRS波群和T波之簡易判讀</li><li>從實驗室走向產品化所面臨的挑戰<ul><li>居家照護系統</li><li>裝置續航力―低功耗設計</li><li>使用便利性―無線傳輸</li><li>訊號解析度對診斷精確度之影響</li><li>診斷結果對醫生與使用者之呈現</li></ul></li><li>Wi-Fi/Bluetooth/ZigBee應用於穿戴式裝置無線傳輸之可行性評估</li><li>無線生物訊號擷取SoC所整合之元件架構介紹<ul><li>涉及過多電子學知識，個人認知無法消化…QQ</li></ul></li><li>植入式微型電刺激器之應用<ul><li>心臟起搏器</li><li>人工耳蝸</li><li>人工視網膜</li><li>功能性神經肌肉電刺激器</li><li>膀胱控制</li><li>深層腦部電刺激</li></ul></li></ul><h3 id="實作練習"><a href="#實作練習" class="headerlink" title="實作練習"></a>實作練習</h3><ul><li>使用HSPICE進行電路模擬測試驗證</li></ul><p>＊HSPICE筆記</p><ul><li>以電晶體、二極體、電阻和電容等各種電子元件模型為基礎，經數值模擬分析計算出電路中各結點之電壓、電流</li><li>主要提供直流穩態(DC)、暫態(TRAN)以及小信號頻率響應(AC)的模擬，使用者可依照所設計之電路自行編寫模擬分析等控制指令</li><li>語法規則<ul><li>指令檔(.sp)第一行預設不會執行，使用慣例為撰寫標題用</li><li>英文字母大小寫無區分</li><li>指令執行並無先後順序</li><li>註解符號為 ‘*’(星號)</li><li>指令檔需以 ‘.END’宣告結束</li><li>引入元件庫 : .lib ‘filepath’ TT</li><li>引入子電路 : .include ‘filepath’</li><li>將引入元件庫指令放在.protect &amp; .unprotect之間，可於模擬時不顯示元件之製程參數</li><li>宣告變數 : .param param_name = value</li><li>呼叫元件―MOSFET : M11 n1 n2 n3 n4 N_18 W=10u L=1u m=2<ul><li>M11的M代表MOSFET，11為自定義元件名稱，如同程式語言中的變數名稱</li><li>MOSFET為四端元件，因此n1 ~ n4依序代表其D、G、S、B端點所連接的節點</li><li>N_18表示呼叫元件庫中名稱為N_18的MOSFET元件</li><li>W &amp; L參數為指定MOSFET元件之寬度與通道長度</li><li>m = 2代表將兩個Ｍ11元件並聯，此為“抽象上的並聯”，也就是說呼叫這個MOSFET元件時，實際寬度為W x m，當所需的MOSFET寬度超出製程規定區間時，可適當地利用此參數來做調整</li></ul></li></ul></li></ul><table><thead><tr><th style="text-align:center">元件代號</th><th style="text-align:center">對應元件  </th></tr></thead><tbody><tr><td style="text-align:center">V</td><td style="text-align:center">Voltage Source</td></tr><tr><td style="text-align:center">I</td><td style="text-align:center">Current Source</td></tr><tr><td style="text-align:center">R</td><td style="text-align:center">Resistor</td></tr><tr><td style="text-align:center">L</td><td style="text-align:center">Inductor</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">Capacitor</td></tr><tr><td style="text-align:center">M</td><td style="text-align:center">MOSFET</td></tr><tr><td style="text-align:center">X</td><td style="text-align:center">Sub-Circuit</td></tr></tbody></table><p>控制指令 :</p><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:center">作用  </th></tr></thead><tbody><tr><td style="text-align:center">.AC</td><td style="text-align:center">交流分析(頻率響應)</td></tr><tr><td style="text-align:center">.DC</td><td style="text-align:center">直流分析</td></tr><tr><td style="text-align:center">.OP</td><td style="text-align:center">靜態點分析</td></tr><tr><td style="text-align:center">.NOISE</td><td style="text-align:center">雜訊分析</td></tr><tr><td style="text-align:center">.TRAN</td><td style="text-align:center">暫態分析</td></tr><tr><td style="text-align:center">.SUBCKT</td><td style="text-align:center">定義子電路</td></tr><tr><td style="text-align:center">.ENDS</td><td style="text-align:center">子電路定義結束</td></tr><tr><td style="text-align:center">.OPTIONS</td><td style="text-align:center">設定參數及其他功能</td></tr><tr><td style="text-align:center">.PRINT</td><td style="text-align:center">指定輸出內容</td></tr><tr><td style="text-align:center">.PLOT</td><td style="text-align:center">視覺化輸出</td></tr><tr><td style="text-align:center">.TEMP</td><td style="text-align:center">指定模擬環境溫度</td></tr><tr><td style="text-align:center">.END</td><td style="text-align:center">指令檔編寫結束</td></tr></tbody></table><hr><h3 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h3><p><br><br>很幸運能參與自造基地這一系列的研習，關於Part 1的研習內容，雖然資工人沒學過電子學(我想我該找本電子學來研讀😅)，De Morgan’s laws也不大記得了😂，但知識不嫌多，聽在心裡想在腦子裡，總是有個概念。而李教授除了課程內容，也講了許多受用的觀念，特別是Solution-Based的概念令我相當有感，投入職場至今確實見到台廠普遍沒有系統整合的概念，撇開台積電那樣將晶圓代工做到極致的特例不談，即使我們有先進工業製程能生產各種精密機械與零組件，卻無法發揮其最大價值，因為我們習慣當打工仔，不負責兜出完整的終端產品。</p><p>研習課程的最後由李老師所指導的優秀博士生助教帶大家使用HSPICE來模擬電路，雖然我不懂如何完整編寫出模擬電路，但資工人對於電腦語言總是有點Sense😎，理解語法規則後，也是看得懂每一行在做些什麼的，例如元件庫和子電路的概念，就如同程式語言中的函式庫及自訂函式。</p><p>感謝Prof. Shuenn-Yuh Lee與助教們的用心講解，受益良多。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;系統晶片應用―以無線心律檢測為例。&lt;br&gt;
    
    </summary>
    
      <category term="Workshop" scheme="https://laplacetw.github.io/categories/Workshop/"/>
    
    
      <category term="ecg" scheme="https://laplacetw.github.io/tags/ecg/"/>
    
      <category term="wireless" scheme="https://laplacetw.github.io/tags/wireless/"/>
    
      <category term="hspice" scheme="https://laplacetw.github.io/tags/hspice/"/>
    
  </entry>
  
  <entry>
    <title>MLP with Keras 手寫數字辨識測試</title>
    <link href="https://laplacetw.github.io/data-sci-ml-hello-world-mnist/"/>
    <id>https://laplacetw.github.io/data-sci-ml-hello-world-mnist/</id>
    <published>2019-08-12T18:15:24.000Z</published>
    <updated>2020-06-29T05:07:30.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Load-MNIST-Data-Set"><a href="#Load-MNIST-Data-Set" class="headerlink" title="Load MNIST Data Set"></a>Load MNIST Data Set</h2><a id="more"></a><p>載入60000筆訓練數據與10000筆測試數據。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(train_feature, train_label), (test_feature, test_label) = mnist.load_data()</span><br></pre></td></tr></table></figure></p><h2 id="Data-Preprocessing"><a href="#Data-Preprocessing" class="headerlink" title="Data Preprocessing"></a>Data Preprocessing</h2><p></p><h3 id="Reshape"><a href="#Reshape" class="headerlink" title="Reshape"></a>Reshape</h3><p>將28x28特徵值Raw Data(圖片)轉換為32位元浮點數一維數據。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_feature_vector = train_feature.reshape(len(train_feature), <span class="number">784</span>).astype(<span class="string">'float32'</span>)</span><br><span class="line">test_feature_vector = test_feature.reshape(len(test_feature), <span class="number">784</span>).astype(<span class="string">'float32'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="Feature-Normalization"><a href="#Feature-Normalization" class="headerlink" title="Feature Normalization"></a>Feature Normalization</h3><p>對特徵值進行正規化處理，也就是將數據按比例縮放至[0, 1]區間，且不改變其原始分佈，以收斂速度與預測精準度。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_feature_normal = train_feature_vector / <span class="number">255</span></span><br><span class="line">test_feature_normal = test_feature_vector / <span class="number">255</span></span><br></pre></td></tr></table></figure></p><h3 id="One-Hot-Encoding"><a href="#One-Hot-Encoding" class="headerlink" title="One-Hot Encoding"></a>One-Hot Encoding</h3><p>對離散型資料標籤進行獨熱編碼處理轉換為布林陣列，便於進行矩陣運算。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_label_onehot = np_utils.to_categorical(train_label)</span><br><span class="line">test_label_onehot = np_utils.to_categorical(test_label)</span><br></pre></td></tr></table></figure></p><h2 id="Model-Definition"><a href="#Model-Definition" class="headerlink" title="Model Definition"></a>Model Definition</h2><p>定義循序模型之結構、訓練方法、準確率評估<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br></pre></td></tr></table></figure></p><h3 id="Layer-Definition"><a href="#Layer-Definition" class="headerlink" title="Layer Definition"></a>Layer Definition</h3><p>定義輸入層、隱藏層、輸出層 :</p><ul><li>Units : 784 -&gt; 256 -&gt; 10</li><li>常態分佈亂數初始化weight＆bias</li><li>隱藏層活化函數使用ReLU</li><li>輸出層活化函數使用Softmax</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.add( Dense(units=<span class="number">256</span>, input_dim=<span class="number">784</span>, init=<span class="string">'normal'</span>, activation=<span class="string">'relu'</span>) )</span><br><span class="line">model.add( Dense(units=<span class="number">10</span>, init=<span class="string">'normal'</span>, activation=<span class="string">'softmax'</span>) )</span><br></pre></td></tr></table></figure><h3 id="Training-Definition"><a href="#Training-Definition" class="headerlink" title="Training Definition"></a>Training Definition</h3><p>定義訓練方法 : </p><ul><li>損失函數為 CrossEntropy Loss</li><li>優化器使用 Adam</li><li>驗證數據分割比例為0.2(將6萬筆訓練數據進一步分割為4.8萬筆訓練數據和1.2萬筆驗證數據)</li><li>訓練週期(epoch)為10</li><li>每批次樣本數為200(因此一個訓練週期為4.8萬/200=240批次)</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.compile(loss=<span class="string">'categorical_crossentropy'</span>, optimizer=<span class="string">'adam'</span>, metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line">model.fit(x=train_feature_normal, y=train_label_onehot, validation_split=<span class="number">0.2</span>, epochs=<span class="number">10</span>, batch_size=<span class="number">200</span>, verbose=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="Accuracy-Evaluation"><a href="#Accuracy-Evaluation" class="headerlink" title="Accuracy Evaluation"></a>Accuracy Evaluation</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">accuracy = model.evaluate(test_feature_normal, test_label_onehot)</span><br><span class="line">print(<span class="string">'\n[Accuracy] = '</span>, accuracy[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h3 id="Save-amp-Load-Model"><a href="#Save-amp-Load-Model" class="headerlink" title="Save &amp; Load Model"></a>Save &amp; Load Model</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># save</span></span><br><span class="line">model.save(<span class="string">"mdl_mlp_mnist.h5"</span>)</span><br><span class="line"><span class="comment"># load</span></span><br><span class="line">model = load_model(<span class="string">"mdl_mlp_mnist.h5"</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="Full-Code"><a href="#Full-Code" class="headerlink" title="Full Code"></a>Full Code</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> np_utils</span><br><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</span><br><span class="line">np.random.seed(<span class="number">1234</span>)  <span class="comment"># for reproducibility</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showPredict</span><span class="params">(imgs, lbls, predictions)</span>:</span></span><br><span class="line">    plt.gcf().set_size_inches(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        fig = plt.subplot(<span class="number">2</span>, <span class="number">5</span>, i + <span class="number">1</span>)</span><br><span class="line">        fig.imshow(imgs[i], cmap=<span class="string">'binary'</span>)</span><br><span class="line"></span><br><span class="line">        title = <span class="string">'prediction = '</span> + str(predictions[i])</span><br><span class="line">        <span class="keyword">if</span> predictions[i] != lbls[i]:</span><br><span class="line">            title += <span class="string">'(X)'</span></span><br><span class="line"></span><br><span class="line">        title += <span class="string">'\nlabel = '</span> + str(lbls[i])</span><br><span class="line">        fig.set_title(title, fontsize=<span class="number">10</span>)</span><br><span class="line">        fig.set_xticks([])</span><br><span class="line">        fig.set_yticks([])</span><br><span class="line">    </span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mdlTrain</span><span class="params">(train_feature, train_label, test_feature, test_label)</span>:</span></span><br><span class="line">    <span class="comment"># model definition</span></span><br><span class="line">    model = Sequential()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># input:784, hidden:256, output:10</span></span><br><span class="line">    model.add( Dense(units=<span class="number">256</span>, input_dim=<span class="number">784</span>, init=<span class="string">'normal'</span>, activation=<span class="string">'relu'</span>) )</span><br><span class="line">    model.add( Dense(units=<span class="number">10</span>, init=<span class="string">'normal'</span>, activation=<span class="string">'softmax'</span>) )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># training definition</span></span><br><span class="line">    model.compile(loss=<span class="string">'categorical_crossentropy'</span>, optimizer=<span class="string">'adam'</span>, metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line">    model.fit(x=train_feature, y=train_label, validation_split=<span class="number">0.2</span>, epochs=<span class="number">10</span>, batch_size=<span class="number">200</span>, verbose=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># accuracy evaluation</span></span><br><span class="line">    accuracy = model.evaluate(test_feature, test_label)</span><br><span class="line">    print(<span class="string">'\n[Accuracy] = '</span>, accuracy[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># load mnist data</span></span><br><span class="line">(train_feature, train_label), (test_feature, test_label) = mnist.load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># data preprocessing</span></span><br><span class="line"><span class="comment"># reshape</span></span><br><span class="line">train_feature_vector = train_feature.reshape(len(train_feature), <span class="number">784</span>).astype(<span class="string">'float32'</span>)</span><br><span class="line">test_feature_vector = test_feature.reshape(len(test_feature), <span class="number">784</span>).astype(<span class="string">'float32'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># feature normalization </span></span><br><span class="line">train_feature_normal = train_feature_vector / <span class="number">255</span></span><br><span class="line">test_feature_normal = test_feature_vector / <span class="number">255</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># one-hot encoding</span></span><br><span class="line">train_label_onehot = np_utils.to_categorical(train_label)</span><br><span class="line">test_label_onehot = np_utils.to_categorical(test_label)</span><br><span class="line"></span><br><span class="line">action = input(<span class="string">"1: Model Testing\n2: Model Training\n"</span>)</span><br><span class="line"><span class="keyword">if</span> action == <span class="string">"1"</span>:</span><br><span class="line">    print(<span class="string">"Load mdl_mlp_mnist.h5"</span>)</span><br><span class="line">    model = load_model(<span class="string">"mdl_mlp_mnist.h5"</span>)</span><br><span class="line">    prediction = model.predict_classes(test_feature_normal)</span><br><span class="line">    showPredict(test_feature, test_label, prediction)</span><br><span class="line">    <span class="keyword">del</span> model</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"===== Start training ====="</span>)</span><br><span class="line">    model = mdlTrain(train_feature_normal, train_label_onehot, test_feature_normal, test_label_onehot)</span><br><span class="line">    model.save(<span class="string">"mdl_mlp_mnist.h5"</span>)</span><br><span class="line">    print(<span class="string">"===== Model has been saved ====="</span>)</span><br><span class="line">    prediction = model.predict_classes(test_feature_normal)</span><br><span class="line">    showPredict(test_feature, test_label, prediction)</span><br><span class="line">    <span class="keyword">del</span> model</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/IPC8oCO.png" alt="IPC8oCO.png"><br><img src="https://i.imgur.com/qCt4QIA.png" alt="qCt4QIA.png"></p><hr><h2 id="Test-Your-Own-Handwritten-Numbers-Image"><a href="#Test-Your-Own-Handwritten-Numbers-Image" class="headerlink" title="Test Your Own Handwritten Numbers Image"></a>Test Your Own Handwritten Numbers Image</h2><p>為了讓訓練好的模型預測看看資料集以外的圖片，我用FireAlpaca「手寫」了10張28x28的數字圖片😆，並將圖片命名為「真實數字_圖片順序編碼.jpg」這樣的格式，例如「8_image2.jpg」代表這張圖片為我製作的第2張圖片，內容為數字8，這樣的命名規則是為了方便讀取圖片時能從檔名擷取其label。</p><h3 id="import-blob-amp-opencv"><a href="#import-blob-amp-opencv" class="headerlink" title="import blob &amp; opencv"></a>import blob &amp; opencv</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">from</span> cv2 <span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br></pre></td></tr></table></figure><p>P.S. 在VS Code中若只寫「import cv2」的話會報錯…</p><h3 id="data-preprocessing"><a href="#data-preprocessing" class="headerlink" title="data preprocessing"></a>data preprocessing</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_test_process</span><span class="params">(files)</span>:</span></span><br><span class="line">    test_image = []</span><br><span class="line">    test_label = []</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        label = int(file[<span class="number">0</span>:<span class="number">1</span>])  <span class="comment"># get label from file name</span></span><br><span class="line">        image = cv.imread(file, cv.IMREAD_GRAYSCALE)  <span class="comment"># read image as grayscale</span></span><br><span class="line">        <span class="comment"># retval, dst = cv.threshold(src, thresh, maxval, type[,dst])</span></span><br><span class="line">        image = cv.threshold(image, <span class="number">120</span>, <span class="number">255</span>, cv.THRESH_BINARY_INV)[<span class="number">1</span>]  <span class="comment"># binary invert</span></span><br><span class="line">        test_image.append(image)</span><br><span class="line">        test_label.append(label)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># list -&gt; numpy.array</span></span><br><span class="line">    test_image = np.array(test_image)</span><br><span class="line">    test_label = np.array(test_label)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># reshape(flatten) &amp; normalization</span></span><br><span class="line">    test_image_normal = test_image.reshape(len(test_image), <span class="number">784</span>).astype(<span class="string">'float32'</span>) / <span class="number">255</span></span><br><span class="line">    <span class="comment"># one-hot encoding</span></span><br><span class="line">    test_label_onehot = np_utils.to_categorical(test_label)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (test_image, test_label), (test_image_normal, test_label_onehot)</span><br></pre></td></tr></table></figure><h3 id="Prediction"><a href="#Prediction" class="headerlink" title="Prediction"></a>Prediction</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">model = load_model(<span class="string">"mdl_mlp_mnist.h5"</span>)</span><br><span class="line">print(<span class="string">"=== Load mdl_mlp_mnist.h5 ==="</span>)</span><br><span class="line">files = glob(<span class="string">'*.jpg'</span>)  <span class="comment"># find all images (path)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># data preprocessing</span></span><br><span class="line">(test_image, test_label), (test_image_normal, test_label_onehot) = get_test_process(files)</span><br><span class="line"></span><br><span class="line">prediction = model.predict_classes(test_image_normal)</span><br><span class="line">showPredict(test_image, test_label, prediction)</span><br><span class="line"><span class="keyword">del</span> model</span><br></pre></td></tr></table></figure><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p>哎呀，其中一張數字8的圖片預測錯誤😂<br><img src="https://i.imgur.com/1eJE60d.png" alt="1eJE60d.png"></p><p>和數據集的圖片比較起來，我的手寫圖片經過影像處理完筆跡變得超細，或許特徵相對不那麼明顯吧，把原圖多點幾個像素上去再預測一次就過了呢。<br><img src="https://i.imgur.com/0MsDeaK.png" alt="0MsDeaK.png"></p><hr><p>＊測試程式指定隨機亂數種子是為了<a href="https://keras.io/zh/getting-started/faq/#how-can-i-obtain-reproducible-results-using-keras-during-development" target="_blank" rel="noopener">再現性</a></p><p>＊下載MNIST數據集時若發生 <a href="https://stackoverflow.com/questions/41691327/ssl-sslerror-ssl-certificate-verify-failed-certificate-verify-failed-ssl-c/41692664?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa" target="_blank" rel="noopener">ssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed</a>，在 Terminal 執行以下命令 :<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Applications/Python\ 3.6/Install\ Certificates.command</span><br></pre></td></tr></table></figure></p><p>📄<a href="https://keras.io/zh/" target="_blank" rel="noopener">Keras中文說明文件</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Load-MNIST-Data-Set&quot;&gt;&lt;a href=&quot;#Load-MNIST-Data-Set&quot; class=&quot;headerlink&quot; title=&quot;Load MNIST Data Set&quot;&gt;&lt;/a&gt;Load MNIST Data Set&lt;/h2&gt;
    
    </summary>
    
      <category term="Data Science" scheme="https://laplacetw.github.io/categories/Data-Science/"/>
    
    
      <category term="keras" scheme="https://laplacetw.github.io/tags/keras/"/>
    
      <category term="mnist" scheme="https://laplacetw.github.io/tags/mnist/"/>
    
      <category term="deep learning" scheme="https://laplacetw.github.io/tags/deep-learning/"/>
    
      <category term="computer vision" scheme="https://laplacetw.github.io/tags/computer-vision/"/>
    
  </entry>
  
  <entry>
    <title>使用 Selenium 模組控制瀏覽器</title>
    <link href="https://laplacetw.github.io/data-sci-use-selenium-with-chrome-driver/"/>
    <id>https://laplacetw.github.io/data-sci-use-selenium-with-chrome-driver/</id>
    <published>2019-08-10T17:21:20.000Z</published>
    <updated>2019-08-23T17:28:01.058Z</updated>
    
    <content type="html"><![CDATA[<p>自從開發環境轉移到 Mac OS 後，倒是沒有在這環境下測試用 Selenium 去控制瀏覽器，不過我並不想控制 Safari ，因為它不是一個跨平台的瀏覽器。<br><a id="more"></a><br>第一次使用 Selenium 是學習 Web Crawler 的過程中發現，在瀏覽器中可見的物件並不代表一定爬得到(初心者😗)，於是我了解到那些自己抓不到的數據是由 JavaScript 所動態產生的，因為我向目標伺服器所發出的 request 只能取得靜態的數據，若要進行進階的動態網頁資料擷取，那麼我就必須學習如何用程式碼去控制瀏覽器。</p><hr><h2 id="Install-Selenium"><a href="#Install-Selenium" class="headerlink" title="Install Selenium"></a>Install Selenium</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install selenium</span><br></pre></td></tr></table></figure><h2 id="Download-Chrome-Driver"><a href="#Download-Chrome-Driver" class="headerlink" title="Download Chrome Driver"></a>Download Chrome Driver</h2><p>要讓 Selenium 能夠控制 Chrome 瀏覽器，需要<span style="color:red;">對應版本</span>的 <a href="https://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">ChromeDriver</a>，例如我的 Chrome 為目前的最新版本 76.0.3809.100，那麼我就下載 ver.76 最新的 76.0.3809.68 版本 ChromeDriver，然後把 ChromeDriver 放在適當的路徑下，以便在程式中呼叫。</p><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getChrome</span><span class="params">(show=False)</span>:</span>  <span class="comment"># return chrome handler</span></span><br><span class="line">    WINDOW_SIZE = <span class="string">"1366, 768"</span>  <span class="comment"># screen size</span></span><br><span class="line">    CHROMEDRIVER_PATH = <span class="string">r"/Users/nick/Downloads/chromedriver"</span></span><br><span class="line"></span><br><span class="line">    options = Options()  <span class="comment"># config</span></span><br><span class="line">    options.add_argument(<span class="string">"log-level=3"</span>)  <span class="comment"># shut the logging</span></span><br><span class="line">    options.add_argument(<span class="string">"--window-size=%s"</span> % WINDOW_SIZE)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> show: options.add_argument(<span class="string">"--headless"</span>)  <span class="comment"># headless mode</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> webdriver.Chrome(CHROMEDRIVER_PATH, chrome_options=options)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chrome = getChrome()</span><br><span class="line">chrome.get(<span class="string">"https://laplacetw.github.io/categories/"</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">chrome.save_screenshot(<span class="string">"screenshot.png"</span>)</span><br><span class="line">chrome.quit()</span><br></pre></td></tr></table></figure><p>測試程式若順利執行的話，在檔案目錄下應該會發現多了個執行畫面的截圖 :<br><img src="https://i.imgur.com/5qmRipW.png" alt="5qmRipW.png"></p><p>getChrome()預設會用 headless 模式啟動 Chrome，若想顯示使用者介面的話可以將 “show” 這個參數設為 True，如此便能看到自動化執行 Chrome 的過程。但實際應用的情況下非必要就別啟動圖形介面了，執行速度會快很多的😎</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自從開發環境轉移到 Mac OS 後，倒是沒有在這環境下測試用 Selenium 去控制瀏覽器，不過我並不想控制 Safari ，因為它不是一個跨平台的瀏覽器。&lt;br&gt;
    
    </summary>
    
      <category term="Data Science" scheme="https://laplacetw.github.io/categories/Data-Science/"/>
    
    
      <category term="python" scheme="https://laplacetw.github.io/tags/python/"/>
    
      <category term="web crawler" scheme="https://laplacetw.github.io/tags/web-crawler/"/>
    
      <category term="selenium" scheme="https://laplacetw.github.io/tags/selenium/"/>
    
      <category term="chromedriver" scheme="https://laplacetw.github.io/tags/chromedriver/"/>
    
  </entry>
  
  <entry>
    <title>關於 SharePoint REST API</title>
    <link href="https://laplacetw.github.io/sharepoint-rest-api/"/>
    <id>https://laplacetw.github.io/sharepoint-rest-api/</id>
    <published>2019-08-09T13:57:31.000Z</published>
    <updated>2019-08-10T08:49:12.707Z</updated>
    
    <content type="html"><![CDATA[<p>這是一段關於沒有伺服器權限的開發者於 SharePoint 進行網站開發的恐怖故事。<br><a id="more"></a><br>這段故事實在是太可怕了，伺服器權限在資訊單位手裡，而完全不懂 SharePoint 也不會 .NET 的我只有使用者權限帳號(黑人問號.jpg)，看著一點幫助都沒有的 training kit 文件，我必須想辦法把它寫成一個入口網站…</p><p>經過摸索研究最終想出了解決方法，我自製母版定義了導航列與頁腳，並利用內容編輯器這個 Web Part 在每個頁面「填入」我要的 HTML 內容，但不得不放棄內建的其他 Web Part，因為我根本無法完全控制那些頑固的東西，它們讓整個頁面佈局看起來相當糟糕!!!</p><p>但如此我便擁有整個頁面內容的控制權了，前端頁面佈局樣式就交給 Bootstrap 去搞定啦，而後端就只能依賴 SharePoint REST API 去處理 CRUD。</p><p>雖然很荒謬但我還是硬著頭皮上了，最後寫了個多功能的 SharePoint 企業內網 :</p><ul><li>公告</li><li>行事曆(支援批次匯入事件)</li><li>會議室預約</li><li>工時追蹤填報(支援統計圖表)</li><li>出勤狀況發佈(系統通知信)</li><li>討論區</li><li>Smart Chat Bot(答覆公司系統與網站相關問題)</li></ul><p>這任務至此告一段落了，紀錄一下 SharePoint REST API 如何使用 : </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> api_create = <span class="string">"https://server/site/_api/web/lists('&#123; your_list_guid &#125;')/items"</span>,</span><br><span class="line">    api_read = <span class="string">"https://server/site/_api/web/lists('&#123; your_list_guid &#125;')/items( &#123; your_list_item_id &#125; )"</span>,</span><br><span class="line">    api_update = <span class="string">"https://server/site/_api/web/lists('&#123; your_list_guid &#125;')/items( &#123; your_list_item_id &#125; )"</span>,</span><br><span class="line">    api_delete = <span class="string">"https://server/_api/web/lists('&#123; your_list_guid &#125;')/items( &#123; your_list_item_id &#125; )"</span>,</span><br><span class="line">    data =&#123;</span><br><span class="line">        __metadata: &#123; <span class="string">'type'</span>: <span class="string">'SP.Data.&#123; your_list_item_entity_type_fullname &#125;'</span> &#125;,</span><br><span class="line">        &#123; list_column_name &#125; : &#123; value &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sp_create</span>(<span class="params">api_create</span>)</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: api_create,</span><br><span class="line">        method: <span class="string">"POST"</span>,</span><br><span class="line">        data: <span class="built_in">JSON</span>.stringify(data),</span><br><span class="line">        contentType: <span class="string">"application/json; odata=verbose"</span>,</span><br><span class="line">        headers:&#123;</span><br><span class="line">            <span class="string">"Accept"</span>: <span class="string">"application/json; odata=verbose"</span>,</span><br><span class="line">            <span class="string">"X-RequestDigest"</span>: $(<span class="string">"#__REQUESTDIGEST"</span>).val()</span><br><span class="line">        &#125;,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> data = res.d; <span class="comment">// the data you create</span></span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(error));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sp_read</span>(<span class="params">api_read</span>)</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: api_read,</span><br><span class="line">        type: <span class="string">"GET"</span>,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">"accept"</span>:<span class="string">"application/json; odata=verbose"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> data = res.d; <span class="comment">// the data you read</span></span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(error));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sp_update</span>(<span class="params">api_update</span>)</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: api_update,</span><br><span class="line">        method: <span class="string">"POST"</span>,</span><br><span class="line">        data: <span class="built_in">JSON</span>.stringify(data),</span><br><span class="line">        contentType: <span class="string">"application/json; odata=verbose"</span>,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">"Accept"</span>: <span class="string">"application/json;odata=verbose"</span>,</span><br><span class="line">            <span class="string">"X-RequestDigest"</span>: $(<span class="string">"#__REQUESTDIGEST"</span>).val(),</span><br><span class="line">            <span class="string">"IF-MATCH"</span>: <span class="string">"*"</span>,</span><br><span class="line">            <span class="string">"X-Http-Method"</span>: <span class="string">"MERGE"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> data = res.d; <span class="comment">// the data you update</span></span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(error));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sp_delete</span>(<span class="params">api_delete</span>)</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: api,</span><br><span class="line">        method: <span class="string">'DELETE'</span>,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">"Accept"</span>: <span class="string">"application/json;odata=verbose"</span>,</span><br><span class="line">            <span class="string">"X-RequestDigest"</span>: $(<span class="string">"#__REQUESTDIGEST"</span>).val(),</span><br><span class="line">            <span class="string">"IF-MATCH"</span>: <span class="string">"*"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(error));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* filter &amp; select &amp; order(asc / desc)</span></span><br><span class="line"><span class="comment">"https://server/_api/web/lists('&#123; your_list_guid &#125;')/items?$filter=&#123; list_column_name &#125; eq &#123; keyword &#125;&amp;$select=ID,AuthorId,Created,...&amp;$orderby=&#123; list_column_name &#125; desc"</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>特別留意 SharePoint REST API 返回的資料筆數預設值是100筆，這在我寫的會議室預約功能所依賴的資料庫筆數超過100之後，因為使用者反應預約完成的會議卻沒有顯示在頁面上而發現。此問題只要在 API 裡頭加上一個 “TOP”參數並指定返回的資料筆數即可解決，例如「TOP=5000」，而 API 能返回的最大值為5000筆。如果需要返回更多筆資料，印象中看過網路上相關討論，但我用在查詢會議室預約這樣有時效性的資料，估計5000筆已經綽綽有餘了XDD</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這是一段關於沒有伺服器權限的開發者於 SharePoint 進行網站開發的恐怖故事。&lt;br&gt;
    
    </summary>
    
      <category term="SharePoint" scheme="https://laplacetw.github.io/categories/SharePoint/"/>
    
    
      <category term="web" scheme="https://laplacetw.github.io/tags/web/"/>
    
      <category term="sharepoint" scheme="https://laplacetw.github.io/tags/sharepoint/"/>
    
  </entry>
  
  <entry>
    <title>第一次吃樹莓派</title>
    <link href="https://laplacetw.github.io/rspi-meet-raspberry-pi-b3-plus/"/>
    <id>https://laplacetw.github.io/rspi-meet-raspberry-pi-b3-plus/</id>
    <published>2019-05-18T16:12:17.000Z</published>
    <updated>2020-07-03T09:26:59.564Z</updated>
    
    <content type="html"><![CDATA[<p>樹莓派3B+初始化安裝。<br><a id="more"></a></p><p><img src="https://i.imgur.com/wIdoqQ8.jpg" alt><br><img src="https://i.imgur.com/Dec2LcF.jpg" alt></p><h3 id="Operation-System"><a href="#Operation-System" class="headerlink" title="Operation System"></a>Operation System</h3><p>參考了<a href="http://blog.itist.tw/2016/12/34-best-operating-systems-for-raspberry-pi.html" target="_blank" rel="noopener">IT技術家</a>所整理的作業系統清單，我決定直接安裝官方發行的Raspbian OS。</p><ul><li><a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="noopener">Raspbian載點</a></li><li><a href="https://www.raspberrypi.org/documentation/installation/installing-images/README.md" target="_blank" rel="noopener">Raspbian安裝指南</a></li><li><a href="https://www.raspberrypi.com.tw/20004/faq-how-to-update-and-upgrade-raspbian/" target="_blank" rel="noopener">更新Raspbian</a></li></ul><p>由於Raspberry Pi是以SD Card來當硬碟(<a href="https://www.raspberrypi.org/documentation/installation/sd-cards.md" target="_blank" rel="noopener">官方說明</a>)，網路上大多建議儲存容量至少8G、寫入速度class 10，加上系統更新考量，於是我準備了一張儲存容量16G、寫入速度class 10的SD Card來當系統儲存空間，以及一支隨身碟來當資料儲存空間。不過官方有特別強調，較高的寫入速度並非記憶卡性能的唯一標準，因為寫入速度通常是藉由犧牲讀取速度和尋軌效能而提升的。</p><blockquote><p>The card class determines the sustained write speed for the card; a class 4 card will be able to write at 4MB/s, whereas a class 10 should be able to attain 10 MB/s. However, it should be noted that this does not mean a class 10 card will outperform a class 4 card for general usage, because often this write speed is achieved at the cost of read speed and increased seek times.</p></blockquote><p>Raspbian鏡像檔目前有3種版本:</p><ul><li>Raspbian Stretch with desktop and recommended software</li><li>Raspbian Stretch with desktop</li><li>Raspbian Stretch Lite<br><img src="https://i.imgur.com/c8sOf6D.png" alt></li></ul><p>Raspberry Pi安裝作業系統有許多方式，直接刷進去SD Card應該是最簡單的方式，官方推薦<a href="https://www.balena.io/etcher/" target="_blank" rel="noopener">Etcher</a>燒錄工具。<br><img src="https://i.imgur.com/lr2zQQi.png" alt></p><h3 id="Connect-to-Wi-Fi-Networks"><a href="#Connect-to-Wi-Fi-Networks" class="headerlink" title="Connect to Wi-Fi Networks"></a>Connect to Wi-Fi Networks</h3><p>將作業系統刷進SD Card後，讓電腦重新讀取記憶卡，在根目錄下建立wpa_supplicant.conf，寫入網路連線參數，可寫入多筆。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">country=TW</span><br><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line">network=&#123;</span><br><span class="line">    priority=9</span><br><span class="line">    ssid=&quot;&#123;SSID&#125;&quot;</span><br><span class="line">    psk=&quot;&#123;Password&#125;&quot;</span><br><span class="line">    key_mgmt=WPA-PSK</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>P.S. 優先度Priority數字越大，優先度越高。</p><h3 id="Remote"><a href="#Remote" class="headerlink" title="Remote"></a>Remote</h3><p></p><p><br>SSH連線預設為關閉狀態，如同無線網路設定，在根目錄下建立名稱為’ssh’的檔案即可強制啟用SSH連線。<br><img src="https://i.imgur.com/5X2bahA.png" alt></p><p>我忘了在網路連線設定country參數，所以連線時系統有提醒可以進config設定。<br><img src="https://i.imgur.com/QI8vFEc.png" alt></p><h4 id="在Raspberry-Pi安裝VNC-Remote-Server"><a href="#在Raspberry-Pi安裝VNC-Remote-Server" class="headerlink" title="在Raspberry Pi安裝VNC Remote Server"></a>在Raspberry Pi安裝VNC Remote Server</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install tightvncserver -y</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vncserver  <span class="comment"># run server</span></span></span><br></pre></td></tr></table></figure><p>首次遠端桌面連線時，系統會要求設置連線密碼。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~ $ vncserver</span><br><span class="line">You will require a password to access your desktops.</span><br><span class="line"></span><br><span class="line">Password: </span><br><span class="line">Warning: password truncated to the length of 8.</span><br><span class="line">Verify:   </span><br><span class="line">Would you like to enter a view-only password (y/n)? n</span><br><span class="line"></span><br><span class="line">New 'X' desktop is raspberrypi:1</span><br><span class="line"></span><br><span class="line">Creating default startup script /home/pi/.vnc/xstartup</span><br><span class="line">Starting applications specified in /home/pi/.vnc/xstartup</span><br><span class="line">Log file is /home/pi/.vnc/raspberrypi:1.log</span><br></pre></td></tr></table></figure></p><h4 id="在Google-Chrome安裝VNC-Viewer擴充程式"><a href="#在Google-Chrome安裝VNC-Viewer擴充程式" class="headerlink" title="在Google Chrome安裝VNC Viewer擴充程式"></a>在Google Chrome安裝VNC Viewer擴充程式</h4><p>*<a href="https://chrome.google.com/webstore/iabmpiboiopbgfabjmgeedhcmjenhbla" target="_blank" rel="noopener">VNC Viewer for Google Chrome</a><br><img src="https://i.imgur.com/mKcoeaT.png" alt></p><p>連線Address需指定VNC Server Port，連接阜編碼規則為5900+Display編號。<br>e.g. 192.168.0.2:5901<br><img src="https://i.imgur.com/fnD2RQc.png" alt><br><img src="https://i.imgur.com/dYVH37J.png" alt></p><h3 id="Shutdown"><a href="#Shutdown" class="headerlink" title="Shutdown"></a>Shutdown</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo shutdown -h now</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;樹莓派3B+初始化安裝。&lt;br&gt;
    
    </summary>
    
      <category term="Raspberry Pi" scheme="https://laplacetw.github.io/categories/Raspberry-Pi/"/>
    
    
      <category term="IoT" scheme="https://laplacetw.github.io/tags/IoT/"/>
    
      <category term="linux" scheme="https://laplacetw.github.io/tags/linux/"/>
    
      <category term="raspberry pi" scheme="https://laplacetw.github.io/tags/raspberry-pi/"/>
    
  </entry>
  
</feed>
