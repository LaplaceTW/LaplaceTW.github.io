<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Laplace&#39;s Lab</title>
  
  <subtitle>“We&#39;re believers that the best way to learn something is to do it.”</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://laplacetw.github.io/"/>
  <updated>2021-01-22T08:06:51.458Z</updated>
  <id>https://laplacetw.github.io/</id>
  
  <author>
    <name>LaplaceTW</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>資訊隱藏：離散小波轉換</title>
    <link href="https://laplacetw.github.io/stegano-distributed-wavelet-transform/"/>
    <id>https://laplacetw.github.io/stegano-distributed-wavelet-transform/</id>
    <published>2021-01-21T16:51:30.000Z</published>
    <updated>2021-01-22T08:06:51.458Z</updated>
    
    <content type="html"><![CDATA[<p>單純以LSB的方式嵌入秘密資訊的方式雖簡單又易實現，但載體影像卻難以抵抗各種攻擊。<a id="more"></a>所以接續上篇來寫能抵抗破壞的數位浮水印，只修過一學期相關課程的菜雞我呢，雖然在寫課程作業期間也找了論文來輔助參考，但也算不上系統性的學習相關知識，想從艱困的預算中編列購買相關書籍來研讀的費用啊&nbsp;&nbsp;😶</p><p><a href="https://zh.wikipedia.org/wiki/數位浮水印" target="_blank" rel="noopener">維基百科</a>對數位浮水印的描述：</p><blockquote><p>數位浮水印，是指將特定的資訊嵌入數字訊號中，數位訊號可能是音訊、圖片或是影片等。若要拷貝有數位浮水印的訊號，所嵌入的資訊也會一併被拷貝。數位浮水印可分為浮現式和隱藏式兩種，前者是可被看見的浮水印(visible watermarking)，其所包含的資訊可在觀看圖片或影片時同時被看見。一般來說，浮現式的浮水印通常包含著作權擁有者的名稱或標誌。電視台在畫面角落所放置的標誌，也是浮現式浮水印的一種。</p></blockquote><blockquote><p>隱藏式的浮水印是以數位資料的方式加入音訊、圖片或影片中，但在一般的狀況下無法被看見。隱藏式浮水印的重要應用之一是保護著作權，期望能藉此避免或阻止數位媒體未經授權的複製和拷貝。隱寫術(Steganography)也是數位浮水印的一種應用，雙方可利用隱藏在數位訊號中的資訊進行溝通。數位相片中的註釋資料能記錄相片拍攝的時間、使用的光圈和快門，甚至是相機的廠牌等資訊，這也是數位浮水印的應用之一。某些檔案格式可以包含這些稱為「metadata」的額外資訊。</p></blockquote><p>而數位浮水印的嵌入方式，除了空間域，還有頻率域，也就是將影像轉換至頻率域再進行嵌入。高頻訊號較不易為人眼所察覺，低頻訊號較能抵抗攻擊，在嵌入時可視需求作取捨。</p><p>我以一階<a href="https://zh.wikipedia.org/wiki/哈爾小波轉換" target="_blank" rel="noopener">哈爾小波轉換</a>來進行測試，影像將被分割為LL、HL、LH、HH四個頻帶，其中LL即為能量最為集中的低頻帶，人類視覺對此部分的變化較靈敏。然後將浮水印分割為上下兩個部分，上半部在空間域進行嵌入，下半部則嵌入頻率域的HH頻帶，來看對攻擊的抵抗能力。</p><p>空間域嵌入、頻率域嵌入和還原結果⬇︎<br><img src="https://i.imgur.com/lvk5KXs.png" alt><br>將影像去除中央128x128的區域後的還原結果⬇︎<br><img src="https://i.imgur.com/Ixe4Fl5.png" alt><br>將影像去除中央二個方框區域後的還原結果⬇︎<br><img src="https://i.imgur.com/gW8uUS6.png" alt></p><p>可以明顯的看出，將影像去除128x128的區域後，嵌入於空間域的浮水印只剩渣&nbsp;&nbsp;🤣 &nbsp;&nbsp;而去除方框區域後的浮水印還原結果也能看到白色框線的粗細對比。真的蠻有趣的啊😲</p><p>＊原始碼連結：<a href="https://github.com/laplacetw/stegano/blob/main/dwt.py" target="_blank" rel="noopener">Github</a><br>＊測試影像來源：<a href="https://unsplash.com/photos/r2nJPbEYuSQ" target="_blank" rel="noopener">unsplash</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;單純以LSB的方式嵌入秘密資訊的方式雖簡單又易實現，但載體影像卻難以抵抗各種攻擊。
    
    </summary>
    
      <category term="Steganography" scheme="https://laplacetw.github.io/categories/Steganography/"/>
    
    
      <category term="python" scheme="https://laplacetw.github.io/tags/python/"/>
    
      <category term="data hiding" scheme="https://laplacetw.github.io/tags/data-hiding/"/>
    
  </entry>
  
  <entry>
    <title>Github：basic auth using a password to Git is deprecated</title>
    <link href="https://laplacetw.github.io/sofdev-github-token-auth-needed/"/>
    <id>https://laplacetw.github.io/sofdev-github-token-auth-needed/</id>
    <published>2021-01-21T09:10:55.000Z</published>
    <updated>2021-01-21T10:13:52.062Z</updated>
    
    <content type="html"><![CDATA[<p>推送更新後收到Github官方的通知信，內容說到以密碼為執行Git操作的基本身份認證方式已經要棄用了<a id="more"></a>，要使用者改用Access Token。</p><p>通知信中給了一個連結：<a href="https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/" target="_blank" rel="noopener">Token authentication requirements for Git operations</a></p><blockquote><p>Workflows affected</p><ul><li>Command line Git access</li><li>Desktop applications using Git (GitHub Desktop is unaffected)</li><li>Any apps/services that access Git repositories on GitHub.com directly using your password</li></ul></blockquote><blockquote><p>The following customers remain unaffected by this change:</p></blockquote><blockquote><ul><li>If you have two-factor authentication enabled for your account, you are already required to use </li><li>token- or SSH-based authentication.</li><li>If you use GitHub Enterprise Server, we have not announced any changes to our on-premises offering.</li><li>If you maintain a GitHub App, GitHub Apps do not support password authentication.</li></ul></blockquote><p>重點就是呢，2021/08/13以前，以密碼為執行Git操作的身份認證方式都還能正常使用，不過還是趕緊改用Access Token吧，生成後要記得設定存取權限，然後將Git密碼改成Access Token就行了。<br><img src="https://i.imgur.com/ZkeH708.png" alt><br>＊<a href="https://stackoverflow.com/questions/20195304/how-do-i-update-the-password-for-git" target="_blank" rel="noopener">How do I update the password for Git?</a></p><p>以下是Github官方文件對於Access Token的一些操作說明：</p><ul><li><a href="https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token" target="_blank" rel="noopener">Creating a personal access token</a></li><li><a href="https://docs.github.com/en/github/using-git/caching-your-github-credentials-in-git" target="_blank" rel="noopener">Caching your GitHub credentials in Git</a></li><li><a href="https://docs.github.com/en/github/using-git/updating-credentials-from-the-macos-keychain" target="_blank" rel="noopener">Updating credentials from the macOS Keychain</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;推送更新後收到Github官方的通知信，內容說到以密碼為執行Git操作的基本身份認證方式已經要棄用了
    
    </summary>
    
      <category term="Software-Dev" scheme="https://laplacetw.github.io/categories/Software-Dev/"/>
    
    
      <category term="git" scheme="https://laplacetw.github.io/tags/git/"/>
    
      <category term="github" scheme="https://laplacetw.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>資訊隱藏：最低有效位元</title>
    <link href="https://laplacetw.github.io/stegano-least-significant-bit/"/>
    <id>https://laplacetw.github.io/stegano-least-significant-bit/</id>
    <published>2021-01-20T06:27:08.000Z</published>
    <updated>2021-01-22T06:53:16.501Z</updated>
    
    <content type="html"><![CDATA[<p>這學期修了很有趣的課程，我覺得隱寫術這個詞還蠻中二的。<a id="more"></a></p><p><a href="https://zh.wikipedia.org/wiki/隱寫術" target="_blank" rel="noopener">維基百科</a>對於隱寫術的描述：</p><blockquote><p>隱寫術是一門關於資訊隱藏的技巧與科學，所謂資訊隱藏指的是不讓除預期的接收者之外的任何人知曉資訊的傳遞事件或者資訊的內容。隱寫術的英文叫做Steganography，來源於特裡特米烏斯的一本講述密碼學與隱寫術的著作Steganographia，該書書名源於希臘語，意為「隱秘書寫」。</p></blockquote><blockquote><p>一般來說，隱寫的資訊看起來像一些其他的東西，例如一張購物清單，一篇文章，一篇圖畫或者其他「偽裝」(cover)的訊息。隱寫的資訊通常用一些傳統的方法進行加密，然後用某種方法修改一個「偽裝文字」(covertext)，使其包含被加密過的訊息，形成所謂的「隱秘文字」(stegotext)。例如，文字的大小、間距、字體，或者掩飾文字的其他特性可以被修改來包含隱藏的資訊。只有接收者知道所使用的隱藏技術，才能夠恢復資訊，然後對其進行解密。</p></blockquote><p>現代的隱寫術是利用數位媒介作為載體，例如影像、聲音以及影片。載體檔案相對隱秘檔案的數據量越大，隱藏後者就越容易。或許是和授課者的專業領域有關，這學期的課都是以影像作為載體使用。</p><p>我想最低有效位元(LSB，Least Significant Bit)應該是最簡單的方法吧，透過將秘密資訊嵌入影像像素的LSB，其對影像的修改程度非常細微，達到肉眼無法察覺的程度。而在嵌入資訊前，對影像進行了量化處理，量化值(Ｌ)的大小對影像品質也有著相對的影響。</p><p><img src="https://i.imgur.com/lg0WsNO.png" alt></p><p>對於嵌入秘密資訊後的影像，再次以同樣的量化值進行處理，以前者減去後者的像素值，就能萃取出嵌入的秘密資訊。實際上在課程作業有用了算數編碼對秘密資訊加密後再嵌入，但自己在實作上的結果並不穩定，得再花點時間找資料研究思考。而最低有效位元的方式雖然簡單，卻也相當脆弱，影像如果被壓縮過，嵌入的資訊也會遭到破壞…。因此在後續的課程也學習到一些進階的方式，令菜雞我覺得很厲害。</p><p>下面的測試影像藏入了這段文字：</p><blockquote><p>After billions of dollars and a decade of work, NASA’s plans to send astronauts back to the moon had a new setback on Saturday. A planned eight-minute test firing of the four engines of a new mega rocket needed for the moon missions came to an abrupt end after only about a minute.As engineers disentangle what went wrong, the first launch of the rocket is likely to slip further into the future, and NASA astronauts may have to wait longer before setting foot on the moon again.</p></blockquote><p>藏入一段文字後的影像，量化值越大，峰值訊噪比就越低⬇︎<br><img src="https://i.imgur.com/vUFXa1i.png" alt></p><p>＊原始碼連結：<a href="https://github.com/laplacetw/stegano/blob/main/lsb.py" target="_blank" rel="noopener">Github</a><br>＊測試影像來源：<a href="https://unsplash.com/photos/r2nJPbEYuSQ" target="_blank" rel="noopener">unsplash</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這學期修了很有趣的課程，我覺得隱寫術這個詞還蠻中二的。
    
    </summary>
    
      <category term="Steganography" scheme="https://laplacetw.github.io/categories/Steganography/"/>
    
    
      <category term="python" scheme="https://laplacetw.github.io/tags/python/"/>
    
      <category term="data hiding" scheme="https://laplacetw.github.io/tags/data-hiding/"/>
    
  </entry>
  
  <entry>
    <title>GANs in Action Ch2：VAE</title>
    <link href="https://laplacetw.github.io/data-sci-gans-in-action-ch2/"/>
    <id>https://laplacetw.github.io/data-sci-gans-in-action-ch2/</id>
    <published>2020-12-15T17:21:36.000Z</published>
    <updated>2020-12-15T17:21:59.112Z</updated>
    
    <content type="html"><![CDATA[<p>範例程式研讀。<a id="more"></a></p><p>＊TensorFlow 2.x 動態圖機制Eager Mode可能會導致範例程式拋出SymbolicException錯誤，需手動關閉：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf<span class="selector-class">.compat</span><span class="selector-class">.v1</span><span class="selector-class">.disable_eager_execution</span>()</span><br></pre></td></tr></table></figure></p><h3 id="超參數與自訂函式"><a href="#超參數與自訂函式" class="headerlink" title="超參數與自訂函式"></a>超參數與自訂函式</h3><ul><li><p>超參數epsilon_std是在sampling()裡面所使用，但keras.backend.random_normal的參數stddev(標準差)預設值就是1.0。</p></li><li><p>sampling()會在編碼器的結構中接收參數：平均值和對數變異數(z_mean, z_log_var)，返回取樣自平均值=z_mean且標準差=$ \sqrt {z\_log\_var} $之常態分佈的隨機數值陣列，也就是Z(潛在空間，latent space)。</p></li><li><p>vae_loss()負責在VAE訓練過程接收參數：實際值(原始影像)及預測值(解碼器生成影像)來計算Loss，返回二元交叉熵(binary cross entropy)與相對熵(relative entropy)的和。</p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># defining the key parameters</span></span><br><span class="line">batch_size = <span class="number">100</span></span><br><span class="line">original_dim = <span class="number">784</span>  <span class="comment"># MNIST: 28 * 28</span></span><br><span class="line">latent_dim = <span class="number">2</span></span><br><span class="line">intermediate_dim = <span class="number">256</span></span><br><span class="line">epochs = <span class="number">5</span></span><br><span class="line">epsilon_std = <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sampling</span><span class="params">(args: tuple)</span>:</span></span><br><span class="line">    <span class="comment"># we grab the variables from the tuple</span></span><br><span class="line">    z_mean, z_log_var = args</span><br><span class="line">    epsilon = K.random_normal(shape=(K.shape(z_mean)[<span class="number">0</span>], latent_dim), mean=<span class="number">0.</span>, stddev=epsilon_std)</span><br><span class="line">    <span class="keyword">return</span> z_mean + K.exp(z_log_var / <span class="number">2</span>) * epsilon</span><br><span class="line"></span><br><span class="line"><span class="comment"># defining the losses</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vae_loss</span><span class="params">(x: tf.Tensor, x_decoded_mean: tf.Tensor)</span>:</span></span><br><span class="line">    <span class="comment"># cross entropy</span></span><br><span class="line">    xent_loss = original_dim * metrics.binary_crossentropy(x, x_decoded_mean)</span><br><span class="line">    <span class="comment"># relative entropy</span></span><br><span class="line">    kl_loss = - <span class="number">0.5</span> * K.sum(<span class="number">1</span> + z_log_var - K.square(z_mean) - K.exp(z_log_var), axis=<span class="number">-1</span>)</span><br><span class="line">    vae_loss = K.mean(xent_loss + kl_loss)</span><br><span class="line">    <span class="keyword">return</span> vae_loss</span><br></pre></td></tr></table></figure><h3 id="變分自編碼器模型"><a href="#變分自編碼器模型" class="headerlink" title="變分自編碼器模型"></a>變分自編碼器模型</h3><ul><li><p>Encoder：輸入影像，輸出平均值、對數變異數、潛在空間。</p></li><li><p>Decoder：輸入潛在空間，輸出生成影像。</p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># defining the encoder</span></span><br><span class="line">x = Input(shape=(original_dim,), name=<span class="string">"input"</span>)</span><br><span class="line">h = Dense(intermediate_dim, activation=<span class="string">'relu'</span>, name=<span class="string">"encoding"</span>)(x)</span><br><span class="line"><span class="comment"># mean of the latent space</span></span><br><span class="line">z_mean = Dense(latent_dim, name=<span class="string">"mean"</span>)(h)</span><br><span class="line"><span class="comment"># log variance of the latent space</span></span><br><span class="line">z_log_var = Dense(latent_dim, name=<span class="string">"log-variance"</span>)(h)</span><br><span class="line">z = Lambda(sampling, output_shape=(latent_dim,))([z_mean, z_log_var])</span><br><span class="line">encoder = Model(x, [z_mean, z_log_var, z], name=<span class="string">"encoder"</span>)</span><br><span class="line">encoder.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment"># defining the decoder</span></span><br><span class="line">input_decoder = Input(shape=(latent_dim,), name=<span class="string">"decoder_input"</span>)</span><br><span class="line">decoder_h = Dense(intermediate_dim, activation=<span class="string">'relu'</span>, name=<span class="string">"decoder_h"</span>)(input_decoder)</span><br><span class="line">x_decoded = Dense(original_dim, activation=<span class="string">'sigmoid'</span>, name=<span class="string">"flat_decoded"</span>)(decoder_h)</span><br><span class="line">decoder = Model(input_decoder, x_decoded, name=<span class="string">"decoder"</span>)</span><br><span class="line">decoder.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment"># defining the VAE</span></span><br><span class="line"><span class="comment"># encoder return: [z_mean, z_log_var, z]</span></span><br><span class="line">output_combined = decoder(encoder(x)[<span class="number">2</span>])</span><br><span class="line">vae = Model(x, output_combined, name=<span class="string">"VAE"</span>)</span><br><span class="line">vae.summary()</span><br><span class="line">vae.compile(optimizer=<span class="string">'rmsprop'</span>, loss=vae_loss)</span><br></pre></td></tr></table></figure><h3 id="模型訓練"><a href="#模型訓練" class="headerlink" title="模型訓練"></a>模型訓練</h3><ul><li>VAE的輸出也是影像，所以fit()的Y參數要輸入影像資料而非數據標籤。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># load data</span></span><br><span class="line">(x_train, y_train), (x_test, y_test) = mnist.load_data()</span><br><span class="line">x_train = x_train.astype(<span class="string">'float32'</span>) / <span class="number">255.</span></span><br><span class="line">x_test = x_test.astype(<span class="string">'float32'</span>) / <span class="number">255.</span></span><br><span class="line">x_train = x_train.reshape((len(x_train), np.prod(x_train.shape[<span class="number">1</span>:])))  <span class="comment"># (60000, 784)</span></span><br><span class="line">x_test = x_test.reshape((len(x_test), np.prod(x_test.shape[<span class="number">1</span>:])))      <span class="comment"># (10000, 784)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># training</span></span><br><span class="line">vae.fit(x_train, x_train, shuffle=<span class="keyword">True</span>, epochs=epochs, batch_size=batch_size)</span><br></pre></td></tr></table></figure><h3 id="散點圖"><a href="#散點圖" class="headerlink" title="散點圖"></a>散點圖</h3><ul><li><p>測試資料經編碼後於潛在空間中的分佈情形</p></li><li><p>我另外畫出後續會用來採樣生成圖片的紅框區域<br>  <img src="https://i.imgur.com/21rENRi.png" alt></p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># display a 2D plot of the digit classes in the latent space</span></span><br><span class="line">x_test_encoded = encoder.predict(x_test, batch_size=batch_size)[<span class="number">0</span>]</span><br><span class="line">fig = plt.figure(figsize=(<span class="number">6</span>, <span class="number">6</span>))</span><br><span class="line">plt.scatter(x_test_encoded[:,<span class="number">0</span>], x_test_encoded[:,<span class="number">1</span>], c=y_test, cmap=<span class="string">'viridis'</span>)</span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="生成圖片"><a href="#生成圖片" class="headerlink" title="生成圖片"></a>生成圖片</h3><ul><li><p>使用<a href="https://numpy.org/doc/stable/reference/generated/numpy.linspace.html" target="_blank" rel="noopener">numpy.linspace()</a>生成區間(0.05, 0.95)的具有n個元素的等差數列，再由<a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.norm.html" target="_blank" rel="noopener">scipy.stats.norm.ppf()</a>轉換為常態累積分佈的<a href="https://zh.wikipedia.org/wiki/%E7%99%BE%E5%88%86%E4%BD%8D%E6%95%B0" target="_blank" rel="noopener">百分位數</a>，做為潛在空間取樣座標(grid_x, grid_y)。</p></li><li><p>取樣範圍區間：<a href="https://en.wikipedia.org/wiki/Standard_normal_table#Cumulative" target="_blank" rel="noopener">Z(0.05) = -1.645, z(0.95) = 1.645</a></p></li><li><p>反轉grid_x順序的圖片生成結果，對應散點圖的紅框範圍(原始範例會上下顛倒)<br>  <img src="https://i.imgur.com/elfnFuN.png" alt></p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># display a 2D manifold of the digits</span></span><br><span class="line">n = <span class="number">15</span>  <span class="comment"># figure with 15x15 digits</span></span><br><span class="line">digit_size = <span class="number">28</span></span><br><span class="line">figure = np.zeros((digit_size * n, digit_size * n))</span><br><span class="line"><span class="comment"># linearly spaced coordinates on the unit square were transformed through the inverse CDF (ppf) of the Gaussian</span></span><br><span class="line"><span class="comment"># to produce values of the latent variables z, since the prior of the latent space is Gaussian</span></span><br><span class="line">grid_x = norm.ppf(np.linspace(<span class="number">0.05</span>, <span class="number">0.95</span>, n))</span><br><span class="line">grid_y = norm.ppf(np.linspace(<span class="number">0.05</span>, <span class="number">0.95</span>, n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, yi <span class="keyword">in</span> (enumerate(grid_x)):</span><br><span class="line">    <span class="keyword">for</span> j, xi <span class="keyword">in</span> enumerate(grid_y):</span><br><span class="line">        z_sample = np.array([[xi, yi]])</span><br><span class="line">        x_decoded = decoder.predict(z_sample)</span><br><span class="line">        digit = x_decoded[<span class="number">0</span>].reshape(digit_size, digit_size)</span><br><span class="line">        figure[i * digit_size: (i + <span class="number">1</span>) * digit_size,</span><br><span class="line">               j * digit_size: (j + <span class="number">1</span>) * digit_size] = digit</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">plt.imshow(figure, cmap=<span class="string">'Greys_r'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>Ref. <a href="https://github.com/GANs-in-Action/gans-in-action" target="_blank" rel="noopener">https://github.com/GANs-in-Action/gans-in-action</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;範例程式研讀。
    
    </summary>
    
      <category term="Data Science" scheme="https://laplacetw.github.io/categories/Data-Science/"/>
    
    
      <category term="GAN" scheme="https://laplacetw.github.io/tags/GAN/"/>
    
      <category term="keras" scheme="https://laplacetw.github.io/tags/keras/"/>
    
      <category term="deep learning" scheme="https://laplacetw.github.io/tags/deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>iOS 捷徑製作：縮網址</title>
    <link href="https://laplacetw.github.io/ios-shortcut-tinyurl/"/>
    <id>https://laplacetw.github.io/ios-shortcut-tinyurl/</id>
    <published>2020-12-06T12:52:38.000Z</published>
    <updated>2020-12-07T05:31:22.154Z</updated>
    
    <content type="html"><![CDATA[<p>因為APP的系統版本支援問題，從iOS 11更新上iOS 14，研究了一下捷徑功能。<a id="more"></a></p><p><a href="https://support.apple.com/zh-tw/guide/shortcuts/welcome/ios" target="_blank" rel="noopener">捷徑</a>能做的事情很多，光是能在網頁執行自己編寫的JavaScript就很不得了…是危險的味道呢(pero，儘管網路上很容易就能找到一堆方便的腳本，甚至也有提供人們公開發佈捷徑腳本的網站。這就是為何iOS 13開始對捷徑內容審查變得嚴格(其實也只是要你按下允許不受信任的捷徑為個人行為背書)，而IBM Security的研究人員於2019年也曾提出警告<a href="https://www.zdnet.com/article/siri-shortcuts-can-be-abused-for-extortion-demands-malware-propagation/" target="_blank" rel="noopener">iOS捷徑可能被用於勒索攻擊</a>。</p><hr><p>要製作TinyURL縮址的話，得知道縮址的時候如何發出請求，在TinyURL首頁有個「Add TinyURL to your browser’s toolbar」的說明，這裡就提供了連結：</p><blockquote><p>tinyurl.com/create.php?url=</p></blockquote><ol><li><p>建立一個新捷徑 &gt; 點選右上角打開捷徑設定 &gt; 啟用「在分享表單中顯示」&gt; 「分享表單類型」設定為「文字＆URL」<br> <img src="https://i.imgur.com/46xfJ1k.png" alt></p></li><li><ul><li>新增動作 &gt; 「網頁」&gt; 「URL」&gt; 輸入下方網址，後面接變數「捷徑輸入」<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://tinyurl.com/create.php?url=</span><br></pre></td></tr></table></figure></li><li>新增動作 &gt; 「網頁」&gt; 「取得URL內容」</li><li>新增動作 &gt; 「文件」&gt; 「<span style="color:red">從RTF製作HTML</span>」(動作會自行填入變數「URL內容」取代「RTF」)<br><img src="https://i.imgur.com/z4ptJEb.png" alt></li></ul></li><li><ul><li>新增動作 &gt; 「文件」&gt; 「符合文字」&gt; 選擇變數「從HTML製作RTF」&gt; 輸入下方的Regex(Regular Expression)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(?&lt;=data-clipboard-text=<span class="string">").*(?="</span>&gt;&lt;small&gt;)</span><br></pre></td></tr></table></figure></li><li>新增動作 &gt; 「分享」&gt; 「拷貝到剪貼板」</li><li>新增動作 &gt; 「工序指令」&gt; 「退出捷徑」<br><img src="https://i.imgur.com/1yFJdId.png" alt></li></ul></li><li><p>點選「下一步」幫捷徑取個名字就完成了。接著使用瀏覽器開啟任意網頁，打開分享選單往下找就能看到方才製作的捷徑，也可以點選「編輯動作」&gt; 「加入喜好項目」來置頂捷徑。<br> <img src="https://i.imgur.com/jHcprZX.png" alt></p></li><li><p>點選執行縮網址捷徑，首次使用會詢問是否允許捷徑存取tinyurl.com這個網站(注意到「<span style="color:red">此捷徑將可傳送資料到這些網站</span>」了嗎？看不懂腳本在做什麼而使用它是有風險的)。按下允許後捷徑便會將正在瀏覽的網頁進行縮址，接著自動複製並關閉捷徑，然後就可以在任何地方貼上縮好的網址啦。<br> <img src="https://i.imgur.com/yHnHz2z.png" alt></p></li></ol><hr><p>備註：</p><ol><li>事實上我有嘗試要直接透過Regex比對HTML元素來找到縮好的網址，但「從URL內容製作HTML」的動作所輸出的變數卻是「從HTML製作RTF」…而直接比對「取得URL內容」的輸出也沒有結果，該動作的說明寫著「對於下載檔案和網頁內容或提出API要求十分有效」啊啊啊🤪</li><li>關於捷徑中所使用的Regex語法似乎有些特別，我在Reddit找到一篇不錯的參考：<a href="https://www.reddit.com/r/shortcuts/comments/b5labq/match_text_examples_for_the_beginner_a_regex/" target="_blank" rel="noopener">Match Text Examples for the Beginner – A Regex Cookbook and Primer for Siri Shortcuts</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因為APP的系統版本支援問題，從iOS 11更新上iOS 14，研究了一下捷徑功能。
    
    </summary>
    
      <category term="iOS" scheme="https://laplacetw.github.io/categories/iOS/"/>
    
    
      <category term="ios" scheme="https://laplacetw.github.io/tags/ios/"/>
    
      <category term="shortcuts" scheme="https://laplacetw.github.io/tags/shortcuts/"/>
    
  </entry>
  
  <entry>
    <title>Zsh安裝和VS Code顯示設定</title>
    <link href="https://laplacetw.github.io/mac-zsh-and-vscode/"/>
    <id>https://laplacetw.github.io/mac-zsh-and-vscode/</id>
    <published>2020-11-15T13:48:44.000Z</published>
    <updated>2020-11-26T08:58:59.906Z</updated>
    
    <content type="html"><![CDATA[<p>順便筆記一下安裝指令。<a id="more"></a></p><h3 id="Install-Oh-My-Zsh"><a href="#Install-Oh-My-Zsh" class="headerlink" title="Install Oh My Zsh"></a>Install Oh My Zsh</h3><p>參考<a href="https://mrmad.com.tw/macos-terminal-oh-my-zsh" target="_blank" rel="noopener">瘋先生MRMAD的快速教學</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br><span class="line">$ vim ~/.zshrc  <span class="comment"># change ZSH_THEME as "agnoster"</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'syntax on'</span> &gt;&gt; ~/.vimrc  <span class="comment"># enable syntax highlight</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'set nu!'</span> &gt;&gt; ~/.vimrc    <span class="comment"># enable line numbers</span></span><br><span class="line">$ <span class="built_in">source</span> ~/.zshrc  <span class="comment"># make changes reload</span></span><br></pre></td></tr></table></figure><p>安裝、設定完成會發現Terminal顯示亂碼的情形，因為agnoster主題包含特殊符號，需安裝Powerline系列字體才能正常顯示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/Downloads &amp;&amp; git <span class="built_in">clone</span> https://github.com/powerline/fonts.git</span><br><span class="line">$ <span class="built_in">cd</span> fonts &amp;&amp; ./install.sh</span><br><span class="line">$ <span class="built_in">cd</span> &amp;&amp; rm -rf ~/Downloads/fonts</span><br></pre></td></tr></table></figure></p><p>接著打開Terminal偏好設定 &gt; 描述檔 &gt; 字體，變更為Powerline系列的字體。我是用Source Code Pro for Powerline，另外路徑的背景顏色預設會有過深的問題，可以調整ANSI顏色選項的藍色部分為淺一點的顏色。</p><p>＊<span style="color:red;">on my sh默認設定檔為~/.zshrc</span>，若原本bash設定檔是寫在~/.bash_profile，則須在zshrc中寫入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f ~/.bash_profile ]; <span class="keyword">then</span></span><br><span class="line">  . ~/.bash_profile</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><h3 id="VS-Code-Integrated-Terminal"><a href="#VS-Code-Integrated-Terminal" class="headerlink" title="VS Code Integrated Terminal"></a>VS Code Integrated Terminal</h3><p>Terminal顯示亂碼在VS Code裡頭也會見到，同樣要修改字體為Powerline系列字體：設定 &gt; 功能 &gt; 終端機 &gt; Integrated: Font Family。</p><p>顏色設定可以在設定中搜尋workbench，找到Workbench: Color Customizations的選項，點選「在settings.json內編輯」，相關參數設定可參考VS Code官網的說明：<a href="https://code.visualstudio.com/api/references/theme-color#integrated-terminal-colors" target="_blank" rel="noopener">Integrated Terminal Colors</a></p><p><img src="https://i.imgur.com/yn3BTug.png" alt></p><p>不過我另外有找到一個設定檔的<a href="https://github.com/Tyriar/vscode-snazzy" target="_blank" rel="noopener">懶人包</a>，或許可以直接套用，再來做調整比較省事 😄</p><p><img src="https://i.imgur.com/Fuw8S8v.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;順便筆記一下安裝指令。
    
    </summary>
    
      <category term="Mac" scheme="https://laplacetw.github.io/categories/Mac/"/>
    
    
      <category term="mac" scheme="https://laplacetw.github.io/tags/mac/"/>
    
      <category term="vs code" scheme="https://laplacetw.github.io/tags/vs-code/"/>
    
  </entry>
  
  <entry>
    <title>Manjaro安裝VirtualBox</title>
    <link href="https://laplacetw.github.io/linux-manjaro-virtualbox/"/>
    <id>https://laplacetw.github.io/linux-manjaro-virtualbox/</id>
    <published>2020-11-15T12:35:00.000Z</published>
    <updated>2020-11-15T13:33:42.003Z</updated>
    
    <content type="html"><![CDATA[<p>因為某堂課程的作業需要M$環境…<a id="more"></a>就為了操作檔案加密，我本來挖出了退役的舊筆電，結果它是Windows 7家用版，無法使用那該死的檔案加密功能！只好裝起虛擬機 🤬</p><h4 id="Enabling-Virtualisation"><a href="#Enabling-Virtualisation" class="headerlink" title="Enabling Virtualisation"></a>Enabling Virtualisation</h4><p>在安裝VirtualBox之前，必須先進BIOS檢查，確定有啟用CPU虛擬化，否則會跳出VERR_SVM_DIABLED錯誤。</p><h4 id="Install-VirtualBox"><a href="#Install-VirtualBox" class="headerlink" title="Install VirtualBox"></a>Install VirtualBox</h4><p>我們會需要安裝virtualbox和host modules，後者得根據系統核心來安裝對應的版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># check the version of Linux kernel</span></span><br><span class="line">$ mhwd-kernel -li</span><br><span class="line">Currently running: 4.19.126-1-MANJARO (linux419)</span><br><span class="line">The following kernels are installed <span class="keyword">in</span> your system:</span><br><span class="line">   * linux419</span><br></pre></td></tr></table></figure></p><p>執行系統更新並根據系統核心版本安裝virtualbox：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &#123;KERNEL_VERSION&#125;-virtualbox-host-modules</span></span><br><span class="line">$ sudo pacman -Syu virtualbox linux419-virtualbox-host-modules</span><br></pre></td></tr></table></figure></p><p>如果有跑系統更新，建議安裝完成後重新啟動。或手動將virtualbox載入系統核心：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vboxreload</span><br></pre></td></tr></table></figure></p><p>確認VirtualBox版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vboxmanage --version</span><br><span class="line">6.1.16r140961</span><br></pre></td></tr></table></figure></p><h4 id="Host-Config"><a href="#Host-Config" class="headerlink" title="Host Config"></a>Host Config</h4><p>在啟動virtualbox之前，還要將自己的系統帳號加入vboxusers使用者群組才行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gpasswd -a &#123;USERNAME&#125; vboxusers</span><br></pre></td></tr></table></figure></p><p>記得登出或重啟系統以使帳號設定變更生效，然後就可以啟動virtualbox啦：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ virtualbox</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/qf6bNsr.png" alt><br><img src="https://i.imgur.com/gO2vZqD.png" alt></p><p>Ref. <a href="https://wiki.manjaro.org/index.php/VirtualBox" target="_blank" rel="noopener">https://wiki.manjaro.org/index.php/VirtualBox</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因為某堂課程的作業需要M$環境…
    
    </summary>
    
      <category term="Linux" scheme="https://laplacetw.github.io/categories/Linux/"/>
    
    
      <category term="linux" scheme="https://laplacetw.github.io/tags/linux/"/>
    
      <category term="manjaro" scheme="https://laplacetw.github.io/tags/manjaro/"/>
    
  </entry>
  
  <entry>
    <title>Travis CI使用設置</title>
    <link href="https://laplacetw.github.io/sofdev-travis-ci/"/>
    <id>https://laplacetw.github.io/sofdev-travis-ci/</id>
    <published>2020-10-03T06:40:57.000Z</published>
    <updated>2020-10-03T08:13:31.009Z</updated>
    
    <content type="html"><![CDATA[<p>以Python Project為例。<a id="more"></a></p><p>說到和Github搭配的自動建置測試工具，第一個想到的應該就是Travis CI了，測試的部分我使用<a href="https://docs.pytest.org/en/stable/index.html" target="_blank" rel="noopener">pytest</a>來寫。那麼就先到<a href="(https://travis-ci.org/">Travis CI</a>註冊帳號吧，直接使用Github帳號登入，方便從Github倉庫直接加入專案。</p><p><img src="https://i.imgur.com/mIbm9Ul.png" alt></p><p>測試時若需要環境變數可以在設定頁面加入⬇︎<br><img src="https://i.imgur.com/n8PM94F.png" alt></p><p>接著要在專案根目錄新增一個名稱為 .travis.yml的檔案，這是Travis CI進行建置測試時的腳本。以下是我參考<a href="https://docs.travis-ci.com/user/languages/python/" target="_blank" rel="noopener">官方文件</a>所寫的 .travis.yml內容：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">python</span></span><br><span class="line"><span class="attr">python:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"3.5"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"3.6"</span>      <span class="comment"># current default Python on Travis CI</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"3.7"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"3.8"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"nightly"</span>  <span class="comment"># nightly build</span></span><br><span class="line"><span class="comment"># command to install dependencies</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">pip</span> <span class="string">install</span> <span class="bullet">-r</span> <span class="string">requirements.txt</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">pytest</span></span><br><span class="line"><span class="comment"># command to run tests</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">pytest</span></span><br></pre></td></tr></table></figure></p><p>由上面的測試腳本內容可以看到，Travis CI會依照python區塊所設定，建置Python 3.5~3.8加上<a href="https://docs.travis-ci.com/user/languages/python/#nightly-build-support" target="_blank" rel="noopener">nightly</a>等5個版本的測試環境，進行測試之前會依照install區塊的指令安裝依賴套件，script區塊則是運行測試相關的指令設定，若是有設定環境變數，則必須在此區塊設定「export {var_name}=${env_var_name}」，如此便能在測試程式碼中透過var_name取得環境變數。</p><p>上述設定完成後，只要推送更新到Github，便會觸發Travis CI進行自動建置測試，建置結果也會發信通知我們。<del>然後我的Telegrambot就會因為測試而發送一堆訊息給我。</del><br><img src="https://i.imgur.com/Tkail1B.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以Python Project為例。
    
    </summary>
    
      <category term="Software Dev" scheme="https://laplacetw.github.io/categories/Software-Dev/"/>
    
    
      <category term="python" scheme="https://laplacetw.github.io/tags/python/"/>
    
      <category term="travis ci" scheme="https://laplacetw.github.io/tags/travis-ci/"/>
    
  </entry>
  
  <entry>
    <title>Python:&amp;nbsp;Sphinx ＆ ReadTheDocs</title>
    <link href="https://laplacetw.github.io/python-sphinx-and-readthedocs/"/>
    <id>https://laplacetw.github.io/python-sphinx-and-readthedocs/</id>
    <published>2020-10-01T07:19:00.000Z</published>
    <updated>2020-10-04T08:46:54.425Z</updated>
    
    <content type="html"><![CDATA[<p>當我認真想為個人專案寫文件的時候，於是想到了Sphinx，<a id="more"></a>雖然還是對路徑設定感到有點苦惱，但自動生成文件真的很香，尤其是託管到Read The Docs還能和Github連動，只要推送更新到Github就會觸發自動建置。</p><h3 id="Sphinx"><a href="#Sphinx" class="headerlink" title="Sphinx"></a>Sphinx</h3><p></p><p>總之Sphinx就是能自動生成文件的工具，只要在原始碼中使用<a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html" target="_blank" rel="noopener">reStructuredText</a>或<a href="https://www.sphinx-doc.org/en/master/usage/markdown.html" target="_blank" rel="noopener">Markdown</a>語法來撰寫文件內容。</p><p>官方入門指南：<a href="https://www.sphinx-doc.org/en/master/usage/quickstart.html" target="_blank" rel="noopener">Sphinx Quick Start</a></p><ol><li><p>安裝：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install Sphinx</span><br></pre></td></tr></table></figure></li><li><p>快速啟用：<br> 首先在文件的根目錄建立doc、src兩個資料夾，分別用來放建置文件和原始碼。Sphinx內建sphinx-quickstart腳本，可引導使用者快速完成基本設定：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> doc</span><br><span class="line">$ sphinx-quickstart</span><br></pre></td></tr></table></figure><p> 這裡選擇獨立的原始碼和建置目錄⬇︎<br> <img src="https://i.imgur.com/XowPf8k.png" alt></p><p> 接著腳本會引導使用者設定文件名稱、版本號、作者等資訊，設定完成後的目錄結構：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── doc</span><br><span class="line">│   ├── Makefile</span><br><span class="line">│   ├── build</span><br><span class="line">│   ├── make.bat</span><br><span class="line">│   └── <span class="built_in">source</span></span><br><span class="line">│       ├── _static</span><br><span class="line">│       ├── _templates</span><br><span class="line">│       ├── conf.py</span><br><span class="line">│       └── index.rst</span><br><span class="line">└── src</span><br></pre></td></tr></table></figure><p> 從上面的目錄結構可以看到，doc目錄下有自動建置的指令檔，source目錄中則是文件相關的資源檔，包含靜態檔案、設定檔conf.py以及首頁index.rst。</p></li><li><p>conf.py基本設定：</p><ul><li><p>原始碼路徑：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- Path setup --------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If extensions (or modules to document with autodoc) are in another directory,</span></span><br><span class="line"><span class="comment"># add these directories to sys.path here. If the directory is relative to the</span></span><br><span class="line"><span class="comment"># documentation root, use os.path.abspath to make it absolute, like shown here.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.insert(<span class="number">0</span>, os.path.abspath(<span class="string">'../../src'</span>))</span><br></pre></td></tr></table></figure><p>路徑不能亂設定，例如<a href="https://stackoverflow.com/questions/20251007/sphinx-and-relative-imports-in-python-3" target="_blank" rel="noopener">將package目錄直接設定為原始碼路徑</a>，然後就導致各種import error然後文件建置失敗😅</p></li><li><p>一般設定</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- General configuration ---------------------------------------------------</span></span><br><span class="line">master_doc = <span class="string">'index'</span>  <span class="comment"># main page: index.rst</span></span><br><span class="line">autodoc_member_order = <span class="string">'bysource'</span>  <span class="comment"># optional</span></span><br></pre></td></tr></table></figure><p>如果不希望autodoc自動對member排序就設定為’bysource’。</p></li><li><p>擴充功能</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Add any Sphinx extension module names here, as strings. They can be</span></span><br><span class="line"><span class="comment"># extensions coming with Sphinx (named 'sphinx.ext.*') or your custom</span></span><br><span class="line"><span class="comment"># ones.</span></span><br><span class="line">extensions = [<span class="string">'sphinx.ext.autodoc'</span>]</span><br></pre></td></tr></table></figure></li><li><p>佈景主題</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The theme to use for HTML and HTML Help pages.  See the documentation for</span></span><br><span class="line"><span class="comment"># a list of builtin themes.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">html_theme = <span class="string">'alabaster'</span>  <span class="comment"># default</span></span><br></pre></td></tr></table></figure><p>更多主題：<a href="https://www.sphinx-doc.org/en/master/usage/theming.html" target="_blank" rel="noopener">Sphinx Doc / Theming</a></p></li></ul></li><li><p>index.rst主頁設定：<br> 打開index.rst會看到標題和toctree目錄設定，.rst也就是reStructuredText格式的文件，因此文件的每一個頁面都會有一個.rst檔，按需求自行新增。假設我有index.rst和mod_a.rst兩個頁面，那麼toctree目錄設定應該長這樣：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.. toctree::</span><br><span class="line">    :maxdepth: 2</span><br><span class="line">    :caption: Contents:</span><br><span class="line"></span><br><span class="line">    mod_a</span><br></pre></td></tr></table></figure><p> *注意空格、縮排以及不需要寫出.rst檔名後綴</p><p> 如此在生成文件的時候，首頁目錄就會有mod_a這個頁面，而mod_a頁面內容就在mod_a.rst檔案中撰寫、定義。</p></li><li><p>autodoc：<br> 語法參考：<a href="https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#module-sphinx.ext.autodoc" target="_blank" rel="noopener">sphinx.ext.autodoc</a></p><p> 簡單舉例，假設上述的mod_a.rst對應到原始碼src/proj/mod_a.py這個模組，那麼mod_a.py可能定義了一些類別或方法，則mod_a.rst的內容除了標題和一些說明文字，autodoc的設定應該長這樣：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.. automodule:: proj.mod_a</span><br><span class="line">    :members:</span><br></pre></td></tr></table></figure><p> 如此audodoc便會自動將模組中的成員引入mod_a.rst頁面，包含以reStructuredText語法所撰寫的註解！例如：</p> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    write reStructuredText here</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        write reStructuredText here</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>make：<br> 當上述的文件內容都撰寫好了，就可以使用自動建置指令來生成文件：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make clean  <span class="comment"># Delete the build cache before building documents</span></span><br><span class="line">$ make html</span><br></pre></td></tr></table></figure><p> 建置完成的html檔會在/doc/build目錄下。</p><p> Sphinx文件實例，供參考：<a href="https://github.com/laplacetw/botlegram-doc" target="_blank" rel="noopener">laplacetw/botlegram-doc</a></p></li></ol><h3 id="Read-The-Docs"><a href="#Read-The-Docs" class="headerlink" title="Read The Docs"></a>Read The Docs</h3><p></p><p>生成了文件後若打算公開發佈，可以使用<a href="https://readthedocs.org/" target="_blank" rel="noopener">Read The Docs</a>這個基於Sphinx的免費文件託管服務，註冊帳號後，建議與版本控制服務例如Github連動，如此便可以直接從Github匯入我們的Sphinx專案來建立一個Read The Docs專案，之後只要推送更新到Github，那麼Read The Docs便會自動建置更新我們的線上文件了。</p><p><img src="https://i.imgur.com/DhpdU4O.png" alt></p><p>Read The Docs線上文件實例，供參考：<a href="https://botlegram.readthedocs.io/" target="_blank" rel="noopener">https://botlegram.readthedocs.io/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;當我認真想為個人專案寫文件的時候，於是想到了Sphinx，
    
    </summary>
    
      <category term="Python" scheme="https://laplacetw.github.io/categories/Python/"/>
    
    
      <category term="python" scheme="https://laplacetw.github.io/tags/python/"/>
    
      <category term="sphinx" scheme="https://laplacetw.github.io/tags/sphinx/"/>
    
      <category term="readthedocs" scheme="https://laplacetw.github.io/tags/readthedocs/"/>
    
  </entry>
  
  <entry>
    <title>拋棄繼承聲請記事</title>
    <link href="https://laplacetw.github.io/asserting-waived-succession/"/>
    <id>https://laplacetw.github.io/asserting-waived-succession/</id>
    <published>2020-09-30T04:53:07.000Z</published>
    <updated>2020-10-29T16:33:43.753Z</updated>
    
    <content type="html"><![CDATA[<p>總算處理完所有必要文件順利送到郵局了，但遇到中秋連假，所以下週才會寄出。<a id="more"></a>儘管我仍無法理解人生怎麼會突然就稀巴爛，然後一轉眼便是十年，我仍在收拾殘局，然而有人卻已匆匆謝幕。看著戶籍謄本思索了幾秒，人生就只是這樣呢，我們終究都要化為記事欄裡頭的幾行字，但就是有人過得辛苦，有人過得舒服。</p><p>一樣米養百樣人，若是遇到豬隊友，為免夜長夢多、債留子孫，繼承這事可就得審慎處理。雖然在2009年民法繼承編修訂後已採「當然限定繼承」，不用再向法院聲請，繼承人僅需繼承所得的遺產為限，負清償責任。但在我和具法律專業背景友人詢問後，了解到限定繼承需開具遺產清冊陳報法院這件事，光想就覺得麻煩，更何況以我自身而言，只求別再受前人債務拖累、斷送餘生，所以說還是乾脆點聲明拋棄繼承。</p><h3 id="相關法條"><a href="#相關法條" class="headerlink" title="相關法條"></a>相關法條</h3><p></p><p><a href="(https://law.moj.gov.tw/LawClass/LawParaDeatil.aspx?pcode=B0000001&amp;bp=126">民法第五編：繼承</a></p><p><a href="https://law.moj.gov.tw/LawClass/LawSingle.aspx?pcode=B0000001&amp;flno=1138" target="_blank" rel="noopener">民法第1138條</a>：</p><blockquote><p>「遺產繼承人，除配偶外，依左列順序定之：</p><ul><li>一、直系血親卑親屬。</li><li>二、父母。</li><li>三、兄弟姊妹。</li><li>四、祖父母。</li></ul></blockquote><p><a href="https://law.moj.gov.tw/LawClass/LawSingle.aspx?PCODE=B0000001&amp;FLNO=1147" target="_blank" rel="noopener">民法第1147條</a>：</p><blockquote><p>「繼承，因被繼承人死亡而開始。」</p></blockquote><p><a href="https://law.moj.gov.tw/LawClass/LawSingle.aspx?pcode=B0000001&amp;flno=1148" target="_blank" rel="noopener">民法第1148條</a>：</p><blockquote><p>「繼承人自繼承開始時，除本法另有規定外，承受被繼承人財產上之一切權利、義務。但權利、義務專屬於被繼承人本身者，不在此限。<font color="red">繼承人對於被繼承人之債務，以因繼承所得遺產為限，負清償責任。</font>」</p></blockquote><p><a href="https://law.moj.gov.tw/LawClass/LawSingle.aspx?pcode=B0000001&amp;flno=1153" target="_blank" rel="noopener">民法第1153條</a>：</p><blockquote><p>「<font color="red">繼承人對於被繼承人之債務，以因繼承所得遺產為限，負連帶責任。</font>繼承人相互間對於被繼承人之債務，除法律另有規定或另有約定外，按其應繼分比例負擔之。」</p></blockquote><p><a href="https://law.moj.gov.tw/LawClass/LawSingle.aspx?PCODE=B0000001&amp;FLNO=1174" target="_blank" rel="noopener">民法第1174條</a>：</p><blockquote><p>「繼承人得拋棄其繼承權。前項拋棄，應於<font color="red">知悉其得繼承之時起三個月內</font>，以書面向法院為之。<font color="red">拋棄繼承後，應以書面通知因其拋棄而應為繼承之人</font>。但不能通知者，不在此限。」</p></blockquote><p><a href="https://law.moj.gov.tw/LawClass/LawSingle.aspx?PCODE=B0000001&amp;FLNO=1175" target="_blank" rel="noopener">民法第1175條</a>：</p><blockquote><p>「繼承之拋棄，溯及於繼承開始時發生效力。」</p></blockquote><p><a href="https://law.moj.gov.tw/LawClass/LawSingle.aspx?pcode=B0000001&amp;flno=1176" target="_blank" rel="noopener">民法第1176條 部分條文</a>：</p><blockquote><p>「因他人拋棄繼承而應為繼承之人，為拋棄繼承時，<font color="red">應於知悉其得繼承之日起三個月內為之。</font>」</p></blockquote><h3 id="辦理拋棄繼承"><a href="#辦理拋棄繼承" class="headerlink" title="辦理拋棄繼承"></a>辦理拋棄繼承</h3><p></p><p><br>根據我在網路上搜集到的資料，各地方法院的聲請書格式或規定似乎有些微差異(白眼，所以要辦理拋棄繼承的第一件事，便是先確認「被繼承人戶籍所在地之管轄法院」，這樣你才知道該去哪下載聲請書的格式。但網路下載的格式可能會因為疏於更新而過舊，像我<del>這樣超TUEEE的勇者</del>總是比較謹慎的，當然是直接跑去法院購買紙本格式最保險。拋棄繼承聲請要在得知繼承事實發生的那一刻算起三個月內提出，聲請費用為1000塊，一個人聲請或全家一起聲請都是相同費用，若採用郵寄的方式則檢附1000塊郵政匯票，受款人為管轄法院。</p><p>＊若管轄法院在臺北、臺中、臺南、臺東之類的名字有「臺」的縣市，要寫繁體的「臺」，而且必須寫全稱，例如「臺灣臺南地方法院」。</p><p>供參考：<a href="https://tnd.judicial.gov.tw/doc/%AEa%A8%C6/%A9%DF%B1%F3%C4~%A9%D3%C1n%BD%D0%AA%AC.pdf" target="_blank" rel="noopener">臺南地方法院拋棄繼承聲請書格式</a></p><p>接著依照聲請書裡頭的格式依序填寫拋棄繼承書狀、繼承系統表、繼承權拋棄書，至於通知書跟收據我就沒用到了，因為我是寄存證信函通知下一順位的繼承人。</p><p>再來就是取得辦理拋棄繼承應檢附的資料：</p><ol><li><a href="https://www.ris.gov.tw/app/portal/741" target="_blank" rel="noopener">印鑑證明</a>：滿7歲之聲請人，如聲請人未滿20歲另應有法定代理人(父母皆須有)或監護人之印鑑證明；受拋棄繼承通知之人如以本狀第六頁收據蓋印鑑證明章表明已收受，亦須提供。</li><li>印鑑證明章：印鑑證明章如在本狀第三頁已蓋印完畢，可供法院核對之狀況下，則可不必攜章至本院(請聲請人自行判斷蓋印是否清楚)。</li><li>戶籍謄本：被繼承人除戶戶籍謄本、死者配偶(死者死亡時仍與其有婚姻關係之人；已往生者亦需要)、聲請人、聲請人之法定代理人(或有監護權之人)、同繼承順位未拋棄之人、第一繼承順位已先死者及其子女，或同繼承順位均拋棄而下一繼承順位之人(已往生者亦需要，如下一順位繼承人均已往生，則下下順位之繼承人亦需要，比如第一順位均拋棄，第二順位均往生，則要提供第三順位繼承人之戶謄)均需提供一份，該些人員有同戶籍者可提供全戶一份。</li></ol><p>我是用郵寄方式進行聲請，只要確認書狀聲請人印鑑用印清晰可辨識即可，不需要印鑑證明章。</p><p>＊聲請人如為胎兒，應附上媽媽手冊封面、第一次產檢、最新產檢等文件之影本。<br>＊<font color="red">戶籍謄本記事欄不可省略</font>。</p><p><img src="https://i.imgur.com/DYTMqFI.jpg" alt></p><p>處理到這就差存證信函影本了(通知其他順位繼承人之證明書)。</p><h3 id="撰寫存證信函"><a href="#撰寫存證信函" class="headerlink" title="撰寫存證信函"></a>撰寫存證信函</h3><p></p><p><br>存證信函需要「N+2」份，N是收件人的人數，+2則是自己和郵局都會留存一份副本，<font color="red">正本ㄧ定要寄出去千萬不要自己留著做紀念</font>，而我們留存的副本就影印一份檢附在聲請書中一併送交法院辦理。一開始我還傻傻的跑去郵局說要買存證信函用紙，然後郵局人員就拿出長得像中學生考試用紙的東東，而且那紙張還超薄…後來郵局人員就說可以上網<a href="https://www.post.gov.tw/post/internet/Download/index.jsp?ID=220301" target="_blank" rel="noopener">下載格式</a>以電腦繕打後複印，然後我就說不買了😅 </p><p>多位寄件人或多位收件人相同住址則可以寫在一起，例如：</p><p>寄件人：XXX、YYY<br>詳細住址：xxxxxxxxxxxxxxxxx</p><p>如果人丁興旺寫不下(?)，網路上的參考資料是建議可以直接註記「如附件」，然後把寄件者跟收件者都條列在附件。但也有人遇到<a href="https://home.gamer.com.tw/creationDetail.php?sn=4560024" target="_blank" rel="noopener">部份郵局不接受附件</a>的情形，可能要先詢問自家附近的郵局進行確認。</p><p><img src="https://i.imgur.com/HJdkBMW.png" alt></p><p>至於內文的部分，我是直接參考聲請書的範例去寫：</p><blockquote><p>寄件人XXX、YYY，因被繼承人ZZZ於民國YY年MM月DD日亡故，對其遺產，依法有繼承權。茲出於寄件人自由意思，爰依民法第一一七四條規定拋棄繼承權，全部遺產由收件人繼承，絕無異議，特此通知。</p></blockquote><p>我建議存證信函撰寫完<font color="red">先轉為PDF格式再列印</font>，避免發生部分文字跑版，因為我使用超商雲端列印，然後下方的合計區塊文字就變成一坨இдஇ</p><p>＊存證信函是採雙掛號方式郵寄，如果有先到郵局買信封可以先索取雙掛號回執拿回去先填寫，到時候要去寄才不會搞太久。<br>＊存證信函撰寫完列印出來後，<font color="red">寄件人要在每一份存證信函上簽名或蓋章</font>。</p><h3 id="送件"><a href="#送件" class="headerlink" title="送件"></a>送件</h3><p></p><p><br>當聲請書、檢附資料以及存證信函這三件事都處理好，將自己留存的存證信函副本影印，就可以將聲請書、存證信函影本以及其他檢附資料一起寄出了。法院收件受理後，若有需要補費、補件、聲請准許或駁回，都會以掛號通知各聲請人，倘若收到「拋棄繼承准予核備函」就代表聲請核准囉。</p><p>2020/09/30：送件中</p><p>2020/10/05：送達法院</p><p>2020/10/22：聲請通過，法院發文通知「本件拋棄繼承權准予備查」</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;總算處理完所有必要文件順利送到郵局了，但遇到中秋連假，所以下週才會寄出。
    
    </summary>
    
      <category term="Daily" scheme="https://laplacetw.github.io/categories/Daily/"/>
    
    
      <category term="civil law" scheme="https://laplacetw.github.io/tags/civil-law/"/>
    
      <category term="waived succession" scheme="https://laplacetw.github.io/tags/waived-succession/"/>
    
  </entry>
  
  <entry>
    <title>Python:字典排序</title>
    <link href="https://laplacetw.github.io/pyhton-sort-dict-by-value/"/>
    <id>https://laplacetw.github.io/pyhton-sort-dict-by-value/</id>
    <published>2020-09-29T12:30:02.000Z</published>
    <updated>2020-09-29T16:38:19.646Z</updated>
    
    <content type="html"><![CDATA[<p>有時候會需要依據dict value來排序，嗯，就是會有這種時候(´･_･`)<a id="more"></a> 話說我看了官方文件才發現，從Python 3.6開始依據<a href="https://www.python.org/dev/peps/pep-0468/" target="_blank" rel="noopener">PEP 468</a>將保留**kwargs的順序，所以現在dict也是有序的呢(插入元素的順序)，而我開始學習Python的時候是3.5版。</p><p><br>假設有個dict長這樣：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">my_friend = &#123;</span><br><span class="line">    <span class="string">'Mike'</span>:&#123;<span class="string">'gender'</span>:<span class="string">'male'</span>, <span class="string">'age'</span>:<span class="number">25</span>&#125;, </span><br><span class="line">    <span class="string">'Emily'</span>:&#123;<span class="string">'gender'</span>:<span class="string">'female'</span>, <span class="string">'age'</span>:<span class="number">23</span>&#125;, </span><br><span class="line">    <span class="string">'John'</span>:&#123;<span class="string">'gender'</span>:<span class="string">'male'</span>, <span class="string">'age'</span>:<span class="number">30</span>&#125;, </span><br><span class="line">    <span class="string">'Ted'</span>:&#123;<span class="string">'gender'</span>:<span class="string">'male'</span>, <span class="string">'age'</span>:<span class="number">26</span>&#125;, </span><br><span class="line">    <span class="string">'Alice'</span>:&#123;<span class="string">'gender'</span>:<span class="string">'female'</span>, <span class="string">'age'</span>:<span class="number">29</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果想依據’age’來排序？ 利用lambda將sort key指定為dict value中的某個值來排序dict.items()：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sort_my_friend = sorted(my_friend.items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>][<span class="string">'age'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sort_my_friend</span><br><span class="line">[(<span class="string">'Emily'</span>, &#123;<span class="string">'gender'</span>: <span class="string">'female'</span>, <span class="string">'age'</span>: <span class="number">23</span>&#125;), (<span class="string">'Mike'</span>, &#123;<span class="string">'gender'</span>: <span class="string">'male'</span>, <span class="string">'age'</span>: <span class="number">25</span>&#125;), (<span class="string">'Ted'</span>, &#123;<span class="string">'gender'</span>: <span class="string">'male'</span>, <span class="string">'age'</span>: <span class="number">26</span>&#125;), (<span class="string">'Alice'</span>, &#123;<span class="string">'gender'</span>: <span class="string">'female'</span>, <span class="string">'age'</span>: <span class="number">29</span>&#125;), (<span class="string">'John'</span>, &#123;<span class="string">'gender'</span>: <span class="string">'male'</span>, <span class="string">'age'</span>: <span class="number">30</span>&#125;)]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有時候會需要依據dict value來排序，嗯，就是會有這種時候(´･_･`)
    
    </summary>
    
      <category term="Python" scheme="https://laplacetw.github.io/categories/Python/"/>
    
    
      <category term="python" scheme="https://laplacetw.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python:&amp;nbsp;install psycopg2 error</title>
    <link href="https://laplacetw.github.io/python-install-error-psycopg2/"/>
    <id>https://laplacetw.github.io/python-install-error-psycopg2/</id>
    <published>2020-09-20T05:21:32.000Z</published>
    <updated>2020-09-20T10:52:11.056Z</updated>
    
    <content type="html"><![CDATA[<p>啊啊，ERROR。<a id="more"></a></p><p>上一次安裝PostgreSQL是汰換Win 7筆電之前，這次在Mac OS安裝<a href="http://postgresapp.com/" target="_blank" rel="noopener">Postgres.app</a>，然後要安裝psycopg2的時候報錯了。</p><p>傻眼，我有些急用啊，你大哥請支援收銀好嗎？</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Error: pg_config executable not found.</span><br><span class="line"></span><br><span class="line">Please add the directory containing pg_config to the PATH</span><br><span class="line"></span><br><span class="line">(omitted...)</span><br><span class="line"></span><br><span class="line">ERROR: Command errored out with <span class="built_in">exit</span> status 1: python setup.py egg_info Check the logs <span class="keyword">for</span> full <span class="built_in">command</span> output.</span><br></pre></td></tr></table></figure><p>pip報錯說找不到pg_config路徑，要把Postgress.app的bin資料夾路徑加入環境變數，<a href="https://stackoverflow.com/questions/11618898/pg-config-executable-not-found#24684701" target="_blank" rel="noopener">參考stackoverflow上的討論</a>，於安裝時指定其路徑(Mac OS)：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=<span class="string">"/Applications/Postgres.app/Contents/Versions/latest/bin:<span class="variable">$PATH</span>"</span> pip install psycopg2</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/9Y96knz.png" alt></p><h5 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h5><p></p><p><br><a href="http://postgresguide.com/utilities/psql.html" target="_blank" rel="noopener">Psql Commonly used commands</a></p><p>\list: list databases<br>\dt : list tables in current DB<br>\d TABLE_NAME : list table columns<br>\x : enable expanded display (e.g. SELECT * FROM mytable LIMIT 10;)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;啊啊，ERROR。
    
    </summary>
    
      <category term="Python" scheme="https://laplacetw.github.io/categories/Python/"/>
    
    
      <category term="python" scheme="https://laplacetw.github.io/tags/python/"/>
    
      <category term="error" scheme="https://laplacetw.github.io/tags/error/"/>
    
      <category term="psycopg2" scheme="https://laplacetw.github.io/tags/psycopg2/"/>
    
      <category term="postgresql" scheme="https://laplacetw.github.io/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>Python:快速建立Telegram聊天機器人</title>
    <link href="https://laplacetw.github.io/python-botlegram/"/>
    <id>https://laplacetw.github.io/python-botlegram/</id>
    <published>2020-09-17T04:17:59.000Z</published>
    <updated>2020-10-03T04:25:41.363Z</updated>
    
    <content type="html"><![CDATA[<p>寫了一個套件，雖然現在還沒啥功能，只能發送文字和照片。<a id="more"></a>也不是只有搞了個套件，還嘗試了用<a href="https://www.sphinx-doc.org/en/master/" target="_blank" rel="noopener">Sphinx</a>自動產生文件然後托管到<a href="https://readthedocs.org/" target="_blank" rel="noopener">Read The Docs</a>，被autodoc路徑折騰了不少時間…這是另一段故事了。雖然現在才開始研究怎麼寫Telegram Bot，也有多種程式語言的現成框架可以用，但我不想要使用高度封裝的複雜框架，所以決定一邊學習Telegram Bot API，一邊完成這個套件，希望我有足夠的時間和心力 😌</p><h3 id="Botlegram"><a href="#Botlegram" class="headerlink" title="Botlegram"></a>Botlegram</h3><p></p><p>鏘！鏘！經過一番折騰終於發佈到Github上了，我希望能保持它的彈性，不要做多餘的事，它就只是一個Telegram Bot API的Python版本，所以功能函式命名也會盡可能地保持與<a href="https://core.telegram.org/bots/api#available-methods" target="_blank" rel="noopener">Telegram Bot API methods</a>一致。</p><ul><li>source code: <a href="https://github.com/laplacetw/botlegram" target="_blank" rel="noopener">Botlegram</a></li><li>online document: <a href="https://botlegram.readthedocs.io/" target="_blank" rel="noopener">Botlegram Doc</a></li></ul><h3 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h3><p></p><h5 id="準備工作："><a href="#準備工作：" class="headerlink" title="準備工作："></a>準備工作：</h5><ul><li>以下說明是以部署在Heroku為例，所以必須先準備一個<a href="https://www.heroku.com/" target="_blank" rel="noopener">Heroku帳號</a>，然後<a href="https://trailhead.salesforce.com/content/learn/projects/develop-heroku-applications/create-a-heroku-app" target="_blank" rel="noopener">建立一支APP</a></li><li>初次使用Heroku則必須先<a href="https://devcenter.heroku.com/articles/heroku-command-line" target="_blank" rel="noopener">安裝Heroku CLI</a></li><li>下載我預先準備的Telegram Bot懶人包: <a href="https://github.com/laplacetw/botlegram/files/5236011/echoBot.zip" target="_blank" rel="noopener">echo Bot</a></li><li>和Telegram官方帳號<a href="https://telegram.me/BotFather" target="_blank" rel="noopener">BotFather</a>進行對話 (取名叫Bot Father我覺得很有趣 😆&nbsp;)，按指示建立Bot取得專屬token，此token必須由你自己妥善保管，因為<font color="red">任何人都能使用這個token來控制你的Bot</font>。</li></ul><p><img src="https://i.imgur.com/wauvK7S.png" alt></p><h5 id="解壓縮懶人包echoBot-zip"><a href="#解壓縮懶人包echoBot-zip" class="headerlink" title="解壓縮懶人包echoBot.zip"></a>解壓縮懶人包echoBot.zip</h5><p>開啟app.py:</p><ul><li>your_bot_token替換成你的專屬token</li><li>your_host替換成你的Heroku App網址，請注意不可忽略的斜線<br>e.g. “<a href="https://APP_NAME.herokuapp.com/&quot;" target="_blank" rel="noopener">https://APP_NAME.herokuapp.com/&quot;</a></li></ul><h5 id="部署到Heroku"><a href="#部署到Heroku" class="headerlink" title="部署到Heroku"></a>部署到Heroku</h5><p>打開終端機依照下方指令操作，APP_NAME替換成你的Heroku App name<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> echoBot</span><br><span class="line">$ heroku login</span><br><span class="line">$ heroku git:remote -a APP_NAME</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -am <span class="string">"echo Bot"</span></span><br><span class="line">$ git push heroku master</span><br></pre></td></tr></table></figure></p><h5 id="確認與測試"><a href="#確認與測試" class="headerlink" title="確認與測試"></a>確認與測試</h5><p>部署成功的話，可以在Heroku的APP Logs頁面看到「Webhook is already set」<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Starting process with <span class="built_in">command</span> `gunicorn app:app`</span><br><span class="line">[INFO] Starting gunicorn 20.0.4</span><br><span class="line">[INFO] Listening at: http://0.0.0.0:10426 (4)</span><br><span class="line">[INFO] Using worker: sync</span><br><span class="line">[INFO] Booting worker with pid: 10</span><br><span class="line">[INFO] Booting worker with pid: 11</span><br><span class="line">State changed from starting to up</span><br><span class="line">* [Bot] Webhook is already <span class="built_in">set</span></span><br><span class="line">* [Bot] Webhook is already <span class="built_in">set</span></span><br></pre></td></tr></table></figure></p><p>打開Telegram和你的機器人對話，它應該會開始鸚鵡學舌囉 🐧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;寫了一個套件，雖然現在還沒啥功能，只能發送文字和照片。
    
    </summary>
    
      <category term="Python" scheme="https://laplacetw.github.io/categories/Python/"/>
    
    
      <category term="python" scheme="https://laplacetw.github.io/tags/python/"/>
    
      <category term="chatbot" scheme="https://laplacetw.github.io/tags/chatbot/"/>
    
      <category term="telegram" scheme="https://laplacetw.github.io/tags/telegram/"/>
    
  </entry>
  
  <entry>
    <title>在Heroku遠端主機控制瀏覽器</title>
    <link href="https://laplacetw.github.io/data-sci-heroku-selenium-chrome-driver/"/>
    <id>https://laplacetw.github.io/data-sci-heroku-selenium-chrome-driver/</id>
    <published>2020-09-06T10:01:30.000Z</published>
    <updated>2020-09-17T04:11:16.585Z</updated>
    
    <content type="html"><![CDATA[<p>如題。<a id="more"></a>最近在研究Telegram Bot API，雖然讀過文件知道許多語言都已經有不少第三方框架支援，基於某些應用目的不想被框架綁住，所以打算自己寫。然後我就耗了整整兩天，嘗試如何讓部署在Heroku上的Bot能順利使用headless browser擷取到我要的數據…。說也奇怪，本機執行是沒問題的，但在遠端主機就是一直丟出Timeout Error，原來遠端主機控制Chrome訪問目標網頁的時候總是遭遇某DDoS Protection服務所阻擋，但經過一番嘗試目前仍是應對不了這個情況，耗了好幾天…於是學到了windows.navigator.webdriver這個參數。</p><p>*假設Heroku APP已建立。</p><h3 id="Add-Config-Vars-amp-Buildpacks"><a href="#Add-Config-Vars-amp-Buildpacks" class="headerlink" title="Add Config Vars &amp; Buildpacks"></a>Add Config Vars &amp; Buildpacks</h3><p></p><p>在APP的Setting頁面，設定以下兩個環境變數：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CHROMEDRIVER_PATH = /app/.chromedriver/bin/chromedriver</span><br><span class="line">GOOGLE_CHROME_BIN = /app/.apt/usr/bin/google-chrome</span><br></pre></td></tr></table></figure></p><p>在APP的Setting頁面，設定以下兩個buildpack：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/heroku/heroku-buildpack-google-chrome</span><br><span class="line">https://github.com/heroku/heroku-buildpack-chromedriver</span><br></pre></td></tr></table></figure></p><p></p><p><br><img src="https://i.imgur.com/qOPtW4a.png" alt></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p></p><p>程式的部分，Chrome driver的參數會使用到上述所設定的環境變數。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_chrome</span><span class="params">()</span>:</span></span><br><span class="line">    op = webdriver.ChromeOptions()</span><br><span class="line">    op.binary_location = os.environ.get(<span class="string">"GOOGLE_CHROME_BIN"</span>)</span><br><span class="line">    op.add_argument(<span class="string">"--headless"</span>)</span><br><span class="line">    op.add_argument(<span class="string">"--disable-dev-shm-usage"</span>)</span><br><span class="line">    op.add_argument(<span class="string">"--no-sandbox"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    # avoid detection 好孩子先不要 ^.&lt;</span></span><br><span class="line"><span class="string">    op.add_argument('--disable-infobars')</span></span><br><span class="line"><span class="string">    op.add_experimental_option('useAutomationExtension', False)</span></span><br><span class="line"><span class="string">    op.add_experimental_option("excludeSwitches", ["enable-automation"])</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> webdriver.Chrome(executable_path=os.environ.get(<span class="string">"CHROMEDRIVER_PATH"</span>), options=op)</span><br></pre></td></tr></table></figure></p><h3 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h3><p></p><p>然後就可以進行部署使用了，Heroku APP會需要安裝許多依賴套件而增加100+MB的使用空間。</p><p>透過APP bash測試從證交所擷取上市股票代號一覽表⬇︎<br><img src="https://i.imgur.com/SrXtcYd.png" alt></p><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref."></a>Ref.</h3><p></p><p><br>＊<a href="https://www.andressevilla.com/running-chromedriver-with-python-selenium-on-heroku/" target="_blank" rel="noopener">Running ChromeDriver with Python Selenium on Heroku</a><br>＊<a href="https://selenium-python.readthedocs.io/" target="_blank" rel="noopener">Selenium 官方文件</a></p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p></p><p><br>關於動態網頁資料擷取的小技巧：雖然Selenium WebDriverWait提供explicit waits可等待指定頁面元素載入，但實際上並沒有這麼順利，不過這也是讓我覺得學習web crawler有趣的地方(儘管有時候很頭疼😖)。有時候會發生指定元素確實在頁面上載入完成了，但內容卻是空空如也，又或許是我慧根不夠用不好<a href="https://selenium-python.readthedocs.io/waits.html?highlight=WebDriverWait#explicit-waits" target="_blank" rel="noopener">text_to_be_present_in_element</a>，試了半天還是抓不到我要的數據。哭啊，我就是要擷取內容文字咩！只好換個方式等待：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"></span><br><span class="line">driver = get_chrome()</span><br><span class="line">driver.get(<span class="string">""</span>)</span><br><span class="line">is_text = <span class="keyword">lambda</span> driver: driver.find_element_by_css_selector(<span class="string">''</span>).text.strip() != <span class="string">''</span></span><br><span class="line">WebDriverWait(driver, <span class="number">30</span>, <span class="number">0.5</span>).until(is_text)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如題。
    
    </summary>
    
      <category term="Data Science" scheme="https://laplacetw.github.io/categories/Data-Science/"/>
    
    
      <category term="python" scheme="https://laplacetw.github.io/tags/python/"/>
    
      <category term="web crawler" scheme="https://laplacetw.github.io/tags/web-crawler/"/>
    
      <category term="heroku" scheme="https://laplacetw.github.io/tags/heroku/"/>
    
      <category term="selenium" scheme="https://laplacetw.github.io/tags/selenium/"/>
    
      <category term="chrome driver" scheme="https://laplacetw.github.io/tags/chrome-driver/"/>
    
  </entry>
  
  <entry>
    <title>2020 Medical AI Summer Camp</title>
    <link href="https://laplacetw.github.io/medical-AI-summer-camp-2020/"/>
    <id>https://laplacetw.github.io/medical-AI-summer-camp-2020/</id>
    <published>2020-09-01T13:57:37.000Z</published>
    <updated>2020-09-01T15:22:55.932Z</updated>
    
    <content type="html"><![CDATA[<p>學校信箱每天都會收到一堆讓人想直接刪除的信，但我還是會讀完主旨再刪除(?)，畢竟偶爾還是會有不錯的資訊，例如免費的研習…和便當。<a id="more"></a>此研習為科技部補助學校成立的AI生醫創新研究中心所舉辦，報名人數竟然多到要加開教室用視訊連線。</p><p>議程：</p><table><thead><tr><th style="text-align:center">08/31</th><th style="text-align:center">09/01</th></tr></thead><tbody><tr><td style="text-align:center">淺談機器學習與深度學習</td><td style="text-align:center">雲端人工智慧在醫學影像的應用</td></tr><tr><td style="text-align:center">人工智慧於生理計算之應用—訊號篇</td><td style="text-align:center">人工智慧與自然語言處理概述—以台語在醫療服務之應用為例</td></tr><tr><td style="text-align:center">人工智慧於生理計算之應用—影像篇</td><td style="text-align:center">AWS雲端資源分享</td></tr><tr><td style="text-align:center">快速掌握「雲端運算」</td><td style="text-align:center">AWS AI/ML工具與應用</td></tr></tbody></table><p>說實話我並沒有特別期待議題的深度，畢竟講者還是要考量聽眾的程度做調整，如果講演算法或公式推導應該會睡成一片吧😂&nbsp;&nbsp;&nbsp;但我覺得第一天的「人工智慧於生理計算之應用」的內容非常豐富且淺顯易懂，講者分享了將人工智慧應用於肺部CT影像病灶辨識以及睡眠狀態偵測的實務經驗，真的很感謝講師分享如此珍貴的經驗，我想這都是需要投入不少時間跟資源去研究的。</p><p>而第二天竟然有AWS的市場拓展代表來介紹他們家的雲端運算服務，然後我才知道學校有加入AWS Educate，這還不光速註冊一波啊是不是😎&nbsp;&nbsp;&nbsp;聽完他們的簡報，對AWS的平台生態與產品線有較為廣泛的了解…真不愧是市佔龍頭，最後還有提到AWS的量子運算服務也已經上線了，不過就只是提一下XD 科技巨頭們的量子霸權之羅馬競技生死鬥還有得打呢。</p><p><img src="https://i.imgur.com/YVVX2M0.png" alt></p><p>便當ㄏ呷，完。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;學校信箱每天都會收到一堆讓人想直接刪除的信，但我還是會讀完主旨再刪除(?)，畢竟偶爾還是會有不錯的資訊，例如免費的研習…和便當。
    
    </summary>
    
      <category term="Workshop" scheme="https://laplacetw.github.io/categories/Workshop/"/>
    
    
      <category term="deep learning" scheme="https://laplacetw.github.io/tags/deep-learning/"/>
    
      <category term="big data" scheme="https://laplacetw.github.io/tags/big-data/"/>
    
      <category term="cloud computing" scheme="https://laplacetw.github.io/tags/cloud-computing/"/>
    
  </entry>
  
  <entry>
    <title>Apache Kafka安裝測試</title>
    <link href="https://laplacetw.github.io/data-sci-kafka-hello-world/"/>
    <id>https://laplacetw.github.io/data-sci-kafka-hello-world/</id>
    <published>2020-08-26T07:19:58.000Z</published>
    <updated>2020-08-27T06:16:56.158Z</updated>
    
    <content type="html"><![CDATA[<p>紀錄前陣子嘗試建立Kafka平台模擬事件串流的過程。<a id="more"></a>模擬的情境是，假設有人感染了COVID-19，然後我們要利用Kafka Producer發佈該事件通知，使Kafka Consumer接收到訊息並顯示出來。</p><h3 id="What-is-Apache-Kafka"><a href="#What-is-Apache-Kafka" class="headerlink" title="What is Apache Kafka?"></a>What is Apache Kafka?</h3><p><a href="https://kafka.apache.org/" target="_blank" rel="noopener">Apache Kafka官網</a>：</p><blockquote><p>Apache Kafka is an open-source <font color="red">distributed</font> event streaming platform used by thousands of companies for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications.</p></blockquote><p><a href="https://zh.wikipedia.org/wiki/Kafka" target="_blank" rel="noopener">維基中文頁面</a>：</p><blockquote><p>Kafka最初是由領英開發，由Scala和Java編寫，於2011年初開源。該專案的目標是為處理即時資料提供一個統一、高吞吐、低延遲的平台。</p></blockquote><p>在Kafka中有幾個主要的概念：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">Broker</td><td style="text-align:center">實現資料儲存的主機伺服器</td></tr><tr><td style="text-align:center">Producer</td><td style="text-align:center">訊息的生產者</td></tr><tr><td style="text-align:center">Consumer</td><td style="text-align:center">訊息的消費者</td></tr><tr><td style="text-align:center">Topic</td><td style="text-align:center">訊息的分類</td></tr><tr><td style="text-align:center">Partition</td><td style="text-align:center">Topic中的訊息會被分為若干Partition，以提高訊息處理效率</td></tr></tbody></table><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><ul><li>安裝JDK：<a href="https://www.oracle.com/tw/java/technologies/javase-downloads.html" target="_blank" rel="noopener">官網下載連結</a></li><li>下載Apache Kafka並解壓縮：<a href="https://kafka.apache.org/downloads" target="_blank" rel="noopener">官網下載連結</a></li><li>安裝kafka-python套件<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install kafka-python</span><br></pre></td></tr></table></figure></li></ul><h3 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h3><p>移動到解壓縮後的Kafka資料夾根目錄</p><ul><li><p>啟動Zookeeper server</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/zookeeper-server-start.sh config/zookeeper.properties</span><br></pre></td></tr></table></figure></li><li><p>啟動Kafka server</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-server-start.sh config/server.properties</span><br></pre></td></tr></table></figure></li></ul><p>＊<a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">Apache Zookeeper</a>是用來管理Kafka分散式叢集(Brokers)組態設定與其資源配置的服務。<br>＊啟動server若顯示以下錯誤訊息：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Unrecognized VM option <span class="string">'PrintGCDateStamps'</span></span><br><span class="line">Error: Could not create the Java Virtual Machine.</span><br><span class="line">Error: A fatal exception has occurred. Program will <span class="built_in">exit</span>.</span><br></pre></td></tr></table></figure></p><p>參考<a href="https://stackoverflow.com/questions/36970622/kafka-unrecognized-vm-option-printgcdatestamps" target="_blank" rel="noopener">stackoverflow相關討論</a>，修改/bin/kafka-run-class.sh這個檔案：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$JAVA_MAJOR_VERSION</span>"</span> -ge <span class="string">"9"</span> ]]</span><br></pre></td></tr></table></figure></p><p><font color="red">將上述的if條件式內容修改為</font></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_MAJOR_VERSION=$(<span class="variable">$JAVA</span> -version 2&gt;&amp;1 | sed -E -n <span class="string">'s/.* version "([^.-]*).*/\1/p'</span>)</span><br></pre></td></tr></table></figure><ul><li><p>建立Topic<br>以下指令會建立一個具有一個副本、一個分區的名稱為covid-19的Topic：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic covid-19</span><br></pre></td></tr></table></figure></li><li><p>確認已建立的Topic</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure></li><li><p>Producer</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> kafka <span class="keyword">import</span> KafkaProducer</span><br><span class="line">producer = KafkaProducer(bootstrap_servers=<span class="string">'localhost:9092'</span>)</span><br><span class="line">counter = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    msg = <span class="string">'[Total: '</span> + str(counter) + <span class="string">']Someone is contracted COVID-19! Be careful!'</span></span><br><span class="line">    msg = msg.encode(<span class="string">'ascii'</span>)</span><br><span class="line">    producer.send(<span class="string">'covid-19'</span>, msg)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    counter += <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>Consumer</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> kafka <span class="keyword">import</span> KafkaConsumer</span><br><span class="line">consumer = KafkaConsumer(<span class="string">'covid-19'</span>)</span><br><span class="line"><span class="keyword">for</span> msg <span class="keyword">in</span> consumer:</span><br><span class="line">    print(msg.value.decode(<span class="string">'ascii'</span>))</span><br></pre></td></tr></table></figure></li></ul><p>可以看到Consumer都接收到了COVID-19事件通知⬇︎<br><img src="https://i.imgur.com/DK82jfm.gif" alt></p><p>Ref. <a href="https://timber.io/blog/hello-world-in-kafka-using-python" target="_blank" rel="noopener">Hello World In Kafka Using Python</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;紀錄前陣子嘗試建立Kafka平台模擬事件串流的過程。
    
    </summary>
    
      <category term="Data Science" scheme="https://laplacetw.github.io/categories/Data-Science/"/>
    
    
      <category term="python" scheme="https://laplacetw.github.io/tags/python/"/>
    
      <category term="kafka" scheme="https://laplacetw.github.io/tags/kafka/"/>
    
      <category term="big data" scheme="https://laplacetw.github.io/tags/big-data/"/>
    
  </entry>
  
  <entry>
    <title>Python分割影片為指定長度</title>
    <link href="https://laplacetw.github.io/python-video-split/"/>
    <id>https://laplacetw.github.io/python-video-split/</id>
    <published>2020-08-24T03:38:49.000Z</published>
    <updated>2020-08-24T06:46:03.546Z</updated>
    
    <content type="html"><![CDATA[<p>人們經常在通訊軟體分享各種多媒體訊息，而影片長度或檔案大小可能會有上傳限制，只好將其分割成多個片段上傳。<a id="more"></a>就Line而言，我查到的資訊是限制影片長度5分鐘內、檔案大小300MB以下，就能順利傳送並於聊天室中播放。短片的話自己手動分割一下就行了，但你知道的(?)，有些人分享的片段完整加總起來都數十分鐘甚至一個多小時，仔細觀察那些片段的長度竟然都不一樣，而且還有上字(XXX分享之類的)，這…還真是吃力不討好啊，我只能說祝大大一生平安🙆‍♂️。</p><hr><p>還是交給程式來處理吧，指定影片分割秒數，並自動在片頭上字持續3秒做為順序標記。此範例需用到<a href="https://pypi.org/project/moviepy/" target="_blank" rel="noopener">moviepy</a>套件，且需事先安裝<a href="https://ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a>和<a href="https://imagemagick.org/script/download.php" target="_blank" rel="noopener">ImageMagick</a>這兩個開源軟體。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> moviepy.editor <span class="keyword">as</span> mp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># e.g. video_split("./LaplaceTW.mp4", 300)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">video_split</span><span class="params">(filepath, duration)</span>:</span></span><br><span class="line">    video = mp.VideoFileClip(filepath).resize(width=<span class="number">720</span>)</span><br><span class="line">    video_length = int(video.duration) <span class="comment"># seconds</span></span><br><span class="line">    parts = int(video_length / duration)</span><br><span class="line">    remaining = video_length - (duration * parts)</span><br><span class="line">    parts = (parts + <span class="number">1</span>) <span class="keyword">if</span> remaining &gt; <span class="number">0</span> <span class="keyword">else</span> parts</span><br><span class="line">    print(<span class="string">"Video Length:"</span>, video_length, <span class="string">" | Split Parts:"</span>, parts)</span><br><span class="line"></span><br><span class="line">    start, end = <span class="number">0</span>, duration</span><br><span class="line">    <span class="keyword">for</span> part <span class="keyword">in</span> range(<span class="number">1</span>, parts + <span class="number">1</span>):</span><br><span class="line">        title = <span class="string">"Part."</span> + str(part)</span><br><span class="line">        text = (mp.TextClip(title, fontsize=<span class="number">50</span>, color=<span class="string">'yellow'</span>)</span><br><span class="line">            .set_pos((<span class="string">"right"</span>, <span class="string">"top"</span>))</span><br><span class="line">            .set_duration(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">        clip = video.subclip(start, end)</span><br><span class="line">        clip = mp.CompositeVideoClip([clip, text])</span><br><span class="line">        clip.write_videofile(title + <span class="string">'.mp4'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> part == parts - <span class="number">1</span> <span class="keyword">and</span> remaining &gt; <span class="number">0</span>:</span><br><span class="line">            start += duration</span><br><span class="line">            end += remaining</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            start += duration</span><br><span class="line">            end += duration</span><br></pre></td></tr></table></figure><p>分割長時間影片 ⬇︎<br><img src="https://i.imgur.com/IgC7WQW.png" alt></p><p>處理結果 ⬇︎<br><img src="https://i.imgur.com/XqVlcYG.gif" alt></p><hr><p>＊若沒有安裝ImageMagick則會發生執行錯誤：[Errno 2] No such file or directory: ‘unset’: ‘unset’<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">OSError: MoviePy Error: creation of None failed because of the following error:</span><br><span class="line"></span><br><span class="line">[Errno 2] No such file or directory: <span class="string">'unset'</span>: <span class="string">'unset'</span>.</span><br><span class="line"></span><br><span class="line">.This error can be due to the fact that ImageMagick is not installed on your computer, </span><br><span class="line">or (<span class="keyword">for</span> Windows users) that you didn<span class="string">'t specify the path to the ImageMagick binary in </span></span><br><span class="line"><span class="string">file conf.py, or that the path you specified is incorrect</span></span><br></pre></td></tr></table></figure></p><p>Ref. <a href="https://github.com/Zulko/moviepy/issues/1003" target="_blank" rel="noopener">TextClip Doesn’t work at all #1003</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人們經常在通訊軟體分享各種多媒體訊息，而影片長度或檔案大小可能會有上傳限制，只好將其分割成多個片段上傳。
    
    </summary>
    
      <category term="Python" scheme="https://laplacetw.github.io/categories/Python/"/>
    
    
      <category term="python" scheme="https://laplacetw.github.io/tags/python/"/>
    
      <category term="moviepy" scheme="https://laplacetw.github.io/tags/moviepy/"/>
    
      <category term="mytoolbox" scheme="https://laplacetw.github.io/tags/mytoolbox/"/>
    
  </entry>
  
  <entry>
    <title>COSCUP 2020！</title>
    <link href="https://laplacetw.github.io/coscup-2020/"/>
    <id>https://laplacetw.github.io/coscup-2020/</id>
    <published>2020-08-03T08:13:20.000Z</published>
    <updated>2020-08-05T06:29:26.940Z</updated>
    
    <content type="html"><![CDATA[<p>決定得很臨時，但今年不用搶票，只要填寫健康聲明書就能參加了。<a id="more"></a>雖說COSCUP是免費參加的，但小資如我還是有個人贊助點小錢，希望往後自己每年都能參加。剛好我的三倍券也還沒想到要用在哪，於是趕緊綁定信用卡、光速訂了高鐵票和商旅，週五晚間就飛奔到台北準備參加人生第一場COSCUP😎。</p><p>COSCUP 2020官網：<a href="https://coscup.org/2020/zh-TW" target="_blank" rel="noopener">https://coscup.org/2020/zh-TW</a></p><blockquote><p>開發者 (Coders)、使用者 (Users) 和推廣者 (Promoters) 是讓自由及開放原始碼軟體發光發熱的三大支柱，這個研討會就是專為這三種人舉辦的：你可以是 A 軟體的開發者、B 軟體的推廣者、C 軟體的使用者，不論你是已經踏入自由及開放原始碼軟體領域，還是一直站在門口不知如何入門，歡迎你來參加 COSCUP — Conference for Open Source Coders, Users and Promoters!</p></blockquote><p>這兩天的落腳處⬇︎<br><img src="https://i.imgur.com/eIUe5PV.jpg" alt></p><p>COSCUP今年依然在台科大舉辦，我照官網所說的搭捷運到公館站，從2號出口旁沿著舟山路行走至鹿鳴堂，再右轉欒樹道走到底，這才抵達台科大…步行約10分鐘，熱到爆炸。</p><p>Badge⬇︎<br><img src="https://i.imgur.com/7Sy02Dw.jpg" alt></p><p>主議程會場⬇︎<br><img src="https://i.imgur.com/b80Zd26.jpg" alt></p><p>我在行前有根據議程表稍微規劃了想聽的議程，這次也和多年不見的友人約好在COSCUP碰面，時光飛逝相當有感…不過中午外出用餐回來沒趕上唐鳳政委主講的議題，畢竟現在疫情仍未趨緩，各個議程都是有人數管制的，只好在外頭透過直播觀看天才挨踢大臣的演講。</p><p>第一天印象最深刻的就是交大陳志成教授所主講，關於他們的團隊所開發的<a href="https://github.com/free5gc/free5gc" target="_blank" rel="noopener">free5GC</a>，為世界第一套符合國際標準的開放原始碼5G核心網路。<br><img src="https://i.imgur.com/vxqXSla.jpg" alt><br><img src="https://i.imgur.com/RRdmuOt.jpg" alt></p><p>第二天我只能參加上午的議題，然後就要趕搭高鐵回去了，但仍是參加了很棒的兩場議程，其一是Vue的作者、大神<a href="https://twitter.com/youyuxi" target="_blank" rel="noopener">Evan You</a>主講關於Vue第三版的開發過程所涉及的技術難點與設計取捨，雖然受疫情影響是採遠端連線會議，但這依然是令人興奮的議程！有趣的是，在議程最後的QA時間，有人問了Evan You這樣的一個問題：</p><blockquote><p>請問Vue和React有什麼不同呢？</p></blockquote><p>眾人不禁哄堂大笑😂，Evan You也無奈地笑了笑，但他還是相當耐心地解釋、提出他的看法。</p><p>議程結束後，我又立刻趕到另一個會場參加關於Pi Thermal Camera的議題，因為之前用Adafruit AMG8833 Module做過低解析度的熱成像儀，所以個人是相當期待這場議題的，我打算之後購買更高解析度的模組來進行進階實作。</p><p>從Mozilla Taiwan Community的攤位獲得了帥氣的Firefox胸章！⬇︎<br><img src="https://i.imgur.com/3XN2maN.jpg" alt></p><p>收集到了好多貼紙呀🙆‍♂️ ⬇︎<br><img src="https://i.imgur.com/7Jq8Gn9.jpg" alt></p><p>完。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;決定得很臨時，但今年不用搶票，只要填寫健康聲明書就能參加了。
    
    </summary>
    
      <category term="Workshop" scheme="https://laplacetw.github.io/categories/Workshop/"/>
    
    
      <category term="coscup" scheme="https://laplacetw.github.io/tags/coscup/"/>
    
  </entry>
  
  <entry>
    <title>Arduino UNO：Coffin Dance</title>
    <link href="https://laplacetw.github.io/arduino-uno-r3-buzzer-astronomia/"/>
    <id>https://laplacetw.github.io/arduino-uno-r3-buzzer-astronomia/</id>
    <published>2020-07-16T16:11:58.000Z</published>
    <updated>2020-07-17T14:13:34.472Z</updated>
    
    <content type="html"><![CDATA[<p>其實原曲名叫Astronomia啊，只是被幾位知名舞者(?)給抬出名了。<a id="more"></a>看到Arduino範例程式的toneMelody發出了一段像是gameover的音效，我就想讓蜂鳴器播放這段相當知名的迷因歌曲🤣</p><p>蜂鳴器分為有(震盪)源蜂鳴器，和無(震盪)源蜂鳴器，有源蜂鳴器就是高電位逼逼叫，低電位不叫，就這樣。而無源的蜂鳴器就好玩了，可以控制其聲音頻率而產生音調高低。</p><h3 id="Music-Scales"><a href="#Music-Scales" class="headerlink" title="Music Scales"></a>Music Scales</h3><p>參考範例程式中所引入的pitches.h檔案內容：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_B0  31</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_C1  33</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_CS1 35</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_C4  262</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_CS4 277</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_D4  294</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><br>這個.h檔即是定義<a href="https://zh.wikipedia.org/wiki/%E5%94%B1%E5%90%8D" target="_blank" rel="noopener">唱名</a>所對應的聲音頻率(Hz)，其中C4就是鋼琴琴鍵的中央C，亦即C大調的低音Do。如此一來只要有簡譜，像我這樣對樂理沒輒的人也能教Arduino怎麼演奏音樂了呢。</p><h3 id="LCD-Screen"><a href="#LCD-Screen" class="headerlink" title="LCD Screen"></a>LCD Screen</h3><p>然後我想用個LCD在旁邊顯示播放的曲名，參考<a href="https://blog.gtwang.org/iot/ywrobot-arduino-lcm-1602-iic-v1-lcd-display" target="_blank" rel="noopener">GTW的教學</a>解決了我在編譯時發生的找不到函式庫的問題。要使用HD44780U 1602 LCD須安裝<a href="https://bitbucket.org/fmalpartida/new-liquidcrystal/downloads/" target="_blank" rel="noopener">LiquidCrystal library</a>，下載後解壓縮到Arduino的libraries資料夾底下即可。但這邊又有個小問題：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Arduino:1.8.13 (Mac OS X), 開發板:"Arduino Uno"</span><br><span class="line">/Users/nick/Documents/Arduino/libraries/LiquidCrystal/I2CIO.cpp:35:10: fatal error: ../Wire/Wire.h: No such file or directory</span><br><span class="line"><span class="meta"> #</span>include &lt;../Wire/Wire.h&gt;</span><br></pre></td></tr></table></figure></p><p>這就要找到剛剛解壓縮的資料夾中的I2CIO.cpp，將#include &lt;../Wire/Wire.h&gt;改為#include &lt;Wire.h&gt;。</p><p>*1602 LCD的pin腳說明與像素點控制等教學：<a href="https://lastminuteengineers.com/arduino-1602-character-lcd-tutorial/" target="_blank" rel="noopener">Interfacing 16×2 Character LCD Module with Arduino</a></p><h3 id="Play-Music"><a href="#Play-Music" class="headerlink" title="Play Music!"></a>Play Music!</h3><p>經過強迫症似的反覆聆聽和調整節拍，我覺得很接近原曲了😆<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;LiquidCrystal_I2C.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pitches.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_BUZ 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Ref. https://youtu.be/miwoTFkiIfQ</span></span><br><span class="line"><span class="keyword">int</span> melody[] = &#123;</span><br><span class="line">    NOTE_AS4, NOTE_AS4, NOTE_AS4, NOTE_AS4,</span><br><span class="line">    NOTE_D5, NOTE_D5, NOTE_D5, NOTE_D5,</span><br><span class="line">    NOTE_C5, NOTE_C5, NOTE_C5, NOTE_C5,</span><br><span class="line">    NOTE_F5, NOTE_F5, NOTE_F5, NOTE_F5,</span><br><span class="line">    NOTE_G5, NOTE_G5, NOTE_G5, NOTE_G5, NOTE_G5, NOTE_G5,</span><br><span class="line">    NOTE_G5, NOTE_G5, NOTE_G5, NOTE_G5, NOTE_G5, NOTE_G5,</span><br><span class="line">    NOTE_C5, NOTE_AS4, NOTE_A4, NOTE_G4,</span><br><span class="line">    NOTE_G4, <span class="number">0</span>, NOTE_G4, NOTE_D5, NOTE_C5, NOTE_AS4, NOTE_A4, NOTE_A4, NOTE_A4,</span><br><span class="line">    NOTE_C5, NOTE_AS4, NOTE_A4, NOTE_G4, NOTE_G4, NOTE_G4,</span><br><span class="line">    NOTE_AS5, NOTE_A5, NOTE_AS5, NOTE_A5, NOTE_AS5, NOTE_G4,</span><br><span class="line">    NOTE_AS5, NOTE_A5, NOTE_AS5, NOTE_A5, NOTE_AS5, NOTE_G4</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// note durations: 4 = quarter note, 8 = eighth note, etc.:</span></span><br><span class="line">byte noteDurations[] = &#123;</span><br><span class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the pins on the I2C chip used for LCD connections:</span></span><br><span class="line"><span class="comment">//                    addr, en,rw,rs,d4,d5,d6,d7,bl,blpol</span></span><br><span class="line"><span class="function">LiquidCrystal_I2C <span class="title">lcd</span><span class="params">(<span class="number">0x27</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, POSITIVE)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lcd.begin(<span class="number">16</span>, <span class="number">2</span>); <span class="comment">// lcd initial</span></span><br><span class="line">    lcd.backlight(); <span class="comment">// turn on the backlight</span></span><br><span class="line">    lcd.setCursor(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    lcd.print(<span class="string">"Play:Astronomia"</span>);</span><br><span class="line">    lcd.setCursor(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    lcd.print(<span class="string">"(Coffin Dance)"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// iterate over the notes of the melody:</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> thisNote = <span class="number">0</span>; thisNote &lt; <span class="number">59</span>; thisNote++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// to calculate the note duration, take one second divided by the note type.</span></span><br><span class="line">        <span class="comment">//e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.</span></span><br><span class="line">        <span class="keyword">int</span> noteDuration = <span class="number">1000</span> / noteDurations[thisNote];</span><br><span class="line">        tone(PIN_BUZ, melody[thisNote], noteDuration);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// to distinguish the notes, set a minimum time between them.</span></span><br><span class="line">        <span class="comment">// the note's duration + 30% seems to work well:</span></span><br><span class="line">        <span class="keyword">int</span> pauseBetweenNotes = noteDuration * <span class="number">1.30</span>;</span><br><span class="line">        delay(pauseBetweenNotes);</span><br><span class="line">        <span class="comment">// stop the tone playing:</span></span><br><span class="line">        noTone(PIN_BUZ);</span><br><span class="line">    &#125;</span><br><span class="line">    delay(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>感謝<a href="https://youtu.be/miwoTFkiIfQ" target="_blank" rel="noopener">這位大叔的彈奏教學</a>。<br><div class="video-container"><iframe src="//www.youtube.com/embed/wqYNDwmzXDE" frameborder="0" allowfullscreen></iframe></div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其實原曲名叫Astronomia啊，只是被幾位知名舞者(?)給抬出名了。
    
    </summary>
    
      <category term="Arduino" scheme="https://laplacetw.github.io/categories/Arduino/"/>
    
    
      <category term="IoT" scheme="https://laplacetw.github.io/tags/IoT/"/>
    
      <category term="arduino" scheme="https://laplacetw.github.io/tags/arduino/"/>
    
  </entry>
  
  <entry>
    <title>Arduino UNO：RGB模組、PWM、負數</title>
    <link href="https://laplacetw.github.io/arduino-uno-r3-rgb-module/"/>
    <id>https://laplacetw.github.io/arduino-uno-r3-rgb-module/</id>
    <published>2020-07-13T14:42:09.000Z</published>
    <updated>2020-07-15T09:24:56.696Z</updated>
    
    <content type="html"><![CDATA[<p>What happens if we give a negative value to analogWrite() ?<a id="more"></a>當我看了learning kit提供的、關於RGB模組的範例，在輸出給RGB的數值變化過程中是有出現負值的，於是我困惑了很久，想弄明白analogWrite()如何處理負數。</p><h3 id="PWM"><a href="#PWM" class="headerlink" title="PWM"></a>PWM</h3><p>PWM = Pulse Width Modulation，脈衝寬度調變，是一種利用數位脈衝訊號模擬類比訊號的技術，如何模擬呢？我們知道數位訊號只有0與1兩種狀態，也就是低電位與高電位，而在頻率不變的狀態下，改變工作週期大小，使整體平均電壓值上升或下降來做到控制或節能的行為，這就是PWM。白話點說呢，就是快速的開、關、開、關、開、關…以LED燈來說，就是快到肉眼無法察覺的程度，當我們調整工作週期中開和關的持續時間比例，若開的時間較長，那麼LED燈看起來就比較亮，反之則較暗。</p><p>在Arduino中可用PWM模擬0~5v之間的電壓。圖片連結自<a href="https://www.arduino.cc/en/tutorial/PWM" target="_blank" rel="noopener">arduino.cc</a>⬇︎<br><img src="https://www.arduino.cc/en/uploads/Tutorial/pwm.gif" alt></p><h3 id="RGB-Module"><a href="#RGB-Module" class="headerlink" title="RGB Module"></a>RGB Module</h3><p>我手邊的是共陽極RGB模組，也就是其4根接腳為VCC、R、G、B。<br><img src="https://i.imgur.com/R6BxKqA.jpg" alt></p><p>RGB模組範例程式：<br>此範例使用有PWM功能的digital I/O pin 9 ~ 11，原始範例是有對這3個腳位設定pin mode，但<a href="https://www.arduino.cc/reference/en/language/functions/analog-io/analogwrite/" target="_blank" rel="noopener">Arduino官方說analogWrite()不需要設定pin mode喔</a>：</p><blockquote><p>You do not need to call pinMode() to set the pin as an output before calling analogWrite().<br>The analogWrite function has nothing to do with the analog pins or the analogRead function.</p></blockquote><p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_G 9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_B 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_R 11</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Serial.begin(<span class="number">9600</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">255</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> blue = <span class="number">128</span> -i;</span><br><span class="line">        <span class="comment">//twos_complement(blue);</span></span><br><span class="line"></span><br><span class="line">        analogWrite(PIN_R, i);</span><br><span class="line">        analogWrite(PIN_B, blue); <span class="comment">// 127 -&gt; 0 -&gt; 127 </span></span><br><span class="line">        analogWrite(PIN_G, <span class="number">255</span> - i);</span><br><span class="line"></span><br><span class="line">        delay(<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">255</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> blue = <span class="number">128</span> -i;</span><br><span class="line">        <span class="comment">//twos_complement(blue);</span></span><br><span class="line"></span><br><span class="line">        analogWrite(PIN_R, i); </span><br><span class="line">        analogWrite(PIN_B, blue); <span class="comment">// 128 -&gt; 0 -&gt; 126 </span></span><br><span class="line">        analogWrite(PIN_G, <span class="number">255</span> - i);</span><br><span class="line"></span><br><span class="line">        delay(<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twos_complement</span><span class="params">(<span class="keyword">int</span> binary)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (binary &lt; <span class="number">0</span>) Serial.println((~binary) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> Serial.println(binary);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://i.imgur.com/WQXvn2G.gif" alt></p><h3 id="analogWrite"><a href="#analogWrite" class="headerlink" title="analogWrite()"></a>analogWrite()</h3><p>從上面的範例程式可以看到，analogWrite()寫入RGB module的B pin值，也就是for loop中的變數blue，它是會出現負值的。但analogWrite()只接受0 ~ 255之間的值呢？？？後來我找到<a href="https://techexplorations.com/blog/arduino/blog-what-happens-if-you-give-a-negative-pwm-value-to-analogwrite/" target="_blank" rel="noopener">一篇文章</a>說Arduino使用二補數來處理負數，於是我寫了twos_complement()來計算二補數並print出實際上寫入B pin的值。</p><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref."></a>Ref.</h3><p><a href="https://www.arduino.cc/en/tutorial/PWM" target="_blank" rel="noopener">https://www.arduino.cc/en/tutorial/PWM</a><br><a href="http://wiki.csie.ncku.edu.tw/embedded/PWM" target="_blank" rel="noopener">http://wiki.csie.ncku.edu.tw/embedded/PWM</a><br><a href="https://www.arduino.cc/reference/en/language/functions/analog-io/analogwrite/" target="_blank" rel="noopener">https://www.arduino.cc/reference/en/language/functions/analog-io/analogwrite/</a><br><a href="https://techexplorations.com/blog/arduino/blog-what-happens-if-you-give-a-negative-pwm-value-to-analogwrite/" target="_blank" rel="noopener">https://techexplorations.com/blog/arduino/blog-what-happens-if-you-give-a-negative-pwm-value-to-analogwrite/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What happens if we give a negative value to analogWrite() ?
    
    </summary>
    
      <category term="Arduino" scheme="https://laplacetw.github.io/categories/Arduino/"/>
    
    
      <category term="IoT" scheme="https://laplacetw.github.io/tags/IoT/"/>
    
      <category term="arduino" scheme="https://laplacetw.github.io/tags/arduino/"/>
    
  </entry>
  
</feed>
