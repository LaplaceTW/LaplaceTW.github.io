<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Laplace&#39;s Lab</title>
  
  <subtitle>“We&#39;re believers that the best way to learn something is to do it.”</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://laplacetw.github.io/"/>
  <updated>2020-10-01T16:37:34.081Z</updated>
  <id>https://laplacetw.github.io/</id>
  
  <author>
    <name>LaplaceTW</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python:&amp;nbsp;Sphinx ＆ ReadTheDocs</title>
    <link href="https://laplacetw.github.io/python-sphinx-and-readthedocs/"/>
    <id>https://laplacetw.github.io/python-sphinx-and-readthedocs/</id>
    <published>2020-10-01T07:19:00.000Z</published>
    <updated>2020-10-01T16:37:34.081Z</updated>
    
    <content type="html"><![CDATA[<p>當我認真想為個人專案寫文件的時候，於是想到了Sphinx，<a id="more"></a>雖然還是對路徑設定感到有點苦惱，但自動生成文件真的很香，尤其是託管到Read The Docs還能和Github連動，只要推送更新到Github就會觸發自動建置。</p><h3 id="Sphinx"><a href="#Sphinx" class="headerlink" title="Sphinx"></a>Sphinx</h3><p></p><p>總之Sphinx就是能自動生成文件的工具，只要在原始碼中使用<a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html" target="_blank" rel="noopener">reStructuredText</a>或<a href="https://www.sphinx-doc.org/en/master/usage/markdown.html" target="_blank" rel="noopener">Markdown</a>語法來撰寫文件內容。</p><p>官方入門指南：<a href="https://www.sphinx-doc.org/en/master/usage/quickstart.html" target="_blank" rel="noopener">Sphinx Quick Start</a></p><ol><li><p>安裝：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install Sphinx</span><br></pre></td></tr></table></figure></li><li><p>快速啟用：<br> 首先在文件的根目錄建立doc、src兩個資料夾，分別用來放建置文件和原始碼。Sphinx內建sphinx-quickstart腳本，可引導使用者快速完成基本設定：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> doc</span><br><span class="line">$ sphinx-quickstart</span><br></pre></td></tr></table></figure><p> 這裡選擇獨立的原始碼和建置目錄⬇︎<br> <img src="https://i.imgur.com/XowPf8k.png" alt></p><p> 接著腳本會引導使用者設定文件名稱、版本號、作者等資訊，設定完成後的目錄結構：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── doc</span><br><span class="line">│   ├── Makefile</span><br><span class="line">│   ├── build</span><br><span class="line">│   ├── make.bat</span><br><span class="line">│   └── <span class="built_in">source</span></span><br><span class="line">│       ├── _static</span><br><span class="line">│       ├── _templates</span><br><span class="line">│       ├── conf.py</span><br><span class="line">│       └── index.rst</span><br><span class="line">└── src</span><br></pre></td></tr></table></figure><p> 從上面的目錄結構可以看到，doc目錄下有自動建置的指令檔，source目錄中則是文件相關的資源檔，包含靜態檔案、設定檔conf.py以及首頁index.rst。</p></li><li><p>conf.py基本設定：</p><ul><li><p>原始碼路徑：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- Path setup --------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If extensions (or modules to document with autodoc) are in another directory,</span></span><br><span class="line"><span class="comment"># add these directories to sys.path here. If the directory is relative to the</span></span><br><span class="line"><span class="comment"># documentation root, use os.path.abspath to make it absolute, like shown here.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.insert(<span class="number">0</span>, os.path.abspath(<span class="string">'../../src'</span>))</span><br></pre></td></tr></table></figure><p>路徑不能亂設定，例如<a href="https://stackoverflow.com/questions/20251007/sphinx-and-relative-imports-in-python-3" target="_blank" rel="noopener">將package目錄直接設定為原始碼路徑</a>，然後就導致各種import error然後文件建置失敗😅</p></li><li><p>首頁</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- General configuration ---------------------------------------------------</span></span><br><span class="line">master_doc = <span class="string">'index'</span>  <span class="comment"># index.rst</span></span><br></pre></td></tr></table></figure></li><li><p>擴充功能</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Add any Sphinx extension module names here, as strings. They can be</span></span><br><span class="line"><span class="comment"># extensions coming with Sphinx (named 'sphinx.ext.*') or your custom</span></span><br><span class="line"><span class="comment"># ones.</span></span><br><span class="line">extensions = [<span class="string">'sphinx.ext.autodoc'</span>]</span><br></pre></td></tr></table></figure></li><li><p>佈景主題</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The theme to use for HTML and HTML Help pages.  See the documentation for</span></span><br><span class="line"><span class="comment"># a list of builtin themes.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">html_theme = <span class="string">'alabaster'</span>  <span class="comment"># default</span></span><br></pre></td></tr></table></figure><p>更多主題：<a href="https://www.sphinx-doc.org/en/master/usage/theming.html" target="_blank" rel="noopener">Sphinx Doc / Theming</a></p></li></ul></li><li><p>index.rst主頁設定：<br> 打開index.rst會看到標題和toctree目錄設定，.rst也就是reStructuredText格式的文件，因此文件的每一個頁面都會有一個.rst檔，按需求自行新增。假設我有index.rst和mod_a.rst兩個頁面，那麼toctree目錄設定應該長這樣：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.. toctree::</span><br><span class="line">    :maxdepth: 2</span><br><span class="line">    :caption: Contents:</span><br><span class="line"></span><br><span class="line">    mod_a</span><br></pre></td></tr></table></figure><p> *注意空格、縮排以及不需要寫出.rst檔名後綴</p><p> 如此在生成文件的時候，首頁目錄就會有mod_a這個頁面，而mod_a頁面內容就在mod_a.rst檔案中撰寫、定義。</p></li><li><p>autodoc：<br> 語法參考：<a href="https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#module-sphinx.ext.autodoc" target="_blank" rel="noopener">sphinx.ext.autodoc</a></p><p> 簡單舉例，假設上述的mod_a.rst對應到原始碼src/proj/mod_a.py這個模組，那麼mod_a.py可能定義了一些類別或方法，則mod_a.rst的內容除了標題和一些說明文字，autodoc的設定應該長這樣：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.. automodule:: proj.mod_a</span><br><span class="line">    :members:</span><br></pre></td></tr></table></figure><p> 如此audodoc便會自動將模組中的成員引入mod_a.rst頁面，包含以reStructuredText語法所撰寫的註解！例如：</p> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    write reStructuredText here</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        write reStructuredText here</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>make：<br> 當上述的文件內容都撰寫好了，就可以使用自動建置指令來生成文件：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make clean  <span class="comment"># Delete the build cache before building documents</span></span><br><span class="line">$ make html</span><br></pre></td></tr></table></figure><p> 建置完成的html檔會在/doc/build目錄下。</p><p> Sphinx文件實例，供參考：<a href="https://github.com/laplacetw/botlegram-doc" target="_blank" rel="noopener">laplacetw/botlegram-doc</a></p></li></ol><h3 id="Read-The-Docs"><a href="#Read-The-Docs" class="headerlink" title="Read The Docs"></a>Read The Docs</h3><p></p><p>生成了文件後若打算公開發佈，可以使用<a href="https://readthedocs.org/" target="_blank" rel="noopener">Read The Docs</a>這個基於Sphinx的免費文件託管服務，註冊帳號後，建議與版本控制服務例如Github連動，如此便可以直接從Github匯入我們的Sphinx專案來建立一個Read The Docs專案，之後只要推送更新到Github，那麼Read The Docs便會自動建置更新我們的線上文件了。</p><p><img src="https://i.imgur.com/DhpdU4O.png" alt></p><p>Read The Docs線上文件實例，供參考：<a href="https://botlegram.readthedocs.io/" target="_blank" rel="noopener">https://botlegram.readthedocs.io/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;當我認真想為個人專案寫文件的時候，於是想到了Sphinx，
    
    </summary>
    
      <category term="Python" scheme="https://laplacetw.github.io/categories/Python/"/>
    
    
      <category term="python" scheme="https://laplacetw.github.io/tags/python/"/>
    
      <category term="sphinx" scheme="https://laplacetw.github.io/tags/sphinx/"/>
    
      <category term="readthedocs" scheme="https://laplacetw.github.io/tags/readthedocs/"/>
    
  </entry>
  
  <entry>
    <title>拋棄繼承聲請記事</title>
    <link href="https://laplacetw.github.io/asserting-waived-succession/"/>
    <id>https://laplacetw.github.io/asserting-waived-succession/</id>
    <published>2020-09-30T04:53:07.000Z</published>
    <updated>2020-09-30T12:38:47.397Z</updated>
    
    <content type="html"><![CDATA[<p>總算處理完所有必要文件順利送到郵局了，但遇到中秋連假，所以下週才會寄出。<a id="more"></a>儘管我仍無法理解人生怎麼會突然就稀巴爛，然後一轉眼便是十年，我仍在收拾殘局，然而有人卻已匆匆謝幕。看著戶籍謄本思索了幾秒，人生就只是這樣呢，我們終究都要化為記事欄裡頭的幾行字，但就是有人過得辛苦，有人過得舒服。</p><p>一樣米養百樣人，若是遇到豬隊友，為免夜長夢多、債留子孫，繼承這事可就得審慎處理。雖然在2009年民法繼承編修訂後已採「當然限定繼承」，不用再向法院聲請，繼承人僅需繼承所得的遺產為限，負清償責任。但在我和具法律專業背景友人詢問後，了解到限定繼承需開具遺產清冊陳報法院這件事，光想就覺得麻煩，更何況以我自身而言，只求別再受前人債務拖累、斷送餘生，所以說還是乾脆點聲明拋棄繼承。</p><h3 id="相關法條"><a href="#相關法條" class="headerlink" title="相關法條"></a>相關法條</h3><p></p><p><a href="(https://law.moj.gov.tw/LawClass/LawParaDeatil.aspx?pcode=B0000001&amp;bp=126">民法第五編：繼承</a></p><p><a href="https://law.moj.gov.tw/LawClass/LawSingle.aspx?pcode=B0000001&amp;flno=1138" target="_blank" rel="noopener">民法第1138條</a>：</p><blockquote><p>「遺產繼承人，除配偶外，依左列順序定之：</p><ul><li>一、直系血親卑親屬。</li><li>二、父母。</li><li>三、兄弟姊妹。</li><li>四、祖父母。</li></ul></blockquote><p><a href="https://law.moj.gov.tw/LawClass/LawSingle.aspx?PCODE=B0000001&amp;FLNO=1147" target="_blank" rel="noopener">民法第1147條</a>：</p><blockquote><p>「繼承，因被繼承人死亡而開始。」</p></blockquote><p><a href="https://law.moj.gov.tw/LawClass/LawSingle.aspx?pcode=B0000001&amp;flno=1148" target="_blank" rel="noopener">民法第1148條</a>：</p><blockquote><p>「繼承人自繼承開始時，除本法另有規定外，承受被繼承人財產上之一切權利、義務。但權利、義務專屬於被繼承人本身者，不在此限。<font color="red">繼承人對於被繼承人之債務，以因繼承所得遺產為限，負清償責任。</font>」</p></blockquote><p><a href="https://law.moj.gov.tw/LawClass/LawSingle.aspx?pcode=B0000001&amp;flno=1153" target="_blank" rel="noopener">民法第1153條</a>：</p><blockquote><p>「<font color="red">繼承人對於被繼承人之債務，以因繼承所得遺產為限，負連帶責任。</font>繼承人相互間對於被繼承人之債務，除法律另有規定或另有約定外，按其應繼分比例負擔之。」</p></blockquote><p><a href="https://law.moj.gov.tw/LawClass/LawSingle.aspx?PCODE=B0000001&amp;FLNO=1174" target="_blank" rel="noopener">民法第1174條</a>：</p><blockquote><p>「繼承人得拋棄其繼承權。前項拋棄，應於<font color="red">知悉其得繼承之時起三個月內</font>，以書面向法院為之。<font color="red">拋棄繼承後，應以書面通知因其拋棄而應為繼承之人</font>。但不能通知者，不在此限。」</p></blockquote><p><a href="https://law.moj.gov.tw/LawClass/LawSingle.aspx?PCODE=B0000001&amp;FLNO=1175" target="_blank" rel="noopener">民法第1175條</a>：</p><blockquote><p>「繼承之拋棄，溯及於繼承開始時發生效力。」</p></blockquote><p><a href="https://law.moj.gov.tw/LawClass/LawSingle.aspx?pcode=B0000001&amp;flno=1176" target="_blank" rel="noopener">民法第1176條 部分條文</a>：</p><blockquote><p>「因他人拋棄繼承而應為繼承之人，為拋棄繼承時，<font color="red">應於知悉其得繼承之日起三個月內為之。</font>」</p></blockquote><h3 id="辦理拋棄繼承"><a href="#辦理拋棄繼承" class="headerlink" title="辦理拋棄繼承"></a>辦理拋棄繼承</h3><p></p><p><br>根據我在網路上搜集到的資料，各地方法院的聲請書格式或規定似乎有些微差異(白眼，所以要辦理拋棄繼承的第一件事，便是先確認「被繼承人戶籍所在地之管轄法院」，這樣你才知道該去哪下載聲請書的格式。但網路下載的格式可能會因為疏於更新而過舊，像我<del>這樣超TUEEE的勇者</del>總是比較謹慎的，當然是直接跑去法院購買紙本格式最保險。拋棄繼承聲請要在得知繼承事實發生的那一刻算起三個月內提出，聲請費用為1000塊，一個人聲請或全家一起聲請都是相同費用，若採用郵寄的方式則檢附1000塊郵政匯票，受款人為管轄法院。</p><p>＊若管轄法院在臺北、臺中、臺南、臺東之類的名字有「臺」的縣市，要寫繁體的「臺」，而且必須寫全稱，例如「臺灣臺南地方法院」。</p><p>供參考：<a href="https://tnd.judicial.gov.tw/doc/%AEa%A8%C6/%A9%DF%B1%F3%C4~%A9%D3%C1n%BD%D0%AA%AC.pdf" target="_blank" rel="noopener">臺南地方法院拋棄繼承聲請書格式</a></p><p>接著依照聲請書裡頭的格式依序填寫拋棄繼承書狀、繼承系統表、繼承權拋棄書，至於通知書跟收據我就沒用到了，因為我是寄存證信函通知下一順位的繼承人。</p><p>再來就是取得辦理拋棄繼承應檢附的資料：</p><ol><li><a href="https://www.ris.gov.tw/app/portal/741" target="_blank" rel="noopener">印鑑證明</a>：滿7歲之聲請人，如聲請人未滿20歲另應有法定代理人(父母皆須有)或監護人之印鑑證明；受拋棄繼承通知之人如以本狀第六頁收據蓋印鑑證明章表明已收受，亦須提供。</li><li>印鑑證明章：印鑑證明章如在本狀第三頁已蓋印完畢，可供法院核對之狀況下，則可不必攜章至本院(請聲請人自行判斷蓋印是否清楚)。</li><li>戶籍謄本：被繼承人除戶戶籍謄本、死者配偶(死者死亡時仍與其有婚姻關係之人；已往生者亦需要)、聲請人、聲請人之法定代理人(或有監護權之人)、同繼承順位未拋棄之人、第一繼承順位已先死者及其子女，或同繼承順位均拋棄而下一繼承順位之人(已往生者亦需要，如下一順位繼承人均已往生，則下下順位之繼承人亦需要，比如第一順位均拋棄，第二順位均往生，則要提供第三順位繼承人之戶謄)均需提供一份，該些人員有同戶籍者可提供全戶一份。</li></ol><p>我是用郵寄方式進行聲請，只要確認書狀聲請人印鑑用印清晰可辨識即可，不需要印鑑證明章。</p><p>＊聲請人如為胎兒，應附上媽媽手冊封面、第一次產檢、最新產檢等文件之影本。<br>＊<font color="red">戶籍謄本記事欄不可省略</font>。</p><p><img src="https://i.imgur.com/DYTMqFI.jpg" alt></p><p>處理到這就差存證信函影本了(通知其他順位繼承人之證明書)。</p><h3 id="撰寫存證信函"><a href="#撰寫存證信函" class="headerlink" title="撰寫存證信函"></a>撰寫存證信函</h3><p></p><p><br>存證信函需要「N+2」份，N是收件人的人數，+2則是自己和郵局都會留存一份副本，<font color="red">正本ㄧ定要寄出去千萬不要自己留著做紀念</font>，而我們留存的副本就影印一份檢附在聲請書中一併送交法院辦理。一開始我還傻傻的跑去郵局說要買存證信函用紙，然後郵局人員就拿出長得像中學生考試用紙的東東，而且那紙張還超薄…後來郵局人員就說可以上網<a href="https://www.post.gov.tw/post/internet/Download/index.jsp?ID=220301" target="_blank" rel="noopener">下載格式</a>以電腦繕打後複印，然後我就說不買了😅 </p><p>多位寄件人或多位收件人相同住址則可以寫在一起，例如：</p><p>寄件人：XXX、YYY<br>詳細住址：xxxxxxxxxxxxxxxxx</p><p>如果人丁興旺寫不下(?)，網路上的參考資料是建議可以直接註記「如附件」，然後把寄件者跟收件者都條列在附件。但也有人遇到<a href="https://home.gamer.com.tw/creationDetail.php?sn=4560024" target="_blank" rel="noopener">部份郵局不接受附件</a>的情形，可能要先詢問自家附近的郵局進行確認。</p><p><img src="https://i.imgur.com/HJdkBMW.png" alt></p><p>至於內文的部分，我是直接參考聲請書的範例去寫：</p><blockquote><p>寄件人XXX、YYY，因被繼承人ZZZ於民國YY年MM月DD日亡故，對其遺產，依法有繼承權。茲出於寄件人自由意思，爰依民法第一一七四條規定拋棄繼承權，全部遺產由收件人繼承，絕無異議，特此通知。</p></blockquote><p>我建議存證信函撰寫完<font color="red">先轉為PDF格式再列印</font>，避免發生部分文字跑版，因為我使用超商雲端列印，然後下方的合計區塊文字就變成一坨இдஇ</p><p>＊存證信函是採雙掛號方式郵寄，如果有先到郵局買信封可以先索取雙掛號回執拿回去先填寫，到時候要去寄才不會搞太久。<br>＊存證信函撰寫完列印出來後，<font color="red">寄件人要在每一份存證信函上簽名或蓋章</font>。</p><h3 id="送件"><a href="#送件" class="headerlink" title="送件"></a>送件</h3><p></p><p><br>當聲請書、檢附資料以及存證信函這三件事都處理好，將自己留存的存證信函副本影印，就可以將聲請書、存證信函影本以及其他檢附資料一起寄出了。法院收件受理後，若有需要補費、補件、聲請准許或駁回，都會以掛號通知各聲請人，倘若收到「拋棄繼承准予核備函」就代表聲請核准囉。</p><p>2020/09/30：送件中</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;總算處理完所有必要文件順利送到郵局了，但遇到中秋連假，所以下週才會寄出。
    
    </summary>
    
      <category term="Daily" scheme="https://laplacetw.github.io/categories/Daily/"/>
    
    
      <category term="civil law" scheme="https://laplacetw.github.io/tags/civil-law/"/>
    
      <category term="waived succession" scheme="https://laplacetw.github.io/tags/waived-succession/"/>
    
  </entry>
  
  <entry>
    <title>Python:字典排序</title>
    <link href="https://laplacetw.github.io/pyhton-sort-dict-by-value/"/>
    <id>https://laplacetw.github.io/pyhton-sort-dict-by-value/</id>
    <published>2020-09-29T12:30:02.000Z</published>
    <updated>2020-09-29T16:38:19.646Z</updated>
    
    <content type="html"><![CDATA[<p>有時候會需要依據dict value來排序，嗯，就是會有這種時候(´･_･`)<a id="more"></a> 話說我看了官方文件才發現，從Python 3.6開始依據<a href="https://www.python.org/dev/peps/pep-0468/" target="_blank" rel="noopener">PEP 468</a>將保留**kwargs的順序，所以現在dict也是有序的呢(插入元素的順序)，而我開始學習Python的時候是3.5版。</p><p><br>假設有個dict長這樣：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">my_friend = &#123;</span><br><span class="line">    <span class="string">'Mike'</span>:&#123;<span class="string">'gender'</span>:<span class="string">'male'</span>, <span class="string">'age'</span>:<span class="number">25</span>&#125;, </span><br><span class="line">    <span class="string">'Emily'</span>:&#123;<span class="string">'gender'</span>:<span class="string">'female'</span>, <span class="string">'age'</span>:<span class="number">23</span>&#125;, </span><br><span class="line">    <span class="string">'John'</span>:&#123;<span class="string">'gender'</span>:<span class="string">'male'</span>, <span class="string">'age'</span>:<span class="number">30</span>&#125;, </span><br><span class="line">    <span class="string">'Ted'</span>:&#123;<span class="string">'gender'</span>:<span class="string">'male'</span>, <span class="string">'age'</span>:<span class="number">26</span>&#125;, </span><br><span class="line">    <span class="string">'Alice'</span>:&#123;<span class="string">'gender'</span>:<span class="string">'female'</span>, <span class="string">'age'</span>:<span class="number">29</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果想依據’age’來排序？ 利用lambda將sort key指定為dict value中的某個值來排序dict.items()：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sort_my_friend = sorted(my_friend.items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>][<span class="string">'age'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sort_my_friend</span><br><span class="line">[(<span class="string">'Emily'</span>, &#123;<span class="string">'gender'</span>: <span class="string">'female'</span>, <span class="string">'age'</span>: <span class="number">23</span>&#125;), (<span class="string">'Mike'</span>, &#123;<span class="string">'gender'</span>: <span class="string">'male'</span>, <span class="string">'age'</span>: <span class="number">25</span>&#125;), (<span class="string">'Ted'</span>, &#123;<span class="string">'gender'</span>: <span class="string">'male'</span>, <span class="string">'age'</span>: <span class="number">26</span>&#125;), (<span class="string">'Alice'</span>, &#123;<span class="string">'gender'</span>: <span class="string">'female'</span>, <span class="string">'age'</span>: <span class="number">29</span>&#125;), (<span class="string">'John'</span>, &#123;<span class="string">'gender'</span>: <span class="string">'male'</span>, <span class="string">'age'</span>: <span class="number">30</span>&#125;)]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有時候會需要依據dict value來排序，嗯，就是會有這種時候(´･_･`)
    
    </summary>
    
      <category term="Python" scheme="https://laplacetw.github.io/categories/Python/"/>
    
    
      <category term="python" scheme="https://laplacetw.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python:&amp;nbsp;install psycopg2 error</title>
    <link href="https://laplacetw.github.io/python-install-error-psycopg2/"/>
    <id>https://laplacetw.github.io/python-install-error-psycopg2/</id>
    <published>2020-09-20T05:21:32.000Z</published>
    <updated>2020-09-20T10:52:11.056Z</updated>
    
    <content type="html"><![CDATA[<p>啊啊，ERROR。<a id="more"></a></p><p>上一次安裝PostgreSQL是汰換Win 7筆電之前，這次在Mac OS安裝<a href="http://postgresapp.com/" target="_blank" rel="noopener">Postgres.app</a>，然後要安裝psycopg2的時候報錯了。</p><p>傻眼，我有些急用啊，你大哥請支援收銀好嗎？</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Error: pg_config executable not found.</span><br><span class="line"></span><br><span class="line">Please add the directory containing pg_config to the PATH</span><br><span class="line"></span><br><span class="line">(omitted...)</span><br><span class="line"></span><br><span class="line">ERROR: Command errored out with <span class="built_in">exit</span> status 1: python setup.py egg_info Check the logs <span class="keyword">for</span> full <span class="built_in">command</span> output.</span><br></pre></td></tr></table></figure><p>pip報錯說找不到pg_config路徑，要把Postgress.app的bin資料夾路徑加入環境變數，<a href="https://stackoverflow.com/questions/11618898/pg-config-executable-not-found#24684701" target="_blank" rel="noopener">參考stackoverflow上的討論</a>，於安裝時指定其路徑(Mac OS)：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=<span class="string">"/Applications/Postgres.app/Contents/Versions/latest/bin:<span class="variable">$PATH</span>"</span> pip install psycopg2</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/9Y96knz.png" alt></p><h5 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h5><p></p><p><br><a href="http://postgresguide.com/utilities/psql.html" target="_blank" rel="noopener">Psql Commonly used commands</a></p><p>\list: list databases<br>\dt : list tables in current DB<br>\d TABLE_NAME : list table columns<br>\x : enable expanded display (e.g. SELECT * FROM mytable LIMIT 10;)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;啊啊，ERROR。
    
    </summary>
    
      <category term="Python" scheme="https://laplacetw.github.io/categories/Python/"/>
    
    
      <category term="python" scheme="https://laplacetw.github.io/tags/python/"/>
    
      <category term="error" scheme="https://laplacetw.github.io/tags/error/"/>
    
      <category term="psycopg2" scheme="https://laplacetw.github.io/tags/psycopg2/"/>
    
      <category term="postgresql" scheme="https://laplacetw.github.io/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>Python:快速建立Telegram聊天機器人</title>
    <link href="https://laplacetw.github.io/python-botlegram/"/>
    <id>https://laplacetw.github.io/python-botlegram/</id>
    <published>2020-09-17T04:17:59.000Z</published>
    <updated>2020-09-17T07:27:34.371Z</updated>
    
    <content type="html"><![CDATA[<p>寫了一個套件，雖然現在還沒啥功能，只能發送文字和照片。<a id="more"></a>也不是只有搞了個套件，還嘗試了用<a href="https://www.sphinx-doc.org/en/master/" target="_blank" rel="noopener">Sphinx</a>自動產生文件然後托管到<a href="https://readthedocs.org/" target="_blank" rel="noopener">Read The Docs</a>，被autodoc路徑折騰了不少時間…這是另一段故事了。雖然現在才開始研究怎麼寫Telegram Bot，也有多種程式語言的現成框架可以用，但我不想要使用高度封裝的複雜框架，所以決定一邊學習Telegram Bot API，一邊完成這個套件，希望我有足夠的時間和心力 😌</p><h3 id="Botlegram"><a href="#Botlegram" class="headerlink" title="Botlegram"></a>Botlegram</h3><p></p><p>鏘！鏘！經過一番折騰終於發佈到Github上了，我希望能保持它的彈性，不要做多餘的事，它就只是一個Telegram Bot API的Python版本，所以功能函式命名也會盡可能地保持與<a href="https://core.telegram.org/bots/api#available-methods" target="_blank" rel="noopener">Telegram Bot API methods</a>一致。</p><ul><li>source code: <a href="https://github.com/laplacetw/botlegram" target="_blank" rel="noopener">Botlegram</a></li><li>online document: <a href="https://botlegram.readthedocs.io/" target="_blank" rel="noopener">Botlegram Doc</a></li></ul><h3 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h3><p></p><h5 id="準備工作："><a href="#準備工作：" class="headerlink" title="準備工作："></a>準備工作：</h5><ul><li>以下說明是以部署在Heroku為例，所以必須先準備一個<a href="https://www.heroku.com/" target="_blank" rel="noopener">Heroku帳號</a>，然後<a href="https://trailhead.salesforce.com/content/learn/projects/develop-heroku-applications/create-a-heroku-app" target="_blank" rel="noopener">建立一支APP</a></li><li>初次使用Heroku則必須先<a href="https://devcenter.heroku.com/articles/heroku-command-line" target="_blank" rel="noopener">安裝Heroku CLI</a></li><li>下載我預先準備的Telegram Bot懶人包: <a href="https://github.com/laplacetw/botlegram/files/5236011/echoBot.zip" target="_blank" rel="noopener">echo Bot</a></li><li>和Telegram官方帳號<a href="https://telegram.me/BotFather" target="_blank" rel="noopener">BotFather</a>進行對話 (取名叫Bot Father我覺得很有趣 😆&nbsp;)，按指示建立Bot取得專屬token，此token必須由你自己妥善保管，因為<font color="red">任何人都能使用這個token來控制你的Bot</font>。</li></ul><p><img src="https://i.imgur.com/wauvK7S.png" alt></p><h5 id="解壓縮懶人包echoBot-zip"><a href="#解壓縮懶人包echoBot-zip" class="headerlink" title="解壓縮懶人包echoBot.zip"></a>解壓縮懶人包echoBot.zip</h5><p>開啟app.py:</p><ul><li>your_bot_token替換成你的專屬token</li><li>your_host替換成你的Heroku App網址，請注意不可忽略的斜線<br>e.g. “<a href="https://APP_NAME.herokuapp.com/&quot;" target="_blank" rel="noopener">https://APP_NAME.herokuapp.com/&quot;</a></li></ul><h5 id="部署到Heroku"><a href="#部署到Heroku" class="headerlink" title="部署到Heroku"></a>部署到Heroku</h5><p>打開終端機依照下方指令操作，APP_NAME替換成你的Heroku App name<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> echoBot</span><br><span class="line">$ heroku login</span><br><span class="line">$ heroku git:remote -a APP_NAME</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -am <span class="string">"echo Bot"</span></span><br><span class="line">$ git push heroku master</span><br></pre></td></tr></table></figure></p><h5 id="確認與測試"><a href="#確認與測試" class="headerlink" title="確認與測試"></a>確認與測試</h5><p>部署成功的話，可以在Heroku的APP Logs頁面看到「Webhook is already set」<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Starting process with <span class="built_in">command</span> `gunicorn app:app`</span><br><span class="line">[INFO] Starting gunicorn 20.0.4</span><br><span class="line">[INFO] Listening at: http://0.0.0.0:10426 (4)</span><br><span class="line">[INFO] Using worker: sync</span><br><span class="line">[INFO] Booting worker with pid: 10</span><br><span class="line">[INFO] Booting worker with pid: 11</span><br><span class="line">State changed from starting to up</span><br><span class="line">* [Bot] Webhook is already <span class="built_in">set</span></span><br><span class="line">* [Bot] Webhook is already <span class="built_in">set</span></span><br></pre></td></tr></table></figure></p><p>打開Telegram和你的機器人對話，它應該會開始鸚鵡學舌囉 🐧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;寫了一個套件，雖然現在還沒啥功能，只能發送文字和照片。
    
    </summary>
    
      <category term="Python" scheme="https://laplacetw.github.io/categories/Python/"/>
    
    
      <category term="python" scheme="https://laplacetw.github.io/tags/python/"/>
    
      <category term="chatbot" scheme="https://laplacetw.github.io/tags/chatbot/"/>
    
      <category term="telegram" scheme="https://laplacetw.github.io/tags/telegram/"/>
    
  </entry>
  
  <entry>
    <title>在Heroku遠端主機控制瀏覽器</title>
    <link href="https://laplacetw.github.io/data-sci-heroku-selenium-chrome-driver/"/>
    <id>https://laplacetw.github.io/data-sci-heroku-selenium-chrome-driver/</id>
    <published>2020-09-06T10:01:30.000Z</published>
    <updated>2020-09-17T04:11:16.585Z</updated>
    
    <content type="html"><![CDATA[<p>如題。<a id="more"></a>最近在研究Telegram Bot API，雖然讀過文件知道許多語言都已經有不少第三方框架支援，基於某些應用目的不想被框架綁住，所以打算自己寫。然後我就耗了整整兩天，嘗試如何讓部署在Heroku上的Bot能順利使用headless browser擷取到我要的數據…。說也奇怪，本機執行是沒問題的，但在遠端主機就是一直丟出Timeout Error，原來遠端主機控制Chrome訪問目標網頁的時候總是遭遇某DDoS Protection服務所阻擋，但經過一番嘗試目前仍是應對不了這個情況，耗了好幾天…於是學到了windows.navigator.webdriver這個參數。</p><p>*假設Heroku APP已建立。</p><h3 id="Add-Config-Vars-amp-Buildpacks"><a href="#Add-Config-Vars-amp-Buildpacks" class="headerlink" title="Add Config Vars &amp; Buildpacks"></a>Add Config Vars &amp; Buildpacks</h3><p></p><p>在APP的Setting頁面，設定以下兩個環境變數：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CHROMEDRIVER_PATH = /app/.chromedriver/bin/chromedriver</span><br><span class="line">GOOGLE_CHROME_BIN = /app/.apt/usr/bin/google-chrome</span><br></pre></td></tr></table></figure></p><p>在APP的Setting頁面，設定以下兩個buildpack：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/heroku/heroku-buildpack-google-chrome</span><br><span class="line">https://github.com/heroku/heroku-buildpack-chromedriver</span><br></pre></td></tr></table></figure></p><p></p><p><br><img src="https://i.imgur.com/qOPtW4a.png" alt></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p></p><p>程式的部分，Chrome driver的參數會使用到上述所設定的環境變數。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_chrome</span><span class="params">()</span>:</span></span><br><span class="line">    op = webdriver.ChromeOptions()</span><br><span class="line">    op.binary_location = os.environ.get(<span class="string">"GOOGLE_CHROME_BIN"</span>)</span><br><span class="line">    op.add_argument(<span class="string">"--headless"</span>)</span><br><span class="line">    op.add_argument(<span class="string">"--disable-dev-shm-usage"</span>)</span><br><span class="line">    op.add_argument(<span class="string">"--no-sandbox"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    # avoid detection 好孩子先不要 ^.&lt;</span></span><br><span class="line"><span class="string">    op.add_argument('--disable-infobars')</span></span><br><span class="line"><span class="string">    op.add_experimental_option('useAutomationExtension', False)</span></span><br><span class="line"><span class="string">    op.add_experimental_option("excludeSwitches", ["enable-automation"])</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> webdriver.Chrome(executable_path=os.environ.get(<span class="string">"CHROMEDRIVER_PATH"</span>), options=op)</span><br></pre></td></tr></table></figure></p><h3 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h3><p></p><p>然後就可以進行部署使用了，Heroku APP會需要安裝許多依賴套件而增加100+MB的使用空間。</p><p>透過APP bash測試從證交所擷取上市股票代號一覽表⬇︎<br><img src="https://i.imgur.com/SrXtcYd.png" alt></p><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref."></a>Ref.</h3><p></p><p><br>＊<a href="https://www.andressevilla.com/running-chromedriver-with-python-selenium-on-heroku/" target="_blank" rel="noopener">Running ChromeDriver with Python Selenium on Heroku</a><br>＊<a href="https://selenium-python.readthedocs.io/" target="_blank" rel="noopener">Selenium 官方文件</a></p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p></p><p><br>關於動態網頁資料擷取的小技巧：雖然Selenium WebDriverWait提供explicit waits可等待指定頁面元素載入，但實際上並沒有這麼順利，不過這也是讓我覺得學習web crawler有趣的地方(儘管有時候很頭疼😖)。有時候會發生指定元素確實在頁面上載入完成了，但內容卻是空空如也，又或許是我慧根不夠用不好<a href="https://selenium-python.readthedocs.io/waits.html?highlight=WebDriverWait#explicit-waits" target="_blank" rel="noopener">text_to_be_present_in_element</a>，試了半天還是抓不到我要的數據。哭啊，我就是要擷取內容文字咩！只好換個方式等待：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"></span><br><span class="line">driver = get_chrome()</span><br><span class="line">driver.get(<span class="string">""</span>)</span><br><span class="line">is_text = <span class="keyword">lambda</span> driver: driver.find_element_by_css_selector(<span class="string">''</span>).text.strip() != <span class="string">''</span></span><br><span class="line">WebDriverWait(driver, <span class="number">30</span>, <span class="number">0.5</span>).until(is_text)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如題。
    
    </summary>
    
      <category term="Data Science" scheme="https://laplacetw.github.io/categories/Data-Science/"/>
    
    
      <category term="python" scheme="https://laplacetw.github.io/tags/python/"/>
    
      <category term="web crawler" scheme="https://laplacetw.github.io/tags/web-crawler/"/>
    
      <category term="heroku" scheme="https://laplacetw.github.io/tags/heroku/"/>
    
      <category term="selenium" scheme="https://laplacetw.github.io/tags/selenium/"/>
    
      <category term="chrome driver" scheme="https://laplacetw.github.io/tags/chrome-driver/"/>
    
  </entry>
  
  <entry>
    <title>2020 Medical AI Summer Camp</title>
    <link href="https://laplacetw.github.io/medical-AI-summer-camp-2020/"/>
    <id>https://laplacetw.github.io/medical-AI-summer-camp-2020/</id>
    <published>2020-09-01T13:57:37.000Z</published>
    <updated>2020-09-01T15:22:55.932Z</updated>
    
    <content type="html"><![CDATA[<p>學校信箱每天都會收到一堆讓人想直接刪除的信，但我還是會讀完主旨再刪除(?)，畢竟偶爾還是會有不錯的資訊，例如免費的研習…和便當。<a id="more"></a>此研習為科技部補助學校成立的AI生醫創新研究中心所舉辦，報名人數竟然多到要加開教室用視訊連線。</p><p>議程：</p><table><thead><tr><th style="text-align:center">08/31</th><th style="text-align:center">09/01</th></tr></thead><tbody><tr><td style="text-align:center">淺談機器學習與深度學習</td><td style="text-align:center">雲端人工智慧在醫學影像的應用</td></tr><tr><td style="text-align:center">人工智慧於生理計算之應用—訊號篇</td><td style="text-align:center">人工智慧與自然語言處理概述—以台語在醫療服務之應用為例</td></tr><tr><td style="text-align:center">人工智慧於生理計算之應用—影像篇</td><td style="text-align:center">AWS雲端資源分享</td></tr><tr><td style="text-align:center">快速掌握「雲端運算」</td><td style="text-align:center">AWS AI/ML工具與應用</td></tr></tbody></table><p>說實話我並沒有特別期待議題的深度，畢竟講者還是要考量聽眾的程度做調整，如果講演算法或公式推導應該會睡成一片吧😂&nbsp;&nbsp;&nbsp;但我覺得第一天的「人工智慧於生理計算之應用」的內容非常豐富且淺顯易懂，講者分享了將人工智慧應用於肺部CT影像病灶辨識以及睡眠狀態偵測的實務經驗，真的很感謝講師分享如此珍貴的經驗，我想這都是需要投入不少時間跟資源去研究的。</p><p>而第二天竟然有AWS的市場拓展代表來介紹他們家的雲端運算服務，然後我才知道學校有加入AWS Educate，這還不光速註冊一波啊是不是😎&nbsp;&nbsp;&nbsp;聽完他們的簡報，對AWS的平台生態與產品線有較為廣泛的了解…真不愧是市佔龍頭，最後還有提到AWS的量子運算服務也已經上線了，不過就只是提一下XD 科技巨頭們的量子霸權之羅馬競技生死鬥還有得打呢。</p><p><img src="https://i.imgur.com/YVVX2M0.png" alt></p><p>便當ㄏ呷，完。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;學校信箱每天都會收到一堆讓人想直接刪除的信，但我還是會讀完主旨再刪除(?)，畢竟偶爾還是會有不錯的資訊，例如免費的研習…和便當。
    
    </summary>
    
      <category term="Workshop" scheme="https://laplacetw.github.io/categories/Workshop/"/>
    
    
      <category term="big data" scheme="https://laplacetw.github.io/tags/big-data/"/>
    
      <category term="deep learning" scheme="https://laplacetw.github.io/tags/deep-learning/"/>
    
      <category term="cloud computing" scheme="https://laplacetw.github.io/tags/cloud-computing/"/>
    
  </entry>
  
  <entry>
    <title>Apache Kafka安裝測試</title>
    <link href="https://laplacetw.github.io/data-sci-kafka-hello-world/"/>
    <id>https://laplacetw.github.io/data-sci-kafka-hello-world/</id>
    <published>2020-08-26T07:19:58.000Z</published>
    <updated>2020-08-27T06:16:56.158Z</updated>
    
    <content type="html"><![CDATA[<p>紀錄前陣子嘗試建立Kafka平台模擬事件串流的過程。<a id="more"></a>模擬的情境是，假設有人感染了COVID-19，然後我們要利用Kafka Producer發佈該事件通知，使Kafka Consumer接收到訊息並顯示出來。</p><h3 id="What-is-Apache-Kafka"><a href="#What-is-Apache-Kafka" class="headerlink" title="What is Apache Kafka?"></a>What is Apache Kafka?</h3><p><a href="https://kafka.apache.org/" target="_blank" rel="noopener">Apache Kafka官網</a>：</p><blockquote><p>Apache Kafka is an open-source <font color="red">distributed</font> event streaming platform used by thousands of companies for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications.</p></blockquote><p><a href="https://zh.wikipedia.org/wiki/Kafka" target="_blank" rel="noopener">維基中文頁面</a>：</p><blockquote><p>Kafka最初是由領英開發，由Scala和Java編寫，於2011年初開源。該專案的目標是為處理即時資料提供一個統一、高吞吐、低延遲的平台。</p></blockquote><p>在Kafka中有幾個主要的概念：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">Broker</td><td style="text-align:center">實現資料儲存的主機伺服器</td></tr><tr><td style="text-align:center">Producer</td><td style="text-align:center">訊息的生產者</td></tr><tr><td style="text-align:center">Consumer</td><td style="text-align:center">訊息的消費者</td></tr><tr><td style="text-align:center">Topic</td><td style="text-align:center">訊息的分類</td></tr><tr><td style="text-align:center">Partition</td><td style="text-align:center">Topic中的訊息會被分為若干Partition，以提高訊息處理效率</td></tr></tbody></table><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><ul><li>安裝JDK：<a href="https://www.oracle.com/tw/java/technologies/javase-downloads.html" target="_blank" rel="noopener">官網下載連結</a></li><li>下載Apache Kafka並解壓縮：<a href="https://kafka.apache.org/downloads" target="_blank" rel="noopener">官網下載連結</a></li><li>安裝kafka-python套件<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install kafka-python</span><br></pre></td></tr></table></figure></li></ul><h3 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h3><p>移動到解壓縮後的Kafka資料夾根目錄</p><ul><li><p>啟動Zookeeper server</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/zookeeper-server-start.sh config/zookeeper.properties</span><br></pre></td></tr></table></figure></li><li><p>啟動Kafka server</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-server-start.sh config/server.properties</span><br></pre></td></tr></table></figure></li></ul><p>＊<a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">Apache Zookeeper</a>是用來管理Kafka分散式叢集(Brokers)組態設定與其資源配置的服務。<br>＊啟動server若顯示以下錯誤訊息：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Unrecognized VM option <span class="string">'PrintGCDateStamps'</span></span><br><span class="line">Error: Could not create the Java Virtual Machine.</span><br><span class="line">Error: A fatal exception has occurred. Program will <span class="built_in">exit</span>.</span><br></pre></td></tr></table></figure></p><p>參考<a href="https://stackoverflow.com/questions/36970622/kafka-unrecognized-vm-option-printgcdatestamps" target="_blank" rel="noopener">stackoverflow相關討論</a>，修改/bin/kafka-run-class.sh這個檔案：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$JAVA_MAJOR_VERSION</span>"</span> -ge <span class="string">"9"</span> ]]</span><br></pre></td></tr></table></figure></p><p><font color="red">將上述的if條件式內容修改為</font></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_MAJOR_VERSION=$(<span class="variable">$JAVA</span> -version 2&gt;&amp;1 | sed -E -n <span class="string">'s/.* version "([^.-]*).*/\1/p'</span>)</span><br></pre></td></tr></table></figure><ul><li><p>建立Topic<br>以下指令會建立一個具有一個副本、一個分區的名稱為covid-19的Topic：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic covid-19</span><br></pre></td></tr></table></figure></li><li><p>確認已建立的Topic</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure></li><li><p>Producer</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> kafka <span class="keyword">import</span> KafkaProducer</span><br><span class="line">producer = KafkaProducer(bootstrap_servers=<span class="string">'localhost:9092'</span>)</span><br><span class="line">counter = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    msg = <span class="string">'[Total: '</span> + str(counter) + <span class="string">']Someone is contracted COVID-19! Be careful!'</span></span><br><span class="line">    msg = msg.encode(<span class="string">'ascii'</span>)</span><br><span class="line">    producer.send(<span class="string">'covid-19'</span>, msg)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    counter += <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>Consumer</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> kafka <span class="keyword">import</span> KafkaConsumer</span><br><span class="line">consumer = KafkaConsumer(<span class="string">'covid-19'</span>)</span><br><span class="line"><span class="keyword">for</span> msg <span class="keyword">in</span> consumer:</span><br><span class="line">    print(msg.value.decode(<span class="string">'ascii'</span>))</span><br></pre></td></tr></table></figure></li></ul><p>可以看到Consumer都接收到了COVID-19事件通知⬇︎<br><img src="https://i.imgur.com/DK82jfm.gif" alt></p><p>Ref. <a href="https://timber.io/blog/hello-world-in-kafka-using-python" target="_blank" rel="noopener">Hello World In Kafka Using Python</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;紀錄前陣子嘗試建立Kafka平台模擬事件串流的過程。
    
    </summary>
    
      <category term="Data Science" scheme="https://laplacetw.github.io/categories/Data-Science/"/>
    
    
      <category term="python" scheme="https://laplacetw.github.io/tags/python/"/>
    
      <category term="kafka" scheme="https://laplacetw.github.io/tags/kafka/"/>
    
      <category term="big data" scheme="https://laplacetw.github.io/tags/big-data/"/>
    
  </entry>
  
  <entry>
    <title>Python分割影片為指定長度</title>
    <link href="https://laplacetw.github.io/python-video-split/"/>
    <id>https://laplacetw.github.io/python-video-split/</id>
    <published>2020-08-24T03:38:49.000Z</published>
    <updated>2020-08-24T06:46:03.546Z</updated>
    
    <content type="html"><![CDATA[<p>人們經常在通訊軟體分享各種多媒體訊息，而影片長度或檔案大小可能會有上傳限制，只好將其分割成多個片段上傳。<a id="more"></a>就Line而言，我查到的資訊是限制影片長度5分鐘內、檔案大小300MB以下，就能順利傳送並於聊天室中播放。短片的話自己手動分割一下就行了，但你知道的(?)，有些人分享的片段完整加總起來都數十分鐘甚至一個多小時，仔細觀察那些片段的長度竟然都不一樣，而且還有上字(XXX分享之類的)，這…還真是吃力不討好啊，我只能說祝大大一生平安🙆‍♂️。</p><hr><p>還是交給程式來處理吧，指定影片分割秒數，並自動在片頭上字持續3秒做為順序標記。此範例需用到<a href="https://pypi.org/project/moviepy/" target="_blank" rel="noopener">moviepy</a>套件，且需事先安裝<a href="https://ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a>和<a href="https://imagemagick.org/script/download.php" target="_blank" rel="noopener">ImageMagick</a>這兩個開源軟體。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> moviepy.editor <span class="keyword">as</span> mp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># e.g. video_split("./LaplaceTW.mp4", 300)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">video_split</span><span class="params">(filepath, duration)</span>:</span></span><br><span class="line">    video = mp.VideoFileClip(filepath).resize(width=<span class="number">720</span>)</span><br><span class="line">    video_length = int(video.duration) <span class="comment"># seconds</span></span><br><span class="line">    parts = int(video_length / duration)</span><br><span class="line">    remaining = video_length - (duration * parts)</span><br><span class="line">    parts = (parts + <span class="number">1</span>) <span class="keyword">if</span> remaining &gt; <span class="number">0</span> <span class="keyword">else</span> parts</span><br><span class="line">    print(<span class="string">"Video Length:"</span>, video_length, <span class="string">" | Split Parts:"</span>, parts)</span><br><span class="line"></span><br><span class="line">    start, end = <span class="number">0</span>, duration</span><br><span class="line">    <span class="keyword">for</span> part <span class="keyword">in</span> range(<span class="number">1</span>, parts + <span class="number">1</span>):</span><br><span class="line">        title = <span class="string">"Part."</span> + str(part)</span><br><span class="line">        text = (mp.TextClip(title, fontsize=<span class="number">50</span>, color=<span class="string">'yellow'</span>)</span><br><span class="line">            .set_pos((<span class="string">"right"</span>, <span class="string">"top"</span>))</span><br><span class="line">            .set_duration(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">        clip = video.subclip(start, end)</span><br><span class="line">        clip = mp.CompositeVideoClip([clip, text])</span><br><span class="line">        clip.write_videofile(title + <span class="string">'.mp4'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> part == parts - <span class="number">1</span> <span class="keyword">and</span> remaining &gt; <span class="number">0</span>:</span><br><span class="line">            start += duration</span><br><span class="line">            end += remaining</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            start += duration</span><br><span class="line">            end += duration</span><br></pre></td></tr></table></figure><p>分割長時間影片 ⬇︎<br><img src="https://i.imgur.com/IgC7WQW.png" alt></p><p>處理結果 ⬇︎<br><img src="https://i.imgur.com/XqVlcYG.gif" alt></p><hr><p>＊若沒有安裝ImageMagick則會發生執行錯誤：[Errno 2] No such file or directory: ‘unset’: ‘unset’<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">OSError: MoviePy Error: creation of None failed because of the following error:</span><br><span class="line"></span><br><span class="line">[Errno 2] No such file or directory: <span class="string">'unset'</span>: <span class="string">'unset'</span>.</span><br><span class="line"></span><br><span class="line">.This error can be due to the fact that ImageMagick is not installed on your computer, </span><br><span class="line">or (<span class="keyword">for</span> Windows users) that you didn<span class="string">'t specify the path to the ImageMagick binary in </span></span><br><span class="line"><span class="string">file conf.py, or that the path you specified is incorrect</span></span><br></pre></td></tr></table></figure></p><p>Ref. <a href="https://github.com/Zulko/moviepy/issues/1003" target="_blank" rel="noopener">TextClip Doesn’t work at all #1003</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人們經常在通訊軟體分享各種多媒體訊息，而影片長度或檔案大小可能會有上傳限制，只好將其分割成多個片段上傳。
    
    </summary>
    
      <category term="Python" scheme="https://laplacetw.github.io/categories/Python/"/>
    
    
      <category term="python" scheme="https://laplacetw.github.io/tags/python/"/>
    
      <category term="moviepy" scheme="https://laplacetw.github.io/tags/moviepy/"/>
    
      <category term="mytoolbox" scheme="https://laplacetw.github.io/tags/mytoolbox/"/>
    
  </entry>
  
  <entry>
    <title>COSCUP 2020！</title>
    <link href="https://laplacetw.github.io/coscup-2020/"/>
    <id>https://laplacetw.github.io/coscup-2020/</id>
    <published>2020-08-03T08:13:20.000Z</published>
    <updated>2020-08-05T06:29:26.940Z</updated>
    
    <content type="html"><![CDATA[<p>決定得很臨時，但今年不用搶票，只要填寫健康聲明書就能參加了。<a id="more"></a>雖說COSCUP是免費參加的，但小資如我還是有個人贊助點小錢，希望往後自己每年都能參加。剛好我的三倍券也還沒想到要用在哪，於是趕緊綁定信用卡、光速訂了高鐵票和商旅，週五晚間就飛奔到台北準備參加人生第一場COSCUP😎。</p><p>COSCUP 2020官網：<a href="https://coscup.org/2020/zh-TW" target="_blank" rel="noopener">https://coscup.org/2020/zh-TW</a></p><blockquote><p>開發者 (Coders)、使用者 (Users) 和推廣者 (Promoters) 是讓自由及開放原始碼軟體發光發熱的三大支柱，這個研討會就是專為這三種人舉辦的：你可以是 A 軟體的開發者、B 軟體的推廣者、C 軟體的使用者，不論你是已經踏入自由及開放原始碼軟體領域，還是一直站在門口不知如何入門，歡迎你來參加 COSCUP — Conference for Open Source Coders, Users and Promoters!</p></blockquote><p>這兩天的落腳處⬇︎<br><img src="https://i.imgur.com/eIUe5PV.jpg" alt></p><p>COSCUP今年依然在台科大舉辦，我照官網所說的搭捷運到公館站，從2號出口旁沿著舟山路行走至鹿鳴堂，再右轉欒樹道走到底，這才抵達台科大…步行約10分鐘，熱到爆炸。</p><p>Badge⬇︎<br><img src="https://i.imgur.com/7Sy02Dw.jpg" alt></p><p>主議程會場⬇︎<br><img src="https://i.imgur.com/b80Zd26.jpg" alt></p><p>我在行前有根據議程表稍微規劃了想聽的議程，這次也和多年不見的友人約好在COSCUP碰面，時光飛逝相當有感…不過中午外出用餐回來沒趕上唐鳳政委主講的議題，畢竟現在疫情仍未趨緩，各個議程都是有人數管制的，只好在外頭透過直播觀看天才挨踢大臣的演講。</p><p>第一天印象最深刻的就是交大陳志成教授所主講，關於他們的團隊所開發的<a href="https://github.com/free5gc/free5gc" target="_blank" rel="noopener">free5GC</a>，為世界第一套符合國際標準的開放原始碼5G核心網路。<br><img src="https://i.imgur.com/vxqXSla.jpg" alt><br><img src="https://i.imgur.com/RRdmuOt.jpg" alt></p><p>第二天我只能參加上午的議題，然後就要趕搭高鐵回去了，但仍是參加了很棒的兩場議程，其一是Vue的作者、大神<a href="https://twitter.com/youyuxi" target="_blank" rel="noopener">Evan You</a>主講關於Vue第三版的開發過程所涉及的技術難點與設計取捨，雖然受疫情影響是採遠端連線會議，但這依然是令人興奮的議程！有趣的是，在議程最後的QA時間，有人問了Evan You這樣的一個問題：</p><blockquote><p>請問Vue和React有什麼不同呢？</p></blockquote><p>眾人不禁哄堂大笑😂，Evan You也無奈地笑了笑，但他還是相當耐心地解釋、提出他的看法。</p><p>議程結束後，我又立刻趕到另一個會場參加關於Pi Thermal Camera的議題，因為之前用Adafruit AMG8833 Module做過低解析度的熱成像儀，所以個人是相當期待這場議題的，我打算之後購買更高解析度的模組來進行進階實作。</p><p>從Mozilla Taiwan Community的攤位獲得了帥氣的Firefox胸章！⬇︎<br><img src="https://i.imgur.com/3XN2maN.jpg" alt></p><p>收集到了好多貼紙呀🙆‍♂️ ⬇︎<br><img src="https://i.imgur.com/7Jq8Gn9.jpg" alt></p><p>完。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;決定得很臨時，但今年不用搶票，只要填寫健康聲明書就能參加了。
    
    </summary>
    
      <category term="Workshop" scheme="https://laplacetw.github.io/categories/Workshop/"/>
    
    
      <category term="coscup" scheme="https://laplacetw.github.io/tags/coscup/"/>
    
  </entry>
  
  <entry>
    <title>Arduino UNO：Coffin Dance</title>
    <link href="https://laplacetw.github.io/arduino-uno-r3-buzzer-astronomia/"/>
    <id>https://laplacetw.github.io/arduino-uno-r3-buzzer-astronomia/</id>
    <published>2020-07-16T16:11:58.000Z</published>
    <updated>2020-07-17T14:13:34.472Z</updated>
    
    <content type="html"><![CDATA[<p>其實原曲名叫Astronomia啊，只是被幾位知名舞者(?)給抬出名了。<a id="more"></a>看到Arduino範例程式的toneMelody發出了一段像是gameover的音效，我就想讓蜂鳴器播放這段相當知名的迷因歌曲🤣</p><p>蜂鳴器分為有(震盪)源蜂鳴器，和無(震盪)源蜂鳴器，有源蜂鳴器就是高電位逼逼叫，低電位不叫，就這樣。而無源的蜂鳴器就好玩了，可以控制其聲音頻率而產生音調高低。</p><h3 id="Music-Scales"><a href="#Music-Scales" class="headerlink" title="Music Scales"></a>Music Scales</h3><p>參考範例程式中所引入的pitches.h檔案內容：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_B0  31</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_C1  33</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_CS1 35</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_C4  262</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_CS4 277</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOTE_D4  294</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><br>這個.h檔即是定義<a href="https://zh.wikipedia.org/wiki/%E5%94%B1%E5%90%8D" target="_blank" rel="noopener">唱名</a>所對應的聲音頻率(Hz)，其中C4就是鋼琴琴鍵的中央C，亦即C大調的低音Do。如此一來只要有簡譜，像我這樣對樂理沒輒的人也能教Arduino怎麼演奏音樂了呢。</p><h3 id="LCD-Screen"><a href="#LCD-Screen" class="headerlink" title="LCD Screen"></a>LCD Screen</h3><p>然後我想用個LCD在旁邊顯示播放的曲名，參考<a href="https://blog.gtwang.org/iot/ywrobot-arduino-lcm-1602-iic-v1-lcd-display" target="_blank" rel="noopener">GTW的教學</a>解決了我在編譯時發生的找不到函式庫的問題。要使用HD44780U 1602 LCD須安裝<a href="https://bitbucket.org/fmalpartida/new-liquidcrystal/downloads/" target="_blank" rel="noopener">LiquidCrystal library</a>，下載後解壓縮到Arduino的libraries資料夾底下即可。但這邊又有個小問題：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Arduino:1.8.13 (Mac OS X), 開發板:"Arduino Uno"</span><br><span class="line">/Users/nick/Documents/Arduino/libraries/LiquidCrystal/I2CIO.cpp:35:10: fatal error: ../Wire/Wire.h: No such file or directory</span><br><span class="line"><span class="meta"> #</span>include &lt;../Wire/Wire.h&gt;</span><br></pre></td></tr></table></figure></p><p>這就要找到剛剛解壓縮的資料夾中的I2CIO.cpp，將#include &lt;../Wire/Wire.h&gt;改為#include &lt;Wire.h&gt;。</p><p>*1602 LCD的pin腳說明與像素點控制等教學：<a href="https://lastminuteengineers.com/arduino-1602-character-lcd-tutorial/" target="_blank" rel="noopener">Interfacing 16×2 Character LCD Module with Arduino</a></p><h3 id="Play-Music"><a href="#Play-Music" class="headerlink" title="Play Music!"></a>Play Music!</h3><p>經過強迫症似的反覆聆聽和調整節拍，我覺得很接近原曲了😆<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;LiquidCrystal_I2C.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pitches.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_BUZ 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Ref. https://youtu.be/miwoTFkiIfQ</span></span><br><span class="line"><span class="keyword">int</span> melody[] = &#123;</span><br><span class="line">    NOTE_AS4, NOTE_AS4, NOTE_AS4, NOTE_AS4,</span><br><span class="line">    NOTE_D5, NOTE_D5, NOTE_D5, NOTE_D5,</span><br><span class="line">    NOTE_C5, NOTE_C5, NOTE_C5, NOTE_C5,</span><br><span class="line">    NOTE_F5, NOTE_F5, NOTE_F5, NOTE_F5,</span><br><span class="line">    NOTE_G5, NOTE_G5, NOTE_G5, NOTE_G5, NOTE_G5, NOTE_G5,</span><br><span class="line">    NOTE_G5, NOTE_G5, NOTE_G5, NOTE_G5, NOTE_G5, NOTE_G5,</span><br><span class="line">    NOTE_C5, NOTE_AS4, NOTE_A4, NOTE_G4,</span><br><span class="line">    NOTE_G4, <span class="number">0</span>, NOTE_G4, NOTE_D5, NOTE_C5, NOTE_AS4, NOTE_A4, NOTE_A4, NOTE_A4,</span><br><span class="line">    NOTE_C5, NOTE_AS4, NOTE_A4, NOTE_G4, NOTE_G4, NOTE_G4,</span><br><span class="line">    NOTE_AS5, NOTE_A5, NOTE_AS5, NOTE_A5, NOTE_AS5, NOTE_G4,</span><br><span class="line">    NOTE_AS5, NOTE_A5, NOTE_AS5, NOTE_A5, NOTE_AS5, NOTE_G4</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// note durations: 4 = quarter note, 8 = eighth note, etc.:</span></span><br><span class="line">byte noteDurations[] = &#123;</span><br><span class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the pins on the I2C chip used for LCD connections:</span></span><br><span class="line"><span class="comment">//                    addr, en,rw,rs,d4,d5,d6,d7,bl,blpol</span></span><br><span class="line"><span class="function">LiquidCrystal_I2C <span class="title">lcd</span><span class="params">(<span class="number">0x27</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, POSITIVE)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lcd.begin(<span class="number">16</span>, <span class="number">2</span>); <span class="comment">// lcd initial</span></span><br><span class="line">    lcd.backlight(); <span class="comment">// turn on the backlight</span></span><br><span class="line">    lcd.setCursor(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    lcd.print(<span class="string">"Play:Astronomia"</span>);</span><br><span class="line">    lcd.setCursor(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    lcd.print(<span class="string">"(Coffin Dance)"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// iterate over the notes of the melody:</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> thisNote = <span class="number">0</span>; thisNote &lt; <span class="number">59</span>; thisNote++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// to calculate the note duration, take one second divided by the note type.</span></span><br><span class="line">        <span class="comment">//e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.</span></span><br><span class="line">        <span class="keyword">int</span> noteDuration = <span class="number">1000</span> / noteDurations[thisNote];</span><br><span class="line">        tone(PIN_BUZ, melody[thisNote], noteDuration);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// to distinguish the notes, set a minimum time between them.</span></span><br><span class="line">        <span class="comment">// the note's duration + 30% seems to work well:</span></span><br><span class="line">        <span class="keyword">int</span> pauseBetweenNotes = noteDuration * <span class="number">1.30</span>;</span><br><span class="line">        delay(pauseBetweenNotes);</span><br><span class="line">        <span class="comment">// stop the tone playing:</span></span><br><span class="line">        noTone(PIN_BUZ);</span><br><span class="line">    &#125;</span><br><span class="line">    delay(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>感謝<a href="https://youtu.be/miwoTFkiIfQ" target="_blank" rel="noopener">這位大叔的彈奏教學</a>。<br><div class="video-container"><iframe src="//www.youtube.com/embed/wqYNDwmzXDE" frameborder="0" allowfullscreen></iframe></div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其實原曲名叫Astronomia啊，只是被幾位知名舞者(?)給抬出名了。
    
    </summary>
    
      <category term="Arduino" scheme="https://laplacetw.github.io/categories/Arduino/"/>
    
    
      <category term="IoT" scheme="https://laplacetw.github.io/tags/IoT/"/>
    
      <category term="arduino" scheme="https://laplacetw.github.io/tags/arduino/"/>
    
  </entry>
  
  <entry>
    <title>Arduino UNO：RGB模組、PWM、負數</title>
    <link href="https://laplacetw.github.io/arduino-uno-r3-rgb-module/"/>
    <id>https://laplacetw.github.io/arduino-uno-r3-rgb-module/</id>
    <published>2020-07-13T14:42:09.000Z</published>
    <updated>2020-07-15T09:24:56.696Z</updated>
    
    <content type="html"><![CDATA[<p>What happens if we give a negative value to analogWrite() ?<a id="more"></a>當我看了learning kit提供的、關於RGB模組的範例，在輸出給RGB的數值變化過程中是有出現負值的，於是我困惑了很久，想弄明白analogWrite()如何處理負數。</p><h3 id="PWM"><a href="#PWM" class="headerlink" title="PWM"></a>PWM</h3><p>PWM = Pulse Width Modulation，脈衝寬度調變，是一種利用數位脈衝訊號模擬類比訊號的技術，如何模擬呢？我們知道數位訊號只有0與1兩種狀態，也就是低電位與高電位，而在頻率不變的狀態下，改變工作週期大小，使整體平均電壓值上升或下降來做到控制或節能的行為，這就是PWM。白話點說呢，就是快速的開、關、開、關、開、關…以LED燈來說，就是快到肉眼無法察覺的程度，當我們調整工作週期中開和關的持續時間比例，若開的時間較長，那麼LED燈看起來就比較亮，反之則較暗。</p><p>在Arduino中可用PWM模擬0~5v之間的電壓。圖片連結自<a href="https://www.arduino.cc/en/tutorial/PWM" target="_blank" rel="noopener">arduino.cc</a>⬇︎<br><img src="https://www.arduino.cc/en/uploads/Tutorial/pwm.gif" alt></p><h3 id="RGB-Module"><a href="#RGB-Module" class="headerlink" title="RGB Module"></a>RGB Module</h3><p>我手邊的是共陽極RGB模組，也就是其4根接腳為VCC、R、G、B。<br><img src="https://i.imgur.com/R6BxKqA.jpg" alt></p><p>RGB模組範例程式：<br>此範例使用有PWM功能的digital I/O pin 9 ~ 11，原始範例是有對這3個腳位設定pin mode，但<a href="https://www.arduino.cc/reference/en/language/functions/analog-io/analogwrite/" target="_blank" rel="noopener">Arduino官方說analogWrite()不需要設定pin mode喔</a>：</p><blockquote><p>You do not need to call pinMode() to set the pin as an output before calling analogWrite().<br>The analogWrite function has nothing to do with the analog pins or the analogRead function.</p></blockquote><p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_G 9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_B 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_R 11</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Serial.begin(<span class="number">9600</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">255</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> blue = <span class="number">128</span> -i;</span><br><span class="line">        <span class="comment">//twos_complement(blue);</span></span><br><span class="line"></span><br><span class="line">        analogWrite(PIN_R, i);</span><br><span class="line">        analogWrite(PIN_B, blue); <span class="comment">// 127 -&gt; 0 -&gt; 127 </span></span><br><span class="line">        analogWrite(PIN_G, <span class="number">255</span> - i);</span><br><span class="line"></span><br><span class="line">        delay(<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">255</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> blue = <span class="number">128</span> -i;</span><br><span class="line">        <span class="comment">//twos_complement(blue);</span></span><br><span class="line"></span><br><span class="line">        analogWrite(PIN_R, i); </span><br><span class="line">        analogWrite(PIN_B, blue); <span class="comment">// 128 -&gt; 0 -&gt; 126 </span></span><br><span class="line">        analogWrite(PIN_G, <span class="number">255</span> - i);</span><br><span class="line"></span><br><span class="line">        delay(<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twos_complement</span><span class="params">(<span class="keyword">int</span> binary)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (binary &lt; <span class="number">0</span>) Serial.println((~binary) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> Serial.println(binary);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://i.imgur.com/WQXvn2G.gif" alt></p><h3 id="analogWrite"><a href="#analogWrite" class="headerlink" title="analogWrite()"></a>analogWrite()</h3><p>從上面的範例程式可以看到，analogWrite()寫入RGB module的B pin值，也就是for loop中的變數blue，它是會出現負值的。但analogWrite()只接受0 ~ 255之間的值呢？？？後來我找到<a href="https://techexplorations.com/blog/arduino/blog-what-happens-if-you-give-a-negative-pwm-value-to-analogwrite/" target="_blank" rel="noopener">一篇文章</a>說Arduino使用二補數來處理負數，於是我寫了twos_complement()來計算二補數並print出實際上寫入B pin的值。</p><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref."></a>Ref.</h3><p><a href="https://www.arduino.cc/en/tutorial/PWM" target="_blank" rel="noopener">https://www.arduino.cc/en/tutorial/PWM</a><br><a href="http://wiki.csie.ncku.edu.tw/embedded/PWM" target="_blank" rel="noopener">http://wiki.csie.ncku.edu.tw/embedded/PWM</a><br><a href="https://www.arduino.cc/reference/en/language/functions/analog-io/analogwrite/" target="_blank" rel="noopener">https://www.arduino.cc/reference/en/language/functions/analog-io/analogwrite/</a><br><a href="https://techexplorations.com/blog/arduino/blog-what-happens-if-you-give-a-negative-pwm-value-to-analogwrite/" target="_blank" rel="noopener">https://techexplorations.com/blog/arduino/blog-what-happens-if-you-give-a-negative-pwm-value-to-analogwrite/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What happens if we give a negative value to analogWrite() ?
    
    </summary>
    
      <category term="Arduino" scheme="https://laplacetw.github.io/categories/Arduino/"/>
    
    
      <category term="IoT" scheme="https://laplacetw.github.io/tags/IoT/"/>
    
      <category term="arduino" scheme="https://laplacetw.github.io/tags/arduino/"/>
    
  </entry>
  
  <entry>
    <title>正確理解YOLO的辨識準確率</title>
    <link href="https://laplacetw.github.io/data-sci-yolo-accuracy/"/>
    <id>https://laplacetw.github.io/data-sci-yolo-accuracy/</id>
    <published>2020-07-07T17:56:17.000Z</published>
    <updated>2020-08-05T06:36:45.670Z</updated>
    
    <content type="html"><![CDATA[<p>這幾天媒體報導了<a href="https://arxiv.org/abs/2004.10934" target="_blank" rel="noopener">YOLOv4</a>的相關新聞，提到其為中研院研究團隊與俄羅斯開發者所共同研發，而這全世界最快最準的物體偵測演算法，其平均準確率為43.5%，於是這43.5%的準確率迅速引來許多不明就裡的人留言批評。<a id="more"></a>不懂沒有關係，我們可以先查證，再提出質疑，而非只是「我覺得這準確率有夠低」就輕率地批評指責(中研院難道是能隨便誇大其詞的研究機構嗎？)，但你可能連state-of-the-art意味什麼都不明白。這對無私貢獻的<a href="https://zh.wikipedia.org/wiki/%E9%96%8B%E6%BA%90%E8%BB%9F%E9%AB%94" target="_blank" rel="noopener">Open Source</a>開發者一點都不公平，真是站著說話不腰疼、躺著留言不費勁。</p><h2 id="什麼是YOLO"><a href="#什麼是YOLO" class="headerlink" title="什麼是YOLO?"></a>什麼是YOLO?</h2><p></p><p><a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">YOLO官網</a>是這麼介紹它自己的：</p><blockquote><p>You only look once (YOLO) is a state-of-the-art, real-time object detection system. On a Pascal Titan X it processes images at 30 FPS and has a mAP of 57.9% on COCO test-dev. (YOLO是最先進的即時物體偵測系統，在Pascal Titan X GPU上以30 FPS的速度處理影像，於COCO測試開發資料集中的mAP為57.9%)</p></blockquote><p>然後我們可能又會疑惑：FPS? COCO? mAP? 別著急，多理解一下物體偵測。</p><p>電腦是如何進行物體偵測？一般做法是透過各種選擇性搜索演算法(selective search)，偵測、分割出影像中可能有物體存在的區域(region proposal)，那麼沒有物體存在的區域就不需要進行無效的運算，也能加快處理速度，接著再對這些可能有物體存在的區域進行辨識分類。如此先搜索region proposal再進行辨識的處理方式稱為Two Stage(e.g. R-CNN)。<br><img src="https://i.imgur.com/O62Ncev.png" alt></p><p>但這有個潛在問題，假設系統偵測出影像中有數百個甚至上千個region proposal，那麼就得進行上千次的辨識運算…個人電腦即便有高階GPU亦可能做不到即時運算，更遑論行動裝置。</p><p></p><p>圖片連結自<a href="https://github.com/ouyanghuiyu/darknet_face_with_landmark" target="_blank" rel="noopener">https://github.com/ouyanghuiyu/darknet_face_with_landmark</a>⬇︎<br><img src="https://raw.githubusercontent.com/ouyanghuiyu/darknet_face_with_landmark/master/test_imgs/selfie.jpg" alt></p><p>於是我們有了One Stage(e.g. YOLO)，物體偵測和辨識一氣呵成，這樣的做法能大幅提升處理速度。不過有一好沒兩好，要速度快你就得在準確率做點取捨，因此整體辨識準確率相較Two Stage來得差一些，但One Stage在許多應用上仍是可接受範圍內，兩種作法各有其優勢，端看需求。<br><img src="https://i.imgur.com/OdWNkUk.png" alt></p><p>回到YOLO，自從2015年發佈v1發展至今，最新版本為今年4月底所發佈的v4，處理速度簡直快到沒朋友，但YOLO的創造者<a href="https://pjreddie.com/" target="_blank" rel="noopener">Joseph Redmon</a>今年二月<a href="https://twitter.com/pjreddie/status/1230524770350817280" target="_blank" rel="noopener">於推特宣佈退出電腦視覺研究領域</a>，當時引起相當大的討論，多少人引頸期盼YOLO的下個版本，Joseph Redmon表示自己的工作對人類社會的衝擊性實在太大了，即使熱愛電腦視覺的研究工作，但其終究無法忽視自己的研究成果在軍事科技應用以及個人隱私方面可能導致的問題。因此YOLOv4為俄羅斯開發者、YOLOv3的實現 — Darknet作者<a href="https://twitter.com/alexeyab84" target="_blank" rel="noopener">Alexey Bochkovskiy</a>與中研院資科所所長Hong-Yuan Liao及博士後研究員Chien-Yao Wang等三人基於後兩位研發的CSPNet，對YOLO的最新研究成果。而Joseph Redmon也<a href="https://github.com/pjreddie/darknet#darknet" target="_blank" rel="noopener">更新</a>了YOLOv4的論文與原始碼連結，顯示YOLOv4為官方所認可的後繼版本。</p><h2 id="什麼是FPS"><a href="#什麼是FPS" class="headerlink" title="什麼是FPS?"></a>什麼是FPS?</h2><p></p><p>FPS就是影格率或是經常聽到的幀數，<a href="https://zh.wikipedia.org/wiki/%E5%BD%B1%E6%A0%BC%E7%8E%87" target="_blank" rel="noopener">維基百科</a>就有寫了沒啥好說：</p><blockquote><p>影格率是用於測量顯示影格數的量度。測量單位為「每秒顯示影格數」(Frame per Second，FPS)或「赫茲」，一般來說FPS用於描述影片、電子繪圖或遊戲每秒播放多少影格。</p></blockquote><h2 id="什麼是COCO資料集？"><a href="#什麼是COCO資料集？" class="headerlink" title="什麼是COCO資料集？"></a>什麼是COCO資料集？</h2><p></p><p><a href="https://cocodataset.org/" target="_blank" rel="noopener">COCO資料集(Common Objects in Context)</a>是微軟所發佈、擁有33萬張影像的大型開源資料集：</p><blockquote><p>COCO is a large-scale object detection, segmentation, and captioning dataset. COCO has several features:</p><ul><li>Object segmentation</li><li>Recognition in context</li><li>Superpixel stuff segmentation</li><li>330K images (&gt;200K labeled)</li><li>1.5 million object instances</li><li>80 object categories</li><li>91 stuff categories</li><li>5 captions per image</li><li>250,000 people with keypoints</li></ul></blockquote><h2 id="什麼是mAP？"><a href="#什麼是mAP？" class="headerlink" title="什麼是mAP？"></a>什麼是mAP？</h2><p></p><p>mAP的”m”代表”mean”，簡而言之，AP(average precision)是用來評估物體識別模型效能表現的指標之一。我參考維基百科<a href="https://en.wikipedia.org/wiki/Precision_and_recall" target="_blank" rel="noopener">Precison and Recall</a>頁面的說明圖片，重新繪製了下方這張圖(原圖為直向)來說明。<br>*關於Precision and Recall可參考：<a href="https://medium.com/@ChingTien/529d18abc3a" target="_blank" rel="noopener">心理學和機器學習中的 Accuracy、Precision、Recall Rate 和 Confusion Matrix</a><br><img src="https://i.imgur.com/KgFbe8Y.png" alt></p><p>假設我現在要從一些含有各種物體的影像中找出狗的圖片，那麼上圖左側深灰色矩形代表狗的圖片集合，右側淺灰色影像代表其他物體的圖片集合，中間的大圓圈則是被判定為狗的圖片的集合，其中包含真的為狗的圖片(分類正確)以及不是狗的圖片(分類錯誤)。所以precision就代表在「所有被判定為狗的圖片」之中有多少<strong>比例</strong>是「狗的圖片」。</p><p>至於average precision的計算則是將precision加總後取平均值：</p><table><thead><tr><th style="text-align:center">判定為狗且真的為狗的圖片數</th><th style="text-align:center">判定為狗的圖片數</th><th style="text-align:center">Precision</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">1/2</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">1/3</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">4</td><td style="text-align:center">2/4</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">5</td><td style="text-align:center">2/5</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr></tbody></table><p>又物體識別會有許多類別，以COCO資料集而言就有80種object categories，mean average precision便是所有類別AP加總的平均值。</p><p>＊COCO資料集究竟有多少個類別？網路上有人說80種，也有人說91種，合理推測是將object categories跟stuff categories搞混了，這兩種分類的差異我也是看了某篇論文的摘要才明白，根據<a href="https://arxiv.org/abs/1612.03716" target="_blank" rel="noopener">COCO-Stuff: Thing and Stuff Classes in Context</a>所述：</p><blockquote><p>Semantic classes can be either things (objects with a well-defined shape, e.g. car, person) or stuff (amorphous background regions, e.g. grass, sky).</p></blockquote><p>object類就是能明確界定形狀的<strong>物體</strong>，例如汽車、人。stuff類則是沒有特定形狀或邊界的<strong>背景區域</strong>，例如草地、天空。懂！</p><h2 id="效能評估指標"><a href="#效能評估指標" class="headerlink" title="效能評估指標"></a>效能評估指標</h2><p></p><p>根據COCO資料集的效能評估頁面所述：</p><blockquote><p>Average Precision (AP):</p><ul><li>AP：AP at IoU=.50:.05:.95 (primary challenge metric)</li><li>AP IoU=.50：AP at IoU=.50 (PASCAL VOC metric)</li><li>AP IoU=.75：AP at IoU=.75 (strict metric)<br></li></ul></blockquote><p>從這段敘述可以確定COCO資料集效能評估指標的AP指的就是mAP：</p><blockquote><p>AP is averaged over all categories. Traditionally, this is called “mean average precision” (mAP). We make no distinction between AP and mAP (and likewise AR and mAR) and assume the difference is clear from context.</p></blockquote><p>說到這兒又得理解一個跟AP有關係的詞：IoU(Intersection over Union，並交比)，簡而言之，物體識別的IoU為物體標記範圍與系統偵測範圍這兩個集合的交集和並集之間的比例，有請台北市立動物園的水豚君幫忙示範一下：<br><img src="https://i.imgur.com/w7sc0Vc.jpg" alt><br>假設紅框為影像的原始標記邊界範圍a1，黃框為YOLO所偵測的物體邊界範圍a2，那麼IoU則為a1與a2的<strong>交集</strong>除以a1與a2的<strong>聯集</strong>。</p><p>因此以COCO資料集的AP指標而言，可以看到其IoU並非一個固定值，而是「.50:.05:.95」，意思是IoU共有{0.5, 0.55,…0.95}10個閾值，以這10個標準做判定、計算AP再取平均，而AP50(IoU=.50)或AP75(IoU=.75)則是傳統的評估方式。</p><h2 id="平均準確率"><a href="#平均準確率" class="headerlink" title="平均準確率"></a>平均準確率</h2><p></p><p>說了一堆，可以來看底下這張效能表現比較圖了。</p><p>我直接連結<a href="https://github.com/AlexeyAB/darknet" target="_blank" rel="noopener">Darknet</a>其GitHub頁面的圖片⬇︎<br><img src="https://user-images.githubusercontent.com/4096485/82835867-f1c62380-9ecd-11ea-9134-1598ed2abc4b.png" alt></p><p>YOLOv4的效能表現是相當突出的，在FPS為90的時候，v4的AP比v3多了10%，要不光看它和YOLOv3那條線之間有好大一段垂直距離也不難理解。對於一件事情的難易度若是沒有概念，只看43.5%這個數字能看出什麼呢？</p><p>YOLOv4論文摘要：</p><blockquote><p>We use new features: WRC, CSP, CmBN, SAT, Mish activation, Mosaic data augmentation, CmBN, DropBlock regularization, and CIoU loss, and combine some of them to achieve state-of-the-art results: 43.5% AP (65.7% AP50) for the MS COCO dataset at a realtime speed of ~65 FPS on Tesla V100.</p></blockquote><p>辨識無數的物體要<strong>即時</strong>又要<strong>快狠準</strong>你說容易嗎？<br><img src="https://i.imgur.com/NG4nEoT.png" alt><br><div class="video-container"><iframe src="//www.youtube.com/embed/1_SiUOYUoOI" frameborder="0" allowfullscreen></iframe></div></p><h2 id="Research-Papers-of-YOLO"><a href="#Research-Papers-of-YOLO" class="headerlink" title="Research Papers of YOLO"></a>Research Papers of YOLO</h2><p></p><p></p><ul><li><a href="https://arxiv.org/abs/1506.02640" target="_blank" rel="noopener">You Only Look Once: Unified, Real-Time Object Detection</a></li><li><a href="https://arxiv.org/abs/1612.08242" target="_blank" rel="noopener">YOLO9000: Better, Faster, Stronger</a></li><li><a href="https://arxiv.org/abs/1804.02767" target="_blank" rel="noopener">YOLOv3: An Incremental Improvement</a></li><li><a href="https://arxiv.org/abs/2004.10934" target="_blank" rel="noopener">YOLOv4: Optimal Speed and Accuracy of Object Detection</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這幾天媒體報導了&lt;a href=&quot;https://arxiv.org/abs/2004.10934&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;YOLOv4&lt;/a&gt;的相關新聞，提到其為中研院研究團隊與俄羅斯開發者所共同研發，而這全世界最快最準的物體偵測演算法，其平均準確率為43.5%，於是這43.5%的準確率迅速引來許多不明就裡的人留言批評。
    
    </summary>
    
      <category term="Data Science" scheme="https://laplacetw.github.io/categories/Data-Science/"/>
    
    
      <category term="deep learning" scheme="https://laplacetw.github.io/tags/deep-learning/"/>
    
      <category term="computer vision" scheme="https://laplacetw.github.io/tags/computer-vision/"/>
    
      <category term="yolo" scheme="https://laplacetw.github.io/tags/yolo/"/>
    
      <category term="darknet" scheme="https://laplacetw.github.io/tags/darknet/"/>
    
  </entry>
  
  <entry>
    <title>Arduino UNO R3</title>
    <link href="https://laplacetw.github.io/arduino-uno-r3-learning-kit/"/>
    <id>https://laplacetw.github.io/arduino-uno-r3-learning-kit/</id>
    <published>2020-07-02T03:00:47.000Z</published>
    <updated>2020-07-15T08:31:22.927Z</updated>
    
    <content type="html"><![CDATA[<p>終於有時間玩玩買來很久的learning kit。開發版種類繁多，但除了修課玩過Ti OMAP系列的PandaBoard、Devkit8000，也就自己買的樹莓派3B+了，<a id="more"></a>『這都2020了還沒玩過Arduino，豈不是要給人看笑話了😝』就這麼想著的某天便光速下單買來了套件組合準備試玩。</p><p><img src="https://i.imgur.com/jWi2s0M.jpg" alt></p><p>先下載<a href="https://www.arduino.cc/en/Main/Software" target="_blank" rel="noopener">Arduino IDE</a>，將Arduino透過USB接上PC，設置好USB連接埠就可以開始玩了，寫段程式碼來測試看看。<br><br>序列埠輸出要先用<a href="https://www.arduino.cc/reference/en/language/functions/communication/serial/begin/" target="_blank" rel="noopener">Serial.begin()</a>方法初始化、設定baud rate⬇︎<br><img src="https://i.imgur.com/PPlSksQ.png" alt><br><img src="https://i.imgur.com/OEk9ppo.png" alt></p><p>Arduino的程式架構基本上就是setup()跟loop()兩個函式，用來執行初始化和持續執行的動作，經過編譯後會整合為main()函式。<a href="https://zh.wikipedia.org/wiki/Arduino" target="_blank" rel="noopener">Arduino維基頁面</a>寫著其IDE是源自Processing程式語言，哈！想起大三時曾經修過清大MOOCs的玩電玩學程式課程，當時就是使用這有趣的語言，難怪有種熟悉感🤣</p><p>環境設置完成，使用幾個LED來測試、學習Arduino程式編寫：</p><h3 id="LED-Control"><a href="#LED-Control" class="headerlink" title="LED Control"></a>LED Control</h3><p><br><br><img src="https://i.imgur.com/iKiu4BM.png" alt><br>我將PIN 13設為輸出，因此板子上的LED也會跟著閃爍。<br><img src="https://i.imgur.com/AB5h1WK.gif" alt></p><h3 id="Traffic-Light"><a href="#Traffic-Light" class="headerlink" title="Traffic Light"></a>Traffic Light</h3><p>使用黃綠紅3顆LED模擬紅綠燈。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_LED_G 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_LED_Y 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_LED_R 4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  pinMode(PIN_LED_R, OUTPUT);</span><br><span class="line">  pinMode(PIN_LED_G, OUTPUT);</span><br><span class="line">  pinMode(PIN_LED_Y, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  digitalWrite(PIN_LED_G, HIGH);</span><br><span class="line">  delay(<span class="number">3000</span>);</span><br><span class="line">  digitalWrite(PIN_LED_G, LOW);</span><br><span class="line"></span><br><span class="line">  digitalWrite(PIN_LED_Y, HIGH);</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">  digitalWrite(PIN_LED_Y, LOW);</span><br><span class="line"></span><br><span class="line">  digitalWrite(PIN_LED_R, HIGH);</span><br><span class="line">  delay(<span class="number">3000</span>);</span><br><span class="line">  digitalWrite(PIN_LED_R, LOW);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/rcmlVTs.gif" alt></p><h3 id="Switch-Control"><a href="#Switch-Control" class="headerlink" title="Switch Control"></a>Switch Control</h3><p>以按鍵開關控制LED：若偵測到按鍵開關的狀態為HIGH(按下)則使PIN_LED狀態亦為HIGH。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_LED 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_SWITCH 8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  pinMode(PIN_SWITCH, INPUT);</span><br><span class="line">  pinMode(PIN_LED, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> switch_status = digitalRead(PIN_SWITCH);</span><br><span class="line">  <span class="keyword">if</span>(switch_status == HIGH)&#123;</span><br><span class="line">    digitalWrite(PIN_LED, HIGH);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    digitalWrite(PIN_LED, LOW);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/iZzRafD.gif" alt></p><h3 id="Light-Ticker"><a href="#Light-Ticker" class="headerlink" title="Light Ticker"></a>Light Ticker</h3><p>Embedded System的資源都是有限的，UNO R3 Digital I/O僅有13個port，又RX/TX佔了0和1兩個port，所以實際上能用的也就11個port，彌足珍貴呀😌&nbsp;&nbsp;當遇到需要控制多個LED的情況，例如模擬跑馬燈，讓每顆LED都佔用一個port實在太浪費，而此時便是74HC595位移暫存器派上用場的時候，只要佔用Arduino 3個port就能控制74HC595的8個port，超棒der。<br><img src="https://i.imgur.com/hpNCaiM.jpg" alt><br>關於74HC595詳細的說明與接線可參考<a href="https://www.youtube.com/watch?v=KKdNk5lne50" target="_blank" rel="noopener">佑來了老師的教學影片</a>，他的神解釋相當通俗易懂😆</p><ul><li><p>直白的寫法：<br>雖然程式碼長了點，但我覺得這是容易理解其運作的寫法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_DATA 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_STORE 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_SHIFT 4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  pinMode(PIN_DATA, OUTPUT);</span><br><span class="line">  pinMode(PIN_SHIFT, OUTPUT);</span><br><span class="line">  pinMode(PIN_STORE, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// left --&gt; right</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">7</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">    digitalWrite(PIN_STORE, LOW);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">8</span>; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(j == i)&#123; light_up(); &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123; light_down(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    digitalWrite(PIN_STORE, HIGH);</span><br><span class="line">    delay(<span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// right --&gt; left</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)&#123;</span><br><span class="line">    digitalWrite(PIN_STORE, LOW);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">8</span>; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(j == i)&#123; light_up(); &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123; light_down(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    digitalWrite(PIN_STORE, HIGH);</span><br><span class="line">    delay(<span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">light_up</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  digitalWrite(PIN_SHIFT, LOW);</span><br><span class="line">  digitalWrite(PIN_DATA, <span class="number">1</span>);</span><br><span class="line">  digitalWrite(PIN_SHIFT, HIGH);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">light_down</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  digitalWrite(PIN_SHIFT, LOW);</span><br><span class="line">  digitalWrite(PIN_DATA, <span class="number">0</span>);</span><br><span class="line">  digitalWrite(PIN_SHIFT, HIGH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>簡潔的寫法：<br>使用<a href="https://www.arduino.cc/reference/en/language/functions/advanced-io/shiftout/" target="_blank" rel="noopener">shiftOut()</a>方法來推送8-bit的數據，由參數bit_order來控制讀取順序，MSBFIRST為由左至右，LSBFIRST則相反。我自定義了light_ticker()函式，接收bit_order參數來控制跑馬燈方向，所以loop()裡頭僅有兩行code。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_DATA 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_STORE 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_SHIFT 4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  pinMode(PIN_DATA, OUTPUT);</span><br><span class="line">  pinMode(PIN_SHIFT, OUTPUT);</span><br><span class="line">  pinMode(PIN_STORE, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  light_ticker(MSBFIRST);  <span class="comment">// left  --&gt; right</span></span><br><span class="line">  light_ticker(LSBFIRST);  <span class="comment">// right --&gt; left</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">light_ticker</span><span class="params">(<span class="keyword">bool</span> bit_order)</span> </span>&#123;</span><br><span class="line">  byte num;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)&#123;</span><br><span class="line">    num =<span class="number">0</span>;</span><br><span class="line">    digitalWrite(PIN_STORE, LOW);</span><br><span class="line">    bitSet(num, i);</span><br><span class="line">    shiftOut(PIN_DATA, PIN_SHIFT, bit_order, num);</span><br><span class="line">    digitalWrite(PIN_STORE, HIGH);</span><br><span class="line">    delay(<span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://i.imgur.com/dhVYF1i.gif" alt></p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p><a href="https://www.arduino.cc/reference/en/language/variables/data-types/int/" target="_blank" rel="noopener">Arduino - Data Types - int</a><br><a href="https://www.arduino.cc/reference/en/language/variables/data-types/byte/" target="_blank" rel="noopener">Arduino - Data Types - byte</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;終於有時間玩玩買來很久的learning kit。開發版種類繁多，但除了修課玩過Ti OMAP系列的PandaBoard、Devkit8000，也就自己買的樹莓派3B+了，
    
    </summary>
    
      <category term="Arduino" scheme="https://laplacetw.github.io/categories/Arduino/"/>
    
    
      <category term="IoT" scheme="https://laplacetw.github.io/tags/IoT/"/>
    
      <category term="arduino" scheme="https://laplacetw.github.io/tags/arduino/"/>
    
  </entry>
  
  <entry>
    <title>CIFAR-10分類任務的辨識準確率</title>
    <link href="https://laplacetw.github.io/data-sci-vgg-cifar10/"/>
    <id>https://laplacetw.github.io/data-sci-vgg-cifar10/</id>
    <published>2020-06-28T23:27:27.000Z</published>
    <updated>2020-08-24T16:50:12.598Z</updated>
    
    <content type="html"><![CDATA[<p>對DL初學者而言，最常用來測試的大概就是MNIST跟CIFAR-10這兩個數據集了。或許對大神們來說不過都是些玩具，但我認為CIFAR-10不只是個toy dataset，相較於MNIST那樣使用MLP就能輕易達到近乎99%辨識準確率的灰階影像，CIFAR-10不像”Hello World!”這麼容易吧？🤨<a id="more"></a></p><p>關於<a href="https://www.cs.toronto.edu/~kriz/cifar.html" target="_blank" rel="noopener">CIFAR-10數據集</a>，像我這樣略懂略懂的人就不贅言了，網路上介紹CIFAR-10的文章很多。不過，當我爬了許多文章之後，大致上都是介紹數據集和使用簡單的CNN來測試而已(準確率約70%)，如何對現有模型結構優化並提升CIFAR-10準確率還是沒頭緒，雖然可以直接載入Keras內建的預訓練模型，例如VGG-16、ResNet-50，但我認為那樣做沒啥意思，根本上還是沒搞懂，也像是大砲打小鳥。</p><h2 id="Keras-Sample-Code"><a href="#Keras-Sample-Code" class="headerlink" title="Keras Sample Code"></a>Keras Sample Code</h2><p></p><p><br>看一下<a href="https://keras.io/examples/cifar10_cnn/" target="_blank" rel="noopener">Keras的範例程式</a>，根據頁面說明，該範例於訓練50 epochs後達到79%的驗證準確率。實際訓練了100 epochs也差不多。</p><ul><li><p>Model Summary<br><img src="https://i.imgur.com/mgSpvB8.png" alt></p></li><li><p>Train History<br><img src="https://i.imgur.com/14YO3XH.png" alt></p></li></ul><h2 id="More-Optimization"><a href="#More-Optimization" class="headerlink" title="More Optimization"></a>More Optimization</h2><p>就Keras範例來說，我嘗試以相同結構增加其網路深度，驗證準確率有得到些微提升(約82%)，但持續盲目地加深網路卻會造成反效果。後來我找到了<a href="https://machinelearningmastery.com/how-to-develop-a-cnn-from-scratch-for-cifar-10-photo-classification/" target="_blank" rel="noopener">Jason Brownlee博士的教學</a>，那是一個很棒的tutorial，嘗試對模型結構進行優化後，訓練結果在測試數據集取得89%的準確率(Train / Test : 94.60% / 89.35%)。</p><ul><li><p>Model Summary<br><img src="https://i.imgur.com/VxnAUMG.png" alt></p></li><li><p>Train History<br><img src="https://i.imgur.com/WzberYE.png" alt></p></li></ul><h2 id="Fractional-Max-Pooling"><a href="#Fractional-Max-Pooling" class="headerlink" title="Fractional Max-Pooling"></a>Fractional Max-Pooling</h2><p>在優化了模型結構後，測試準確率依然無法突破90%，因此我搜尋了state-of-the-art on CIFAR-10，看看大神們超脫凡俗的思路究竟是如何突破問題。於是我<a href="https://laplacetw.github.io/study-fractional-max-pooling">仔細閱讀了Fractional Max-Pooling這篇論文</a>，並實際應用到我的模型訓練，儘管我沒有使用和原始論文實驗中同樣深的網路結構，依然在測試數據集的準確率達到了93%(Train / Test : 97.94% / 93.55%)。順帶一提，該模型在我的GTX 1660 Super訓練600 epochs需耗費30個小時左右。</p><p>關於Fractional Max-Pooling的實現，TensorFlow已有內建，而Keras可以利用Lambda來引入模型中使用：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">frac_max_pool</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.fractional_max_pool(x, [<span class="number">1.0</span>, <span class="number">1.41</span>, <span class="number">1.41</span>, <span class="number">1.0</span>], pseudo_random=<span class="keyword">True</span>, overlapping=<span class="keyword">True</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">model.add(Lambda(frac_max_pool))</span><br></pre></td></tr></table></figure></p><ul><li><p>Model Summary<br><img src="https://i.imgur.com/IW0Z2VC.png" alt></p></li><li><p>Train History<br><img src="https://i.imgur.com/mLV3eVI.png" alt></p></li></ul><h2 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h2><p>對參數量和模型大小做個比較：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">VGG-16/VGG-19</th><th style="text-align:center">VGG-like + FMP</th></tr></thead><tbody><tr><td style="text-align:center">total params</td><td style="text-align:center">10M+</td><td style="text-align:center">1.5M</td></tr><tr><td style="text-align:center">model size</td><td style="text-align:center">200+ MB</td><td style="text-align:center">12.4 MB</td></tr></tbody></table><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><p></p><p><br><a href="https://github.com/laplacetw/vgg-like-cifar10" target="_blank" rel="noopener">https://github.com/laplacetw/vgg-like-cifar10</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;對DL初學者而言，最常用來測試的大概就是MNIST跟CIFAR-10這兩個數據集了。或許對大神們來說不過都是些玩具，但我認為CIFAR-10不只是個toy dataset，相較於MNIST那樣使用MLP就能輕易達到近乎99%辨識準確率的灰階影像，CIFAR-10不像”Hello World!”這麼容易吧？🤨
    
    </summary>
    
      <category term="Data Science" scheme="https://laplacetw.github.io/categories/Data-Science/"/>
    
    
      <category term="keras" scheme="https://laplacetw.github.io/tags/keras/"/>
    
      <category term="deep learning" scheme="https://laplacetw.github.io/tags/deep-learning/"/>
    
      <category term="computer vision" scheme="https://laplacetw.github.io/tags/computer-vision/"/>
    
      <category term="cifar-10" scheme="https://laplacetw.github.io/tags/cifar-10/"/>
    
  </entry>
  
  <entry>
    <title>翻譯：Fractional Max-Pooling</title>
    <link href="https://laplacetw.github.io/study-fractional-max-pooling/"/>
    <id>https://laplacetw.github.io/study-fractional-max-pooling/</id>
    <published>2020-05-29T02:43:14.000Z</published>
    <updated>2020-09-01T14:03:32.425Z</updated>
    
    <content type="html"><![CDATA[<p>作者：Benjamin Graham<br>原文：<a href="https://arxiv.org/abs/1412.6071" target="_blank" rel="noopener">https://arxiv.org/abs/1412.6071</a><br><a id="more"></a></p><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>卷積網路幾乎總是包含若干特徵空間取樣(pooling)的形式，通常使用α x α max-pooling(α = 2)。最大取樣作用於卷積網路的隱藏層，以整數倍乘因子α來縮減隱藏層的大小。而當你拋棄了75%的數據所獲得的驚人副產物是—在網路中建立了一定程度對於平移與彈性形變的不變性。然而，如果你只是交替使用卷積層與最大取樣，則效能表現將會受限於特徵空間的快速縮減與取樣區域不相交的特性。因此，我們制訂了分數形式的最大取樣，允許α採用非整數值。分數階最大取樣是隨機的，因為構建合適的取樣區域有許多不同的方法。我們發現分數階最大取樣的形式減少了許多數據集的過擬合現象。例如，我們改善了CIFAR-100目前最先進的技術，甚至沒使用隨機去活化(dropout)。</p><h3 id="卷積神經網路"><a href="#卷積神經網路" class="headerlink" title="卷積神經網路"></a>卷積神經網路</h3><p>卷積網路被使用來解決影像辨識問題，主要由兩種類型的分層結構組成：</p><ul><li>卷積濾波層</li><li>若干形式的空間取樣，例如最大取樣(max-pooling)</li></ul><p>聚焦於改善卷積層的研究造就了豐富的技術，例如dropout <a href="#參考文獻">[10]</a>、DropConnect <a href="#參考文獻">[12]</a>、deep networks with many small filters <a href="#參考文獻">[2]</a>、large input layer filters for detecting texture <a href="#參考文獻">[5]</a>以及deeply supervised networks <a href="#參考文獻">[6]</a>。</p><p>相較之下，不起眼的取樣操作已經被逐漸忽略，長期以來2 × 2 max-pooling(MP2-pooling)已成為構建卷積神經網路的默認選項。MP2-pooling之所以受歡迎有許多原因：執行快速、能迅速縮減隱藏層的大小、對於平移與彈性形變有一定程度的不變性。然而，取樣區域的不相交特性可能限制其泛化能力。此外，由於MP2 pooling如此迅速地縮減了隱藏層的大小，因此需要透過堆疊連續的卷積層，以構建真正的深度網路 <a href="#參考文獻">[7, 9, 11]</a>。有兩種方法已經被提出來解決此問題：</p><ul><li>使用3 x 3取樣區域搭配步長2(strides = 2)的重疊取樣 <a href="#參考文獻">[5]</a></li><li>隨機取樣，即以大小偏差的取樣形式代替在每個取樣區域選擇最大值的動作 <a href="#參考文獻">[13]</a></li></ul><p>但是，這兩種技術仍將隱藏層大小縮減了兩倍。這令人不禁想問，是否能有更和緩的方法來有效地應用特徵空間取樣。如果取樣只讓隱藏層大小縮減$ \sqrt 2 $倍，那麼我們在構建卷積神經網路時能使用的取樣層數便能翻兩倍。每個取樣層都有機會以不同尺度來查看輸入影像，以正確的尺度查看影像，應該能更容易地辨識出線索特徵，並將物件標記為特定類別。</p><p>因此，本文的重點是最大取樣的一種特殊形式，我們稱之為分數階最大取樣(Fractional Max-Pooling, FMP)， FMP的想法是，將影像的特徵空間尺寸縮小α倍(1 &lt; α &lt; 2)。如同隨機取樣，FMP在取樣過程中引入了一定程度的隨機性。然而，FMP與隨機取樣不同的是，其隨機性和取樣區域的選擇有關，而非每個取樣區域內的取樣方式。</p><p>於第二節中，我們將說明分數階最大取樣的形式。簡而言之，有三種選擇會影響FMP的實現方式：</p><ul><li>取樣的非整數值α決定了取樣層輸入和輸出的特徵空間尺寸比例。例如2 × 2最大取樣對應於α = 2的特定情況。</li><li>取樣區域可以用隨機或偽隨機的方式來選擇。在FMP的隨機性和使用隨機去活化是否搭配數據增強(data augmentation)之間似乎得做適當的取捨，隨機的FMP或許可以表現得更好，但如果「過度」使用隨機去活化或訓練數據強化，則可能導致欠擬合(underfitting)。</li><li>取樣區域可以不相交(disjoint)或重疊(overlapping)。不相交的區域較容易描述，但我們發現重疊區域的效果更好。</li></ul><p>我們會在第三節中描述如何設計和訓練我們的卷積網路，並於第四節中展示MNIST手寫數字、CIFAR-10、CIFAR-100、阿薩姆語手寫文字以及CASIA-OLHWDB1.1手寫漢字等數據集的訓練結果。</p><h3 id="分數階最大取樣"><a href="#分數階最大取樣" class="headerlink" title="分數階最大取樣"></a>分數階最大取樣</h3><p>CNN的每個卷積濾波器都會產生一個隱含變數的矩陣，通常使用某種形式的取樣來縮減矩陣大小。最大取樣是一個採用$ N_{in} \times N_{in} $矩陣並返回較小的$ N_{out} \times N_{out} $輸出矩陣的過程，這是透過將$ N_{in} \times N_{in} $輸入正方形分割為$ N^2_{out} $個取樣區域$ (P_{i,j}) $而實現：<br>$$ (P_{i,j}) \subset \lbrace 1,2,…,N_{in} \rbrace ^2 \ \text{for each}\ (i,j) \in \lbrace 1,…,N_{out} \rbrace ^2 $$<br>接著令：<br>$$ Output_{i,j} = \displaystyle{\max_{(k,l)\in P_{i,j}}} Input_{k,l} $$</p><p>以我們的使用慣例2 x 2最大取樣而言，$ N_{in} = 2N_{out}\ and\ P_{i,j} = \rbrace 2i-1,2i \rbrace \times \rbrace 2j-1,2j \rbrace $。<a href="#參考文獻">參考文獻 [5]</a>中提到，最大取樣應用於3 x 3重疊取樣區域，因此$ N_{in} = 2N_{out}+1 $，$ P_{i,j} $為3 x 3正方形，以步長2進行擴展。上述兩種情況中，$ N_{in}\ /\ N_{out} \approx 2 $，因此輸入影像中任何有效特徵的空間大小會在每個取樣層中減半。相較之下，如果我們採用$ N_{in}\ /\ N_{out} \approx \sqrt[n]{2} $，則有效特徵的空間大小之縮小速率減緩N倍。為清楚起見，我們現在將重點放在$ N_{in}\ /\ N_{out} \in (1,2) $，因為我們主要感興趣的是準確率；如果對執行速度相當介意，則FMP可以採用$ N_{in}\ /\ N_{out} \in (2,3) $。</p><p><img src="https://i.imgur.com/n77VYDM.png" alt><br>Figure 1：由左至右依序為36 x 36的網格；4個偽隨機的FMP不相交取樣區域，$ \alpha \in \lbrace \sqrt[3]{2},\sqrt 2,2,\sqrt 5 \rbrace $；以及$ \alpha = \sqrt 2 $的隨機的FMP不相交取樣區域。對$ \alpha \in (1,2) $，FMP生成的矩形取樣區域其邊長為1或2。對$ \alpha \in (2,3) $，其取樣區域邊長則為2或3。</p><p>給定一對特定數值$ (N_{in},N_{out}) $，我們需要一種選擇取樣區域$ (P_{i,j}) $的方法。我們將考慮兩種類型的排列方式：重疊的正方形以及不相交的矩形集合。在Figure 1中我們展示了數種不同的方法來將36 x 36正方形網格分割為不相交的矩形。Figure 1中的第2、第3及第6張影像可以用來定義重疊的2 x 2正方形的排列：將影像中每個矩形的左上角視為其中一個正方形的左上角。為標準化地描述如何生成取樣區域，令：<br>$$ (a_i)^{N_{out}}_{i=0}\ ,\ (b_i)^{N_{out}}_{i=0} $$<br><a id="link-formula-1"></a></p><p>為兩個以1為起始、$ N_{in} $結束的整數遞增數列，且遞增量皆為1或2(i.e. $ a_{i+1}-a_i \in \lbrace 1,2 \rbrace $)。然後我們可以用以下任一方式定義取樣區域 :<br>$$ P = [a_{i-1},a_i-1] \times [b_{j-1},b_j-1]\ \text{or}\ P_{i,j} = [a_{i-1},a_i] \times [b_{j-1},b_j]\ \ (1) $$</p><p><img src="https://i.imgur.com/a1uq3oy.png" alt><br>Figure 2：左上角為柯達公司釋出的真實色彩圖片數據集，解析度為384 x 256(原始解析度為768 x 512)。其他五張影像則是以隨機的不相交FMP$ \sqrt 2 $取樣區域進行6層平均取樣的結果，解析度為左上角的八分之一。</p><p>我們稱這兩種情況分別為不相交和重疊，接著嘗試兩種不同的方法來生成整數序列：隨機數列以及偽隨機數列。如果數列的增加是透過對適當數量的1和2進行隨機排列而獲得的，那麼我們稱其為隨機數列。若是透過以下方式則稱之偽隨機數列：<br>$$ a_i = ceiling(\alpha(i+u)),\ \alpha \in (1,2)\ \text{with some}\ u  \in (0,1) $$</p><p>以下是對應$ N_{in} = 25、N_{out} = 18 $之情況的增量模式，左側增量為隨機生成，右側增量則來自偽隨機數列：</p><p>211112112211112122 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 112112121121211212<br>111222121121112121 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 212112121121121211<br>121122112111211212 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 211211212112121121</p><p>儘管兩種類型的數列都是不規則的，但偽隨機數列所生成的取樣區域較隨機數列來得穩定。為顯示取樣區域隨機化的效果，請參考Figure 2。我們拍攝了一張影像，接著疊代使用不相交的隨機取樣區域來縮減影像大小(在每個取樣區域中取平均值)。結果按比例縮減的影像顯示出彈性形變。相反地，若我們使用偽隨機取樣區域，則生成的影像僅為原始影像的真實比例縮小版本。</p><h3 id="實作方法"><a href="#實作方法" class="headerlink" title="實作方法"></a>實作方法</h3><p><br><br><img src="https://i.imgur.com/WRZu8v6.png" alt><br>Figure 3：微型FMP$ \sqrt 2 $網路各層的空間大小如圖所示。分數$ \frac32,\frac64,\frac{10}{7} $近似於$ \sqrt 2 $。</p><p>我們將使用稀疏卷積網路的實例來進行訓練，這實際上意味著我們能逐層依序指定卷積網路的結構。例如：<br>$$ 10C2-FMP \sqrt 2 -20C-30C2-FMP \sqrt 2 -40C2-50C1-output $$</p><p>輸入層的空間大小是透過由右至左的運算所獲得的：每個C2卷積層將空間大小增加為2倍，FMP$ \sqrt 2 $層則是將空間大小增加為2倍(四捨五入至最接近的整數)；參見Figure 3。輸入層通常會大於輸入影像—必要時會自動以0來補齊。分數階最大取樣也能輕易地在常用的卷積神經網路套件中實現。為簡單起見，我們使用的所有網路中每個卷積層的濾波器數量都呈線性增長。因此，我們能簡要地說明上述的網路結構為</p><p>$$ (10_nC2-FMP \sqrt 2)_3-C2-C1-output $$</p><p>$ 10_n $代表第n個卷積層中的濾波器數量為$ 10_n $，下標的3表示3對交替使用的C2/FMP層。使用隨機去活化時，進入的網路越深，所使用的隨機去活化數量就越多。我們在第一個隱藏層中使用0％隨機去活化，並在最後一個隱藏層中線性增加至50％。所使用的活化函數為leaky ReLU(帶滲漏整流線性函數)。</p><h4 id="模型平均"><a href="#模型平均" class="headerlink" title="模型平均"></a>模型平均</h4><p>每次我們基於訓練或測試目的而應用FMP網路時，都會使用不同的隨機或偽隨機序列來生成取樣區域。因此FMP網絡可以被視為相似網路的集合，而每個不同的取樣區域設定都定義了該集合的不同成員。 這類似於隨機去活化<a href="#參考文獻">[10]</a>；隨機去活化其遮罩的不同數值可以用來定義相關網路的集合。如同隨機去活化，FMP網路的模型平均可以幫助提升效能。如果你對同一張測試影像進行多次分類，可能會得到許多不同的預測結果。對每個測試影像進行多次分類後，使用多數決可以大幅提升準確度；參見Figure 4。</p><p><img src="https://i.imgur.com/NXYLssj.png" alt><br>Figure 4：重複測試對於一個由MNIST所訓練的FMP網路之影響</p><h3 id="實驗結果"><a href="#實驗結果" class="headerlink" title="實驗結果"></a>實驗結果</h3><p><br></p><h4 id="不使用數據增強或隨機去活化"><a href="#不使用數據增強或隨機去活化" class="headerlink" title="不使用數據增強或隨機去活化"></a>不使用數據增強或隨機去活化</h4><p>為比較不同種類的分數階最大取樣，我們在$ \text{MNIST}^1 $以及CIFAR-100數據集上訓練FMP網路<a href="#參考文獻">[4]</a>。對於MNIST，我們使用了小型的FMP網路：<br>$$ \text{input layer size 36 x 36：}\ (36_nC2-FMP \sqrt 2)_6-C2-C1-output $$ </p><p>對於CIFAR-100則使用了較大的網路：<br>$$ \text{input layer size 94 x 94：}\ (64_nC2-FMP \sqrt[3]{2})_{12}-C2-C1-output $$ </p><p>在不使用訓練數據增強的情況下，這兩個數據集最新的測試誤差分別為0.39%以及34.57%<a href="#參考文獻">[6]</a>。FMP網路的結果如Table 1所示。使用重複測試12次的模型平均，我們發現使用隨機重疊取樣的FMP對這兩個數據集的表現最佳。對於CIFAR-100而言，此方法相較於常規的最大取樣有著相當程度的改進。就網路的複雜程度概括來說，CIFAR-100的網路擁有1200萬個權重參數，且經過250次訓練數據的重複訓練(在GeForce GTX 780上需耗費18小時)。我們嘗試改變CIFAR-100每層的隱藏單元數量，搭配隨機重疊取樣：</p><ul><li>使用$ {16}_nC2 $(0.8M weights)的測試結果誤差為42.07% / 34.87</li><li>使用$ {32}_nC2 $(3.2M weights)的測試結果誤差為35.09% / 29.66</li><li>使用$ {96}_nC2 $(27M weights)結合隨機去活化以及較為和緩的學習率衰減，測試結果誤差為27.62% / 23.82</li></ul><p><img src="https://i.imgur.com/NblVtwE.png" alt><br>Table 1：MNIST以及CIFAR-100的測試誤差</p><p>註1：<a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">http://yann.lecun.com/exdb/mnist/</a></p><h4 id="阿薩姆語手寫文字"><a href="#阿薩姆語手寫文字" class="headerlink" title="阿薩姆語手寫文字"></a>阿薩姆語手寫文字</h4><p>為比較FMP和MP2兩種取樣方式搭配訓練數據增強的影響，我們使用線上線上阿薩姆語手寫文字數據集來測試。此數據集包含了183個印度-雅利安文字中每個文字的45個樣本。「線上」的意思是指每一筆畫皆代表(x, y)座標序列。我們使用每個文字的前36個樣本做為訓練集，剩餘的9個樣本做為測試集，並將樣本縮放為64 x 64的大小來訓練一個有6層MP2的網路：<br>$$ 32_nC3-MP2-(C2-MP2)_{12}-C2-output $$</p><p>以及使用10層隨機的重疊FMP$ \sqrt 2 $取樣的FMP網路：<br>$$ (32_nC2-FMP\sqrt 2)_{10}-C2-C1-output $$</p><p>我們訓練了沒有使用隨機去活化的網路，以及：</p><ul><li>不使用數據增強</li><li>使用隨機平移來位移文字</li><li>使用仿射轉換(平移、旋轉、拉伸以及剪切的隨機組合)</li></ul><p><img src="https://i.imgur.com/fNDKsYO.png" alt><br>Table 2：以阿薩姆語手寫文字數據集搭配不同類型的數據增強來訓練網路的測試誤差</p><p>參照Table 2。某種意義上來說，我們對於「在某種程度的輕微失真下，筆跡的意義通常是不變的」的認知，來自最大取樣與訓練數據增強這兩種不同的方式。有趣的是，不使用數據增強的FMP網路比起使用數據增強的MP2網路表現更好，顯示FMP網路更適合處理該數據集。</p><h4 id="線上中文手寫文字"><a href="#線上中文手寫文字" class="headerlink" title="線上中文手寫文字"></a>線上中文手寫文字</h4><p>CASIA-OLHWDB1.1數據集包含了3755個獨立的GBK 1級漢字手寫樣本<a href="#參考文獻">[8]</a>，每個類別大約有240個訓練樣本與60個測試樣本。使用4層的MP2取樣層可以達到5.61%的測試誤差<a href="#參考文獻">[2]</a>。</p><p>我們使用<a href="#參考文獻">[3]</a>所描述的線上字符表示法；以64 x 64的大小繪製文字，加上量測筆跡方向的特徵，生成64 x 64 x 9的陣列。使用2 x 2最大取樣、隨機去活化以及仿射訓練數據增強，測試結果誤差為3.82% <a href="#參考文獻">[3]</a>。以偽隨機的重疊FMP取代最大取樣：<br>$$ (64_nC2-FMP\sqrt 2)_7-(C2-MP2-C1)_2-C2-C1-output $$</p><p>測試結果誤差為3.26%(1 test)以及2.97%(12 tests)。</p><h4 id="CIFAR-10搭配隨機去活化與訓練數據增強"><a href="#CIFAR-10搭配隨機去活化與訓練數據增強" class="headerlink" title="CIFAR-10搭配隨機去活化與訓練數據增強"></a>CIFAR-10搭配隨機去活化與訓練數據增強</h4><p>對於CIFAR-10數據集，我們使用了隨機去活化和透過仿射轉換來擴充訓練數據：隨機對數據集執行平移、旋轉、反射、拉伸及剪切的預處理。相較之下，人類在CIFAR-10數據集的表現估計為6%$ {}^2 $ 。而近期(2015)於Kaggle平台上的CIFAR-10競賽，獲勝者的測試誤差為4.47%$ {}^3 $, 使用上述的數據增強策略和以下的網路結構：<br>$$ (300_nC2-300_nC2-MP2)_5-C2-C1-output $$</p><p>使用偽隨機的重疊FMP網路：<br>$$ (160_nC2-FMP\sqrt[3]{2})_12-C2-C1-output $$</p><p>我們得到了4.50%(1 test)，3.67%(12 tests)及3.47%(100 tests)的測試誤差。</p><p>註2：<a href="http://karpathy.github.io/2011/04/27/manually-classifying-cifar10/" target="_blank" rel="noopener">http://karpathy.github.io/2011/04/27/manually-classifying-cifar10/</a><br>註3：<a href="https://www.kaggle.com/c/cifar-10/" target="_blank" rel="noopener">https://www.kaggle.com/c/cifar-10/</a><br>＊原文中註2的<a href="http://karpathy.ca/myblog/?p=160" target="_blank" rel="noopener">原始網址</a>已失效，推測是網站搬遷。</p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>我們在許多受歡迎的數據集上訓練搭配分數階最大取樣的卷積網路，並於效能方面發現有顯著的改善。取樣區域重疊的FMP比起不相交的似乎表現得更好。使用訓練數據增強時，偽隨機取樣區域比隨機取樣區域的表現更佳。若微調隨機去活化的使用數量，隨機取樣可能會重新取得優勢。</p><p>再次查看Figure 2由隨機取樣所創造的失真，請注意此「失真」可以分解為「X軸的失真」和「Y軸的失真」，探究無法以<a href="#link-formula-1">方程式(1)</a>表達的取樣區域可能會很有趣，因為它們可能將更為通用的失真編碼至結果的卷積網路。</p><h3 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h3><p>[1] K. Bache and M. Lichman. UCI machine learning repository, 2013.</p><p>[2] D. Ciresan, U. Meier, and J. Schmidhuber. Multi-column deep neural networks for image classification. In Computer Vision and Pattern Recognition(CVPR), 2012 IEEE Conference on, pages 3642–3649, 2012.</p><p>[3] Ben Graham. Spatially-sparse convolutional neural networks. 2014.</p><p>[4] Alex Krizhevsky. Learning Multiple Layers of Features from Tiny Images.Technical report, 2009.</p><p>[5] Alex Krizhevsky, Ilya Sutskever, and Geoffrey E. Hinton. Imagenet classification with deep convolutional neural networks. In F.Pereira, C.J.C. Burges, L. Bottou, and K.Q. Weinberger, editors, Advances in Neural Information Processing Systems 25, pages 1097–1105. Curran Associates, Inc., 2012.</p><p>[6] Chen-Yu Lee, Saining Xie, Patrick Gallagher, Zhengyou Zhang, and Zhuowen Tu. Deeply-Supervised Nets, 2014.</p><p>[7] Min Lin, Qiang Chen, and Shuicheng Yan. Network in network. ICLR, 2014.</p><p>[8] C.-L. Liu, F. Yin, D.-H. Wang, and Q.-F. Wang. CASIA online and offline Chinese handwriting databases. In Proc. 11th International Conference on Document Analysis and Recognition (ICDAR), Beijing, China, pages 37–41, 2011.</p><p>[9] Karen Simonyan and Andrew Zisserman. Very deep convolutional networks for large-scale image recognition. 2014.</p><p>[10] Nitish Srivastava, Geoffrey Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdinov. Dropout: A Simple Way to Prevent Neural Networks from Overfitting. Journal of Machine Learning Research, 15:1929–1958, 2014.</p><p>[11] Christian Szegedy, Wei Liu, Yangqing Jia, Pierre Sermanet, Scott Reed,Dragomir Anguelov, Dumitru Erhan, Vincent Vanhoucke, and Andrew Rabinovich. Going deeper with convolutions. 2014.</p><p>[12] Li Wan, Matthew Zeiler, Sixin Zhang, Yann Lecun, and Rob Fergus. Regularization of Neural Networks using DropConnect, 2013. JMLR W&amp;CP 28 (3) : 1058–1066, 2013.</p><p>[13] Matthew D. Zeiler and Rob Fergus. Stochastic Pooling for Regularization of Deep Convolutional Neural Networks. ICLR 2013.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：Benjamin Graham&lt;br&gt;原文：&lt;a href=&quot;https://arxiv.org/abs/1412.6071&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://arxiv.org/abs/1412.6071&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Study" scheme="https://laplacetw.github.io/categories/Study/"/>
    
    
      <category term="deep learning" scheme="https://laplacetw.github.io/tags/deep-learning/"/>
    
      <category term="computer vision" scheme="https://laplacetw.github.io/tags/computer-vision/"/>
    
  </entry>
  
  <entry>
    <title>樹莓派：紅外線熱像儀</title>
    <link href="https://laplacetw.github.io/rspi-thermal-cam-amg8833/"/>
    <id>https://laplacetw.github.io/rspi-thermal-cam-amg8833/</id>
    <published>2020-04-19T15:23:39.000Z</published>
    <updated>2020-08-21T09:05:53.983Z</updated>
    
    <content type="html"><![CDATA[<p>看到火車站架設熱像儀監控旅客們的體溫，然而並非每個車站都能設置如此昂貴的儀器，出於好奇也想做個低成本的來看看，雖然解析度與精確度都比不上昂貴的精密儀器，但在近距離下能做到快速、自動偵測體溫的話，比起讓站務人員逐一量測後進站，這應該堪用且有效率多了。<br><a id="more"></a></p><h3 id="AMG8833-Intro"><a href="#AMG8833-Intro" class="headerlink" title="AMG8833 Intro"></a>AMG8833 Intro</h3><p><img src="https://i.imgur.com/JATdb1S.jpg" alt><br>於是我買來了Adafruit AMG8833模組，這模組上頭裝著Panasonic所生產的紅外線陣列感測器。<br>Datasheet：<a href="https://b2b-api.panasonic.eu/file_stream/pids/fileversion/1819" target="_blank" rel="noopener">Panasonic IR Array Sensor Grid-EYE</a></p><p><img src="https://i.imgur.com/gQseBWz.jpg" alt><br><img src="https://i.imgur.com/DBrxsGu.jpg" alt></p><p>參考<a href="https://www.adafruit.com/product/3538" target="_blank" rel="noopener">Adafruit官網</a>的技術參數說明：</p><ol><li>感測器為8x8紅外線陣列</li><li>溫度感測區間為攝氏0度～攝氏80度(精度為正負2.5度)</li><li>人體最大感測距離為7米</li><li>透過<a href="https://zh.wikipedia.org/wiki/I%C2%B2C" target="_blank" rel="noopener">I2C協定</a>進行數據傳輸</li></ol><h3 id="Setting-amp-Installing"><a href="#Setting-amp-Installing" class="headerlink" title="Setting &amp; Installing"></a>Setting &amp; Installing</h3><p>接下來將於運行Raspbian作業系統的樹莓派上進行環境設置，我習慣<a href="https://laplacetw.github.io/rspi-meet-raspberry-pi-b3-plus/#Remote">使用VNC Server與樹莓派進行遠端連線操作</a>。</p><h4 id="系統更新"><a href="#系統更新" class="headerlink" title="系統更新"></a>系統更新</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get upgrade</span></span><br></pre></td></tr></table></figure><h4 id="啟用I2C-amp-SPI介面"><a href="#啟用I2C-amp-SPI介面" class="headerlink" title="啟用I2C &amp; SPI介面"></a>啟用I2C &amp; SPI介面</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo raspi-config</span></span><br></pre></td></tr></table></figure><p>在選項5的介面設定中啟用它們，然後測試是否成功啟用<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls /dev/i2c* /dev/spi*</span></span><br></pre></td></tr></table></figure></p><h4 id="Package-Installing"><a href="#Package-Installing" class="headerlink" title="Package Installing"></a>Package Installing</h4><p>直接安裝Adafruit的AMG88XX Package，pip會處理其他依賴的函式庫(e.g. Adafruit-Blinka)。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pip3 install adafruit-circuitpython-amg88xx</span></span><br></pre></td></tr></table></figure><br><img src="https://i.imgur.com/sANUgo1.png" alt></p><h4 id="Blinka-Test"><a href="#Blinka-Test" class="headerlink" title="Blinka Test"></a>Blinka Test</h4><p>使用Adafruit的測試範例來確認環境設定是否完成。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> board</span><br><span class="line"><span class="keyword">import</span> digitalio</span><br><span class="line"><span class="keyword">import</span> busio</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Hello blinka!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Try to great a Digital input</span></span><br><span class="line">pin = digitalio.DigitalInOut(board.D4)</span><br><span class="line">print(<span class="string">"Digital IO ok!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Try to create an I2C device</span></span><br><span class="line">i2c = busio.I2C(board.SCL, board.SDA)</span><br><span class="line">print(<span class="string">"I2C ok!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Try to create an SPI device</span></span><br><span class="line">spi = busio.SPI(board.SCLK, board.MOSI, board.MISO)</span><br><span class="line">print(<span class="string">"SPI ok!"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"done!"</span>)</span><br></pre></td></tr></table></figure><br><img src="https://i.imgur.com/msoQDyb.png" alt></p><h4 id="I2C-Test"><a href="#I2C-Test" class="headerlink" title="I2C Test"></a>I2C Test</h4><p>依照<a href="https://pinout.xyz/" target="_blank" rel="noopener">樹莓派GPIO</a>與AMG8833進行連接：</p><ol><li>3V Power連接到Vin</li><li>GND連接到GND</li><li>連接SDA &amp; SCL<br><img src="https://i.imgur.com/ilmXszn.jpg" alt></li></ol><p>試著透過I2C讀取感測器數據並印出來<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> busio</span><br><span class="line"><span class="keyword">import</span> board</span><br><span class="line"><span class="keyword">import</span> adafruit_amg88xx</span><br><span class="line"></span><br><span class="line">i2c = busio.I2C(board.SCL, board.SDA)</span><br><span class="line">amg = adafruit_amg88xx.AMG88XX(i2c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> amg.pixels:</span><br><span class="line">        <span class="comment"># Pad to 1 decimal place</span></span><br><span class="line">        print([<span class="string">"&#123;0:.1f&#125;"</span>.format(temp) <span class="keyword">for</span> temp <span class="keyword">in</span> row])</span><br><span class="line">        print(<span class="string">""</span>)</span><br><span class="line">    print(<span class="string">"\n"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><br><img src="https://i.imgur.com/DK85IXe.png" alt></p><h3 id="Build-Thermal-Camera"><a href="#Build-Thermal-Camera" class="headerlink" title="Build Thermal Camera"></a>Build Thermal Camera</h3><p>安裝溫度數據視覺化所需的函式庫<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install -y python3-scipy python3-pygame</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo pip3 install colour</span></span><br></pre></td></tr></table></figure></p><p>Adafruit官方範例程式：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""This example is for Raspberry Pi (Linux) only!</span></span><br><span class="line"><span class="string">   It will not work on microcontrollers running CircuitPython!"""</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> busio</span><br><span class="line"><span class="keyword">import</span> board</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> scipy.interpolate <span class="keyword">import</span> griddata</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> colour <span class="keyword">import</span> Color</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> adafruit_amg88xx</span><br><span class="line"></span><br><span class="line">i2c_bus = busio.I2C(board.SCL, board.SDA)</span><br><span class="line"></span><br><span class="line"><span class="comment">#low range of the sensor (this will be blue on the screen)</span></span><br><span class="line">MINTEMP = <span class="number">26.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#high range of the sensor (this will be red on the screen)</span></span><br><span class="line">MAXTEMP = <span class="number">32.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#how many color values we can have</span></span><br><span class="line">COLORDEPTH = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">os.putenv(<span class="string">'SDL_FBDEV'</span>, <span class="string">'/dev/fb1'</span>)</span><br><span class="line">pygame.init()</span><br><span class="line"></span><br><span class="line"><span class="comment">#initialize the sensor</span></span><br><span class="line">sensor = adafruit_amg88xx.AMG88XX(i2c_bus)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pylint: disable=invalid-slice-index</span></span><br><span class="line">points = [(math.floor(ix / <span class="number">8</span>), (ix % <span class="number">8</span>)) <span class="keyword">for</span> ix <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">64</span>)]</span><br><span class="line">grid_x, grid_y = np.mgrid[<span class="number">0</span>:<span class="number">7</span>:<span class="number">32j</span>, <span class="number">0</span>:<span class="number">7</span>:<span class="number">32j</span>]</span><br><span class="line"><span class="comment"># pylint: enable=invalid-slice-index</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sensor is an 8x8 grid so lets do a square</span></span><br><span class="line">height = <span class="number">240</span></span><br><span class="line">width = <span class="number">240</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#the list of colors we can choose from</span></span><br><span class="line">blue = Color(<span class="string">"indigo"</span>)</span><br><span class="line">colors = list(blue.range_to(Color(<span class="string">"red"</span>), COLORDEPTH))</span><br><span class="line"></span><br><span class="line"><span class="comment">#create the array of colors</span></span><br><span class="line">colors = [(int(c.red * <span class="number">255</span>), int(c.green * <span class="number">255</span>), int(c.blue * <span class="number">255</span>)) <span class="keyword">for</span> c <span class="keyword">in</span> colors]</span><br><span class="line"></span><br><span class="line">displayPixelWidth = width / <span class="number">30</span></span><br><span class="line">displayPixelHeight = height / <span class="number">30</span></span><br><span class="line"></span><br><span class="line">lcd = pygame.display.set_mode((width, height))</span><br><span class="line"></span><br><span class="line">lcd.fill((<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">pygame.display.update()</span><br><span class="line">pygame.mouse.set_visible(<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">lcd.fill((<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">pygame.display.update()</span><br><span class="line"></span><br><span class="line"><span class="comment">#some utility functions</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">constrain</span><span class="params">(val, min_val, max_val)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> min(max_val, max(min_val, val))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">map_value</span><span class="params">(x, in_min, in_max, out_min, out_max)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min</span><br><span class="line"></span><br><span class="line"><span class="comment">#let the sensor initialize</span></span><br><span class="line">time.sleep(<span class="number">.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">#read the pixels</span></span><br><span class="line">    pixels = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> sensor.pixels:</span><br><span class="line">        pixels = pixels + row</span><br><span class="line">    pixels = [map_value(p, MINTEMP, MAXTEMP, <span class="number">0</span>, COLORDEPTH - <span class="number">1</span>) <span class="keyword">for</span> p <span class="keyword">in</span> pixels]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#perform interpolation</span></span><br><span class="line">    bicubic = griddata(points, pixels, (grid_x, grid_y), method=<span class="string">'cubic'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#draw everything</span></span><br><span class="line">    <span class="keyword">for</span> ix, row <span class="keyword">in</span> enumerate(bicubic):</span><br><span class="line">        <span class="keyword">for</span> jx, pixel <span class="keyword">in</span> enumerate(row):</span><br><span class="line">            pygame.draw.rect(lcd, colors[constrain(int(pixel), <span class="number">0</span>, COLORDEPTH- <span class="number">1</span>)],</span><br><span class="line">                             (displayPixelHeight * ix, displayPixelWidth * jx,</span><br><span class="line">                              displayPixelHeight, displayPixelWidth))</span><br><span class="line"></span><br><span class="line">    pygame.display.update()</span><br></pre></td></tr></table></figure><br><br><br>迷你紅外線熱像儀就這麼運作起來囉～🙆‍♂️ 可依照自己的測試環境，嘗試調整感測溫度上下限讓影像清晰一些。<br><img src="https://i.imgur.com/KtWuOfU.gif" alt></p><p>＊參考</p><ol><li><a href="https://www.strongpilab.com/i2c-introduction/" target="_blank" rel="noopener">I2C-協定用法原理簡介-晶片溝通的橋樑</a></li><li><a href="https://learn.adafruit.com/circuitpython-on-raspberrypi-linux/installing-circuitpython-on-raspberry-pi" target="_blank" rel="noopener">Installing CircuitPython Libraries on Raspberry Pi</a></li><li><a href="https://learn.adafruit.com/adafruit-amg8833-8x8-thermal-camera-sensor/python-circuitpython" target="_blank" rel="noopener">Adafruit AMG8833 8x8 Thermal Camera Sensor</a></li><li><a href="https://learn.adafruit.com/adafruit-amg8833-8x8-thermal-camera-sensor/raspberry-pi-thermal-camera" target="_blank" rel="noopener">Raspberry Pi Thermal Camera</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到火車站架設熱像儀監控旅客們的體溫，然而並非每個車站都能設置如此昂貴的儀器，出於好奇也想做個低成本的來看看，雖然解析度與精確度都比不上昂貴的精密儀器，但在近距離下能做到快速、自動偵測體溫的話，比起讓站務人員逐一量測後進站，這應該堪用且有效率多了。&lt;br&gt;
    
    </summary>
    
      <category term="Raspberry Pi" scheme="https://laplacetw.github.io/categories/Raspberry-Pi/"/>
    
    
      <category term="IoT" scheme="https://laplacetw.github.io/tags/IoT/"/>
    
      <category term="raspberry pi" scheme="https://laplacetw.github.io/tags/raspberry-pi/"/>
    
      <category term="adafruit" scheme="https://laplacetw.github.io/tags/adafruit/"/>
    
      <category term="thermal camera" scheme="https://laplacetw.github.io/tags/thermal-camera/"/>
    
  </entry>
  
  <entry>
    <title>Python批次影片轉GIF</title>
    <link href="https://laplacetw.github.io/python-batch-video-to-gif/"/>
    <id>https://laplacetw.github.io/python-batch-video-to-gif/</id>
    <published>2020-04-09T17:30:51.000Z</published>
    <updated>2020-08-05T06:34:56.333Z</updated>
    
    <content type="html"><![CDATA[<p>偶爾會為了DEMO用途，需要將影片轉換為GIF的形式，便於穿插在文章裡頭，但我不想為了這小小的需求安裝什麼軟體。<a id="more"></a>而線上服務就是圖個方便打到很多使用者的痛點，但你必須將圖片上傳，這對某些使用者而言可能有疑慮…雖然我見到的線上轉檔服務使用者都是莫名安心地上傳的(?)</p><p>Python是非常美好的程式語言，自己寫段程式碼來處理就行了😎&nbsp;&nbsp;我們只需要先在電腦安裝<a href="https://ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a>，然後引入<a href="https://pypi.org/project/moviepy/" target="_blank" rel="noopener">moviepy</a>這個套件就行了，作者zulko在他的個人網站有<a href="http://zulko.github.io/blog/2014/01/23/making-animated-gifs-from-video-files-with-python/" target="_blank" rel="noopener">詳細的教學</a>。</p><hr><p>範例程式：</p><p>設置參數可更換影片輸入格式、是否加入浮水印以及生成的GIF和浮水印的縮放倍率。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> moviepy.editor <span class="keyword">as</span> mp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># setting</span></span><br><span class="line">filetype = <span class="string">'.mov'</span></span><br><span class="line">watermark = <span class="string">'./devilcat.png'</span></span><br><span class="line">scale_gif = <span class="number">0.3</span></span><br><span class="line">scale_mark = <span class="number">0.3</span></span><br><span class="line"></span><br><span class="line">videos = glob(<span class="string">'./*'</span> + filetype)</span><br><span class="line">videos.sort()</span><br><span class="line"><span class="keyword">for</span> video <span class="keyword">in</span> videos:</span><br><span class="line">    output = video.replace(filetype, <span class="string">'.gif'</span>)</span><br><span class="line">    <span class="keyword">with</span> mp.VideoFileClip(video).resize(scale_gif) <span class="keyword">as</span> clip:</span><br><span class="line">        <span class="keyword">if</span> watermark == <span class="string">''</span>:  <span class="comment"># no watermark</span></span><br><span class="line">            clip.write_gif(output, fps=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mark_image = (mp.ImageClip(watermark)</span><br><span class="line">            .resize(scale_mark)</span><br><span class="line">            .set_duration(clip.duration)</span><br><span class="line">            .set_pos((<span class="string">"left"</span>, <span class="string">"top"</span>)))</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># add watermark to video</span></span><br><span class="line">            mark_video = mp.CompositeVideoClip([clip, mark_image])</span><br><span class="line">            mark_video.write_gif(output, fps=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><br>＊關於resize的錯誤參考：<a href="https://stackoverflow.com/questions/57696343/moviepy-does-not-recognize-resize-function" target="_blank" rel="noopener">stackoverflow — Moviepy does not recognize resize function</a></p><hr><p>我使用<a href="https://youtu.be/H4Cn4taeuA4" target="_blank" rel="noopener">YT頻道哈哈台訪問浪漫Duke經典片段</a>當範例，實際執行將影片轉換為GIF動圖並加上浮水印。</p><ul><li><p>首先來畫一個浮水印…惡魔貓男！你今晚的惡夢！(激動 ⬇︎<br><img src="https://i.imgur.com/FwCJqVN.png" alt></p></li><li><p>接著準備幾個要轉成GIF的片段，開始轉換⬇︎<br><img src="https://i.imgur.com/6FNRGii.png" alt></p></li><li><p>轉檔結果，可以看到GIF左上角出現剛剛畫的浮水印🤣&nbsp;&nbsp;⬇︎</p></li></ul><table><thead><tr><th style="text-align:center">世界要有愛!</th><th style="text-align:center">雞肉飯❤️</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://i.imgur.com/tLDHNqj.gif" alt></td><td style="text-align:center"><img src="https://i.imgur.com/IaS7v3K.gif" alt></td></tr><tr><td style="text-align:center">好看!</td><td style="text-align:center">浪漫Duke❤️</td></tr><tr><td style="text-align:center"><img src="https://i.imgur.com/XLTZUVm.gif" alt></td><td style="text-align:center"><img src="https://i.imgur.com/aKcPhnH.gif" alt></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶爾會為了DEMO用途，需要將影片轉換為GIF的形式，便於穿插在文章裡頭，但我不想為了這小小的需求安裝什麼軟體。
    
    </summary>
    
      <category term="Python" scheme="https://laplacetw.github.io/categories/Python/"/>
    
    
      <category term="python" scheme="https://laplacetw.github.io/tags/python/"/>
    
      <category term="moviepy" scheme="https://laplacetw.github.io/tags/moviepy/"/>
    
      <category term="mytoolbox" scheme="https://laplacetw.github.io/tags/mytoolbox/"/>
    
  </entry>
  
  <entry>
    <title>eMask口罩預購&amp;取貨</title>
    <link href="https://laplacetw.github.io/taiwan-emask-pre-order/"/>
    <id>https://laplacetw.github.io/taiwan-emask-pre-order/</id>
    <published>2020-03-26T14:40:12.000Z</published>
    <updated>2020-03-29T17:03:12.627Z</updated>
    
    <content type="html"><![CDATA[<p>Taiwan No.1❤️<a id="more"></a></p><h3 id="口罩預購"><a href="#口罩預購" class="headerlink" title="口罩預購"></a>口罩預購</h3><p><br><br><a href="https://emask.taiwan.gov.tw/msk/index.jsp" target="_blank" rel="noopener">eMask口罩預購系統</a>於3/12~3/18開放首波預購，今天終於開始取貨啦！取貨時間為3/26~4/1，若沒有在期限內完成領取就視同放棄唷。(這可不是什麼愚人節梗！</p><p>第二波預購期間為3/25~3/27晚上8點截止，詳情見<a href="https://mrmad.com.tw/emask-taiwan-gov-20-app" target="_blank" rel="noopener">衛福部公告</a>，我個人是使用健保快易通APP來預購的，相關設定可以參考這篇教學：<a href="https://mrmad.com.tw/emask-taiwan-gov-20-app" target="_blank" rel="noopener">點我</a>，無須讀取我們的<del>地表最強</del>健保卡，非常方便。</p><p>預購完成後就等待抽籤，首波預購人數不多，因此有參加預購的人都能買到(儘管有18萬人沒有繳費…)，第二波就未知數了＠＠<br>3/28 更新：因為第二波預購人數依然未超過上限，因此登記預購者都能買到。<br><img src="https://i.imgur.com/vRZqnCX.jpg" alt></p><h3 id="預購繳費"><a href="#預購繳費" class="headerlink" title="預購繳費"></a>預購繳費</h3><p><br><br>第二波預購開放APP也能刷卡繳費囉～話說填寫信用卡資訊的這個「卡片後三碼」反而讓我有點錯愕，就檢核碼呀😅<br><img src="https://i.imgur.com/Hi10jKK.png" alt><br>繳費成功！<br><img src="https://i.imgur.com/t3NxohE.png" alt></p><h3 id="口罩領取"><a href="#口罩領取" class="headerlink" title="口罩領取"></a>口罩領取</h3><p><br><br>統一超商ibon首頁就能看到口罩取貨專區😷<br><img src="https://i.imgur.com/c0mPcLA.jpg" alt></p><p>輸入身分證後4碼以及取貨通知簡訊中的取貨序號<br><img src="https://i.imgur.com/jEZxkSq.jpg" alt></p><p>拿著小白單到超商櫃檯就能領取到珍貴的口罩！<br><img src="https://i.imgur.com/CW90CFq.jpg" alt></p><p>希望這糟糕的一切能盡快結束😬，祝福我們都健健康康💪。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Taiwan No.1❤️
    
    </summary>
    
      <category term="Daily" scheme="https://laplacetw.github.io/categories/Daily/"/>
    
    
      <category term="covid-2019" scheme="https://laplacetw.github.io/tags/covid-2019/"/>
    
  </entry>
  
  <entry>
    <title>Manjaro安裝NVIDIA Driver＆CUDA</title>
    <link href="https://laplacetw.github.io/linux-manjaro-nvidia-driver-and-cuda/"/>
    <id>https://laplacetw.github.io/linux-manjaro-nvidia-driver-and-cuda/</id>
    <published>2020-03-02T17:19:26.000Z</published>
    <updated>2020-03-02T17:20:23.761Z</updated>
    
    <content type="html"><![CDATA[<p>搞定Manjaro的基本環境後，接下來要設定GTX 1660 Super以利後續的運算任務…噢，又折騰了不少時間，得好好紀錄過程與問題才行吶。<a id="more"></a></p><h3 id="Manjaro-freezing-at-boot-screen-after-NVIDIA-driver-installed"><a href="#Manjaro-freezing-at-boot-screen-after-NVIDIA-driver-installed" class="headerlink" title="Manjaro freezing at boot screen after NVIDIA driver installed"></a>Manjaro freezing at boot screen after NVIDIA driver installed</h3><p>透過Manjaro硬體偵測安裝non-free driver：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mhwd -a pci nonfree 0300</span><br></pre></td></tr></table></figure><br><img src="https://i.imgur.com/mfQGFmj.png" alt></p><p>重新開機後，很好，畫面就停在黑螢幕了，進不去登入畫面(傻眼。原來在安裝了NVIDIA驅動後還必須手動修改硬體設定，否則視窗服務的運作會異常，導致系統看起來掛了，所以安裝N卡驅動的正確姿勢應該是要先修改設定文件後再重新啟動。首先，在黑螢幕的畫面按下ctrl + alt + F3來進入Terminal：</p><p>查詢GPU BusID<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lspci | grep -E <span class="string">"VGA|3D"</span></span><br></pre></td></tr></table></figure><br>輸出訊息前三組數字即為BusID(忽略前綴0)，例如「01:00.0」則BusID為「1:0:0」。</p><p>備份設定<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv /etc/X11/xorg.conf.d/90-mhwd.conf /etc/X11/xorg.conf.d/90-mhwd.conf.bak</span><br></pre></td></tr></table></figure></p><p>寫入 /etc/X11/xorg.conf.d/90-mhwd.conf，BusID改為你要設定的GPU，我是設定為內顯的AMD GPU。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Section <span class="string">"Module"</span></span><br><span class="line">    Load <span class="string">"modesetting"</span></span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section <span class="string">"Device"</span></span><br><span class="line">    Identifier <span class="string">"nvidia"</span></span><br><span class="line">    Driver <span class="string">"nvidia"</span></span><br><span class="line">    BusID <span class="string">"PCI:1:0:0"</span></span><br><span class="line">    Option <span class="string">"AllowEmptyInitialConfiguration"</span></span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure></p><p>修改完成後重新啟動即可。</p><p>參考：<a href="https://blog.csdn.net/baidu_33340703/article/details/103977592" target="_blank" rel="noopener">https://blog.csdn.net/baidu_33340703/article/details/103977592</a></p><h3 id="CUDA＆cuDNN"><a href="#CUDA＆cuDNN" class="headerlink" title="CUDA＆cuDNN"></a>CUDA＆cuDNN</h3><p>在安裝CUDA之前，先確認N卡驅動是否正確安裝：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvidia-smi</span><br></pre></td></tr></table></figure><br><img src="https://i.imgur.com/UKIf8U1.png" alt></p><p>安裝CUDA、cuDNN以及後續會用到的Python函式庫：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -Syu tensorflow-cuda cuda cudnn python-pycuda python-tensorflow-cuda python-matplotlib</span><br></pre></td></tr></table></figure><br>＊為避免和pacman軟體庫提供的版本衝突，Arch/Manjaro移除了pip軟體庫中的tensorflow-gpu，以tensorflow-cuda取代之。</p><p>將CUDA安裝目錄中的samples複製到home目錄下，編譯然後測試CUDA是否安裝成功：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cp -r /opt/cuda/samples ~</span><br><span class="line">$ ~/samples</span><br><span class="line">$ sudo make -k</span><br></pre></td></tr></table></figure><br>編譯過程需要點時間，大概30分鐘，編譯完成後執行deviceQuery：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/samples/1_Utilities/deviceQuery</span><br><span class="line">$ ./deviceQuery</span><br><span class="line">./deviceQuery Starting...</span><br><span class="line"></span><br><span class="line">CUDA Device Query (Runtime API) version (CUDART static linking)</span><br><span class="line"></span><br><span class="line">Detected 1 CUDA Capable device(s)</span><br><span class="line"></span><br><span class="line">Device 0: <span class="string">"GeForce GTX 1660 SUPER"</span></span><br><span class="line"> CUDA Driver Version / Runtime Version          10.2 / 10.2</span><br><span class="line"> CUDA Capability Major/Minor version number:    7.5</span><br><span class="line"> Total amount of global memory:                 5945 MBytes (6233391104 bytes)</span><br><span class="line"> (22) Multiprocessors, ( 64) CUDA Cores/MP:     1408 CUDA Cores</span><br><span class="line"> </span><br><span class="line">(略...)</span><br><span class="line"></span><br><span class="line">deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 10.2, CUDA Runtime Version = 10.2, NumDevs = 1</span><br><span class="line">Result = PASS  <span class="comment"># PASS表示CUDA安裝成功</span></span><br></pre></td></tr></table></figure></p><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><p>用<a href="https://laplacetw.github.io/data-sci-ml-hello-world-mnist/">MNIST手寫數字辨識</a>來做測試，每批次都1秒就運算完了，雖然實際應該不到1秒XD</p><h3 id="Keras-could-not-create-cudnn-handle-cudnn-status-alloc-failed"><a href="#Keras-could-not-create-cudnn-handle-cudnn-status-alloc-failed" class="headerlink" title="Keras could not create cudnn handle: cudnn_status_alloc_failed"></a>Keras could not create cudnn handle: cudnn_status_alloc_failed</h3><p>噢，正想說一切都配置好了，趕緊來繼續實驗放置了半個月的cifar-10模型訓練(因為Google CoLab的免費資源太熱門導致經常斷線而白忙，只好自己建置運算環境了😂)，結果出現了一個看起來很厲害的錯誤訊息(傻眼x2。查詢後發現是GPU記憶體配置問題，<a href="https://www.tensorflow.org/guide/gpu#limiting_gpu_memory_growth" target="_blank" rel="noopener">Tensorflow為了避免記憶體碎片化</a>，預設會盡可能把可見的GPU記憶體都映射給當前的進程：</p><blockquote><p>By default, TensorFlow maps nearly all of the GPU memory of all GPUs (subject to CUDA_VISIBLE_DEVICES) visible to the process. This is done to more efficiently use the relatively precious GPU memory resources on the devices by reducing memory fragmentation.</p></blockquote><p>結果就是cifar-10這樣的運算量就導致記憶體不足而拋出錯誤訊息，所以我們必須讓Tensorflow按需求配置GPU記憶體：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config = tf.compat.v1.ConfigProto()  <span class="comment"># tensorflow-gpu 2.1.0</span></span><br><span class="line">config.gpu_options.allow_growth=<span class="keyword">True</span></span><br><span class="line">tf.compat.v1.keras.backend.set_session(tf.compat.v1.Session(config=config))</span><br></pre></td></tr></table></figure></p><p>解決～每批次的運算速度比我在CoLab上面快10秒呢，$$沒有白花了QQ</p><p>參考：</p><ul><li><a href="https://blog.csdn.net/weixin_42769131/article/details/88848478" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42769131/article/details/88848478</a></li><li><a href="https://blog.csdn.net/zuoyouzouzou/article/details/104329286" target="_blank" rel="noopener">https://blog.csdn.net/zuoyouzouzou/article/details/104329286</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搞定Manjaro的基本環境後，接下來要設定GTX 1660 Super以利後續的運算任務…噢，又折騰了不少時間，得好好紀錄過程與問題才行吶。
    
    </summary>
    
      <category term="Linux" scheme="https://laplacetw.github.io/categories/Linux/"/>
    
    
      <category term="keras" scheme="https://laplacetw.github.io/tags/keras/"/>
    
      <category term="linux" scheme="https://laplacetw.github.io/tags/linux/"/>
    
      <category term="manjaro" scheme="https://laplacetw.github.io/tags/manjaro/"/>
    
      <category term="nvidia" scheme="https://laplacetw.github.io/tags/nvidia/"/>
    
  </entry>
  
</feed>
