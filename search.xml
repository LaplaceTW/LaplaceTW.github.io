<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[資料科學筆記(3)：Web Crawler]]></title>
    <url>%2Fdata-sci-google-search%2F</url>
    <content type="text"><![CDATA[Python:Google Search 說到網路爬蟲，最厲害的應該就是Google了．．．呵！雖然寫不出這麼會爬的東西，但沒關係，我們只要能寫個像樣的爬蟲去使喚Google的爬蟲就行 : p Web Analytics首先來瞧瞧Google Search的網址，嘗試輸入任意關鍵字執行搜尋後可以發現，搜尋的網址是長這樣的： http://www.google.com.tw/search?q= “=”後面便是搜尋的關鍵字了，再來檢查一下網頁原始碼，搜尋結果就在class=”g”的div區塊中。 既然爬蟲能這樣到處玩耍，想必也會有不歡迎爬蟲的網站XD 畢竟要是放任大量爬蟲在網站拚命搜刮，可是會給伺服器帶來困擾的呢，所以Web Crawler會有許多的技巧來偽裝，讓自己在伺服器的眼中看起來更像是人為的操作：例如，在request加上user agent偽裝成瀏覽器，或在多個request之間設置延遲，除了模擬人為操作，亦避免造成他人伺服器的負擔．．．這是道德問題XD Code#!/usr/bin/env python3 # *** coding : utf-8 *** import random import requests as rq from bs4 import BeautifulSoup as bs user_agent = [&quot;Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0&quot;, &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0&quot;, &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0&quot;, &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&quot;] target = input(&apos;search:&apos;) url = &apos;http://www.google.com.tw/search?q=&apos; + target try: res = rq.get(url=url, headers={&apos;User-Agent&apos;: random.choice(user_agent)}) res.raise_for_status() except rq.exceptions.HTTPError: print(&apos;[HTTP_Error]&apos;) soup = bs(res.text, &apos;html.parser&apos;) link = soup.select(&apos;.g .r a&apos;) for index in range(2): print(link[index].string) # title print(link[index][&apos;href&apos;]) # link 輸出結果：]]></content>
      <categories>
        <category>Data Science</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>web crawler</tag>
        <tag>data science</tag>
        <tag>google search</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[資料科學筆記(2)：BeautifulSoup模組]]></title>
    <url>%2Fdata-sci-bs4%2F</url>
    <content type="text"><![CDATA[Python:BeautifulSoup Module 使用Requests取得網頁內容後，會得到一堆密密麻麻的html，這時候便可以讓BeautifulSoup來協助解析網頁內容。 Install$pip3 install bs4 Web Analytics來試著寫一個簡單的web crawler去PTT西斯版逛逛吧，但因為西斯版有年齡驗證，所以必須利用Requests.Session()物件去做post，按下各位在美好童年就已經按過的「我已滿18歲按鈕」，web crawler取得伺服器驗證後就可以在西斯版橫行無阻啦。 從截圖可以看到，url為https://www.ptt.cc/ask/over18...這就是取得驗證的網址，注意url後頭的from=%2Fbbs%2Fsex...在post驗證的payload要寫入from這個key，表示這個post來自西斯版首頁。 關於BeautifulSoup更多細節請參考官方文件，這邊簡單說明，基本上就是把request取得的html丟給Soup去解析，接著可以使用find(), find_all(), select()等方法來篩選尋找目標數據所在的tag。 舉例來說，我要讓web crawler去爬取西斯版首頁的文章標題＆連結，檢視網頁原始碼後可以發現我要的數據就在class＝r-ent的tag裡面。 Codeimport requests as rq from bs4 import BeautifulSoup as bs url = &apos;https://www.ptt.cc/bbs/sex/index.html&apos; payload = { &apos;from&apos;:url, &apos;yes&apos;:&apos;yes&apos; } session = rq.Session() session.post(&apos;https://www.ptt.cc/ask/over18&apos;, data=payload) res = session.get(url) soup = bs(res.text, &apos;html.parser&apos;) result = soup.select(&apos;.r-ent .title a&apos;) for title in result: print(title.text, title[&apos;href&apos;]) 輸出結果：]]></content>
      <categories>
        <category>Data Science</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>requests</tag>
        <tag>bs4</tag>
        <tag>web crawler</tag>
        <tag>data science</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[資料科學筆記(1)：Requests模組]]></title>
    <url>%2Fdata-sci-requests%2F</url>
    <content type="text"><![CDATA[Python:Requests Module Install$pip3 install requests Get此例為對網頁做基本的請求＆接收回應，raise_for_status()為連線檢查，若返回異常則會拋出Error。 import requests as rq url = &apos;http://www.google.com.tw/search?&apos; # target url try: res = rq.get(url) res.raise_for_status() except rq.HTTPError: print(&apos;HTTP Error!&apos;) print(res.text) # html Payload必要時可以加上參數，例如Google Search: payload = {&apos;q&apos;:&apos;data science&apos;} res = rq.get(url, params=payload) # http://www.google.com.tw/search?q=data+science 參數的部分為字典結構，key則要視url結構而定。 Post針對網頁中的表單，可以使用Post來傳送Payload res = rq.post(url, params=payload) 不過．．．對Google Search頁面做Post會得到這樣的回應： &lt;a href=//www.google.com/&gt;&lt;span id=logo aria-label=Google&gt;&lt;/span&gt;&lt;/a&gt; &lt;p&gt;&lt;b&gt;405.&lt;/b&gt; &lt;ins&gt;That’s an error.&lt;/ins&gt; &lt;p&gt;The request method &lt;code&gt;POST&lt;/code&gt; is inappropriate for the URL &lt;code&gt;/search?q=data+science&lt;/code&gt;. &lt;ins&gt;That’s all we know.&lt;/ins&gt; Google說這樣是不當的行為呢，我只是做個示範，好孩子不要學呀＾.&lt;]]></content>
      <categories>
        <category>Data Science</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>requests</tag>
        <tag>web crawler</tag>
        <tag>data science</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo on GitHub Pages:從Win轉移到Mac]]></title>
    <url>%2Fhexo-switching-from-win-to-mac%2F</url>
    <content type="text"><![CDATA[Hexo on GitHub Pages:Switching from Windows to Mac一直以來都有想換筆電的想法，但總是能撐則撐，畢竟是要噴個幾萬塊的事情呢．．．不過前陣子需要帶著筆電趴趴造，而跟著我8年的老Win筆電過於笨重，這實在令人感到非常困擾，所以就決定換掉囉。經考量後換了Mac Air．．．沒有所謂最好用的工具，只有最適合的工具，畢竟工具還是要人來使用的，關於工具的選擇就別開戰場啦（笑）既然換了電腦換了系統，除了熟悉系統操作，再來就是開發環境的建置囉，趕緊先把Hexo的環境先建置起來才能更新Blog。 Git官方下載：點我，若是已安裝過自帶Git環境的XCode可以跳過。 Node.js官方下載：點我 Hexosudo npm install -g hexo-cli sudo npm install hexo-deployer-git --save cd {blog_name} # build folder of blog hexo init {blog_name} hexo npm install hexo s --debug # run local server(127.0.0.1:4000) Data確定在本機可以正常運作後，接下來只要把根目錄下的_config.yml、scaffolds資料夾及source資料夾覆寫到Mac的Blog根目錄下就完成！ Note後記：1.在發佈這篇文章後，我發現Blog分類及標籤頁面消失了．．．原來是我只把source底下的“_posts”複製到新的根目錄下，只要重新建立“categories”及”tags”兩個new page就行啦。2.原本使用的NexT主題為舊版，這次乾脆就更新到v6.4.0啦，配置檔只有微幅的調整，需注意的是languages的部分，檔名中hyphen後的字改為大寫字母了，如果根目錄配置檔沒有修改，Blog預設語言就會因爲找不到對應檔案而變成英文。3.所以我發現關於Hexo的筆記沒有寫到建立new page(掩面) 以上，就是我在Mac系統下所更新的第一篇學習筆記了。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>github pages</tag>
        <tag>hexo</tag>
        <tag>windows</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django:從零開始]]></title>
    <url>%2Fstart-django-project%2F</url>
    <content type="text"><![CDATA[Django:Virtual Environment &amp; New Project關於Django虛擬環境建置 &amp; 如何開始一個新專案。 Virtual Environment for Django開發Django Project建議另建一個乾淨的虛擬環境，只安裝專案所需套件，Python環境建置就不贅述，從安裝及建立虛擬環境開始: pip install virtualenv # install virtual environment package cd c:\ virtualenv DjangoEnv # build virtual environment for Django cd DjangoEnv Scripts\activate # start virtual environment pip install django # install Django package deactivate # stop virtual environment Start New Django Project建立專案。 # start virtual environment first django-admin startproject {project_name} # build new project Build Application建立應用程式。 # start virtual environment first cd {project_name} python manage.py startapp {app_name} # build application md templates # build folder for web templates md static # build folder for static files(e.g. css, images...) python manage.py makemigrations {app_name(optional)} # build data migration for database python manage.py migrate {app_name(optional)} # data synchronization Run Django Server啟動測試Server。 # start virtual environment first cd {project_name} python manage.py runserver # http://127.0.0.1:8000]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
        <tag>web framework</tag>
        <tag>virtual environment</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Error:檔案無法載入，因為這個系統已停用指令碼執行]]></title>
    <url>%2Ferror-execution-of-scripts-is-disabled-on-this-system%2F</url>
    <content type="text"><![CDATA[Error: Execution of Scripts Is Disabled on This System問題來源 : 今日在Win10作業系統下建立Python virtual environment for Django，接著要用Scripts/activate指令啟動虛擬環境時，CLI顯示了這個令人錯愕的訊息: 「檔案無法載入，因為這個系統已停用指令碼執行」 代表目前作業系統的Execution Policy設定為Restricted(不允許執行)這是我在Win7作業系統下使用虛擬環境從沒遇過的狀況，而Google搜尋結果顯示有許多人在PowerShell執行Script遇到相同問題。 Solution以系統管理員權限執行PowerShell，執行以下指令: Set-ExecutionPolicy RemoteSigned 使作業系統接受所有自訂或信任來源的Script，如此問題便解決啦。]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>pyhton</tag>
        <tag>django</tag>
        <tag>powershell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VS Code快速建立Python開發環境]]></title>
    <url>%2Fset-up-python-in-vscode%2F</url>
    <content type="text"><![CDATA[Set Up Python in Visual Studio Code個人從自學Python到現在，一直都是使用工具書所推薦的IDE:PyCharm，它確實是相當優秀的整合開發環境，但過胖這一點偶爾還是會令人感到困擾…每次打開程式就是要等它大爺暖身一下(白眼)。而開始學習在GitHub Pages寫blog以來，我都是用VS Code發文，它的輕量化和豐富的擴充套件真是令人感到愉悅呢ヽ(●´∀`●)ﾉ 所以說，乾脆就在VS Code寫Python就好啦。 Download VS Code點我前往官方下載 Install Python Extension for VS Code↓點側邊工具列的’擴充功能’，然後搜尋’Python’，就會看到MS官方為Python開發的擴充套件，直接安裝即可。 Build Working Directory建立一個工作目錄，理由後面會解釋。 Run Python File要在VS Code環境執行Python程式，你可以直接右鍵–&gt;在終端機(CLI)執行Python檔案，或者按下ctrl + `叫出CLI用’Python {file_path}’去執行也可以…但每次都這樣搞就太麻煩了嘛，所以我們來建個任務組態檔吧。 重點來了，首先點選上方工作列’檔案’–&gt;’開啟資料夾’，選擇我們剛剛建立的工作目錄，若是沒有先選擇工作目錄，那麼接下來的步驟就會發生錯誤，VS Code會告訴你一句莫名其妙的話 :’這些工作只會出現在工作區資料夾中’。選擇好工作目錄後，按下ctrl + shift + P接著搜尋’task’，點選’工作:設定工作(Tasks:Configure Task)‘，然後VS Code會在工作目錄下產生一個’tasks.json’，將下方內容直接覆蓋並存檔 : &quot;version&quot;: &quot;2.0.0&quot;, &quot;tasks&quot;: [ { &quot;label&quot;: &quot;Run Python Code&quot;, &quot;type&quot;: &quot;shell&quot;, &quot;command&quot;: &quot;python&quot;, &quot;args&quot;: [ &quot;${file}&quot; ], &quot;group&quot;: { &quot;kind&quot;: &quot;build&quot;, &quot;isDefault&quot;: true }, &quot;presentation&quot;: { &quot;echo&quot;: true, &quot;reveal&quot;: &quot;always&quot;, &quot;focus&quot;: true, &quot;panel&quot;: &quot;shared&quot; } } ] ↓然後就可以透過快捷鍵’ctrl + shift + B’執行Python程式囉，順帶一提，這是我寫給LineBot的Google爬蟲XD]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>vs code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo on GitHub Pages:發文]]></title>
    <url>%2Ffirst-post-on-github-pages%2F</url>
    <content type="text"><![CDATA[The First Post on Github Pages我來面對Hexo相關記錄一直沒有往發文的部分推進的事實了，就是這樣(Ora)關於發文這件事，正所謂工欲善其事，必先利其器，就從選擇一個自己偏好的文字編輯器或IDE開始，個人私心推薦VSCode。 決定好工具後，首先來看看blog根目錄底下有個叫’scaffolds’的資料夾，這裡面放的是blog頁面模板。打開’post.md’會見到預先寫入的title、date等等，此為發文的模板，每次發文都是以這個檔案當為範本，當然我們也可以編輯它。例如，模板預設是沒有寫入’categories’的，那我會把它加上去，否則每次發文都沒有分類的項目可以填，還得自己打(懶~) 在Hexo框架撰文是使用Markdown，不熟悉語法可以參考官方文件，很簡單的~ 然後就可以開始撰寫文章囉，相關指令如下: Start New Postcd blog hexo new post post-title # &apos;post-title&apos;請置換為自己的文章標題 Publish New Posthexo d -g # generate --&gt; deploy 關於發文有兩件小事分享 : 1.categories是唯一、有序的，tags則沒有區分(關鍵字的概念)，意思是如果你的文章設定了A、B兩個類別，那麼這篇文章的分類就會變成’類別A底下的類別B’。2.在new post指令輸入文章標題時，因為標題也是.md的檔名，所以一開始我用underline做區隔(a_b_c)，但我發現Hexo會自動把underline轉成hyphen(a-b-c，順帶一提這條短線叫hyphen…dash是破折號! )，所以就配合它啦，反正title可以建立文章後再修改為中文，檔名還是英文命名比較不會有什麼光怪陸離的事情發生(怕.jpg) 以上，優化的部分會努力推進的。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
        <tag>github pages</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[關於Python的變數範圍]]></title>
    <url>%2Fscope-of-python-variables%2F</url>
    <content type="text"><![CDATA[Global and Local Scope of Python Variables在Python的世界裡，變數是不需要先宣告就能直接賦値並使用的，而 變數的作用範圍會在賦値的時候建立 ，除非你指定了global或nonlocal關鍵字。先看看官方文件怎麼說: In Python, variables that are only referenced inside a function are implicitly global. If a variable is assigned a value anywhere within the function’s body, it’s assumed to be a local unless explicitly declared as global. Though a bit surprising at first, a moment’s consideration explains this. On one hand, requiring global for assigned variables provides a bar against unintended side-effects. On the other hand, if global was required for all global references, you’d be using global all the time. You’d have to declare as global every reference to a built-in function or to a component of an imported module. This clutter would defeat the usefulness of the global declaration for identifying side-effects. 簡而言之，在函式區塊內部賦値的變數即為區域變數(除非指定global或nonlocal)，於函式區塊之外賦値的便是全域變數。 直接敲幾段code來看會更清楚 : #!/usr/bin/evn python3 # *** coding : utf-8 *** a, b = 1, 2 # Global Variable def func_a(): global a # Global Variable print(a, &quot;# Global Variable a&quot;) a = 2 def func_b(): b = 3 # Local Variable in func_a() def func_c(): nonlocal b # Local Variable in func_a() b = 4 print(b, &quot;# Local Variable b&quot;) print(b, &quot;# Local Variable b&quot;) func_c() func_a() func_b() print(b, &quot;# Global Variable b&quot;) 輸出結果: 1 # Global Variable a 3 # Local Variable b 4 # Local Variable b 2 # Global Variable b]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>variable</tag>
        <tag>nonlocal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Heroku環境下使用自訂字型]]></title>
    <url>%2Fuse-custom-fonts-in-heroku-apps%2F</url>
    <content type="text"><![CDATA[How to Use Custom Fonts in Heroku Apps?事情是這樣子的，持續努力讓Bot能查教師課表的某一天，在經歷了數據蒐集、數據處理、介接imgur api…等等，終於讓Bot傳來了一張圖片啦~但仔細一看似乎不太對勁(!) 我X，踩雷了，竟然出現中文亂碼的狀況，這課表鬼才看得懂(鬼:口口口口口這鬼也看不懂好嘛)於是又開始try&amp;error loop…甚至讓Bot去下CLI指令刪除搬移檔案…繞了好一大圈，終於讓我找到答案了!!!令人難過的是，這方法非常簡單…雖然這是常有的事，可就是白耗了好多時間。但沒關係，讓碰見相同問題的人能快速找到解決方案，這就是學習筆記的意義所在。 Solution1.準備好你要的字型，要特別注意的是，該字型必須是Linux/Ubuntu所支援的字型。2.在專案根目錄下新增一個名稱為「.fonts」的資料夾(tips:在命名時輸入.fonts.)3.把字型檔案(.ttf)放到上述資料夾中4.重新push專案 關於中文亂碼，似乎是matplotlib無法在Heroku環境下找到可套用的中文字型，但我在本機測試是沒問題的…所以要自己提供字型就是了，真是踩了個莫名其妙的雷，總之中文亂碼問題就這麼解決了。]]></content>
      <categories>
        <category>LineBot</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>line</tag>
        <tag>bot</tag>
        <tag>heroku</tag>
        <tag>matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[翻缸Day21:藍綠藻來襲]]></title>
    <url>%2Frestart-planted-tank-day21%2F</url>
    <content type="text"><![CDATA[How to Kill Cyanobacteria in The Planted Tank?開始新工作，下了班想發文卻提不起勁…呵。但還是利用假日來紀錄一下魚缸的近況吧，也希望還有力氣可以寫篇學習筆記什麼的。↓上週三出門辦事發現水族店在隔壁，就進去逛了↓於是加入新成員↓綠宮廷轉水中葉，全數拔起整理再植草↓角螺開心地啃藻…這缸子該刷了↓僱來一批除藻小幫手 然後呢，最近幾天發現藍綠藻持續蔓延，底砂、牛毛氈甚至入水口生化棉也染上了噁心的藍綠色…即使拔起來用檸檬酸浸泡清洗試圖阻止，依然無效。經過爬文吸收資訊，也確定不會對魚蝦造成傷害，決定直接使用紅黴素來處理。雖然不會對魚蝦造成影響，但對於硝化菌們來說可就不妙了，所以投藥前必須將濾材另行安置才行。 ↓到處生長的藍綠藻↓移出圓桶中的濾材並加強打氣維持好氧的硝化菌↓然後紅黴素便可以登場了!(決鬥吧藍綠藻!抽牌!) ※關於投藥劑量根據P大所說的2.5ppm來計算，我的魚缸水量約23L:23000000 * 0.00025% = 57.5(mg)，一顆紅黴素膠囊為250mg，所以我只需要1/5顆左右的劑量、持續投藥四日。 2018/7/23 連續投藥Day3除了每日換水1/2，光源也調整為上午與傍晚開啟、不連續合計8小時(有一說如此中斷能干擾藻類生長)，目前觀察到藍綠藻已停止蔓延，清洗後的入水口綿也沒有藍綠藻生長。 2018/7/25 連續投藥Day5↓藍綠藻明顯消失，但我決定今日不換水，讓藥物的效用多殘留一天，確保能控制住…別再來啦，真的是挺麻煩的。]]></content>
      <categories>
        <category>Aquarium</category>
      </categories>
      <tags>
        <tag>aquarium</tag>
        <tag>planted tank</tag>
        <tag>algae control</tag>
        <tag>cyanobacteria</tag>
        <tag>Erythrocin</tag>
        <tag>水族</tag>
        <tag>草缸</tag>
        <tag>除藻</tag>
        <tag>藍綠藻</tag>
        <tag>紅黴素</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[先別管如何發文了，你聽過NexT嗎?]]></title>
    <url>%2Fbefore-new-post-root-config-and-theme-config%2F</url>
    <content type="text"><![CDATA[Before First Post:About Root Config &amp; Theme Config部署完我們的Blog呢，別急著發文，看一眼別人的，再看看自己的頁面，應該有明白些什麼吧(笑)，先進行初步的個人化設定、讓它看起來更像一個Personal Blog吧~那麼，就先從選擇一個喜歡的佈景主題開始。Hexo如此熱門的框架，有許多的第三方主題能套用，或者想打造一個自己的主題也行，而我選擇了相當受歡迎的經典主題──NexT。 安裝NexT主題cd blog # 移動至Blog根目錄下 git clone https://github.com/theme-next/hexo-theme-next themes/next 設定主題打開blog根目錄下的Hexo root配置檔(_config.yml)，找到#Extensions區塊，將theme屬性設定為next # Extensions ## Plugins: https://hexo.io/plugins/ ## Themes: https://hexo.io/themes/ theme: next Local Host測試hexo clean # 清除hexo cache hexo s --debug # 以debug模式啟動local host server 如果CLI沒有輸出錯誤訊息，那麼你應該會在CLI見到以下這段文字: INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 接著打開瀏覽器輸入localhost:4000便能在本機查看、測試自己的Blog囉。 配置檔(_config.yml)更多詳細的Config設定請參考官方文件，在此僅就個人所設定的部分作介紹。 *官方文件(中文): 1.Hexo docs 2.NexT docs Root Config檔案位址:~/_config.yml # Site title: LaplaceTW&apos;s Blog # 網站標題 subtitle: learning-by-doing # 網站副標題 description: learning-by-doing # 網站描述 keywords: author: LaplaceTW # 個人暱稱 language: zh-tw # 頁面語言 timezone: # URL ## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos; url: https://username.github.io/ # 網站首頁網址 root: / permalink: :title/ # 文章永久連結，基於優化考量不建議使用預設值(:year/:month/:day/:title/) permalink_defaults: # Home page setting # path: Root path for your blogs index page. (default = &apos;&apos;) # per_page: Posts displayed per page. (0 = disable pagination) # order_by: Posts order. (Order by date descending by default) index_generator: path: &apos;&apos; per_page: 5 # 每頁顯示文章數(預設值為10) order_by: -date ↓Root Config沒什麼複雜的屬性設定，不過在#site設定部分，我以為設定為subtitle的文字會顯示在author下方(紅框處)…結果顯示的文字是description，所以我說內個subtitle呢??? Theme Config檔案位址:~/themes/next/_config.yml favicon首先就來改網站的分頁icon吧，我覺得這對Blog個人化而言挺重要的呢XD 個人只有更改前三個icon，尺寸調整好後，修改為同樣的檔名直接取代掉就行(懶)，然後就可以在瀏覽器的分頁頁籤看到自己的icon囉~圖片位址:~/themes/next/source/images favicon: small: /images/favicon-16x16-next.png medium: /images/favicon-32x32-next.png apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml subtitleindex_with_subtitle改為true依然不見subtitle顯示於何處。 # If true, will add site-subtitle to index page, added in main hexo config. #subtitle: Subtitle index_with_subtitle: false schemeNexT主題目前有四種外觀模式可以選擇~將喜歡的模式取消註解即可。 # --------------------------------------------------------------- # Scheme Settings # --------------------------------------------------------------- # Schemes #scheme: Muse scheme: Mist #scheme: Pisces #scheme: Gemini sidebar側邊欄依設定的Scheme不同，有許多屬性可以設定。 # --------------------------------------------------------------- # Sidebar Settings # --------------------------------------------------------------- social: # 顯示社交訊息(||後為social icon設定) GitHub: https://github.com/laplacetw || github # icon參考網址 https://fontawesome.com/cheatsheet?from=io E-Mail: mailto:nicholas611469@gmail.com || envelope # Sidebar Avatar # 顯示作者頭像 # in theme directory(source/images): /images/avatar.gif # in site directory(source/uploads): /uploads/avatar.gif avatar: /images/avatar.png # Creative Commons 4.0 International License. # 顯示創用CC授權模式 # http://creativecommons.org/ # Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero creative_commons: by #creative_commons: creative commons文章內標註創用CC授權條款 # Declare license on posts post_copyright: enable: true license: CC BY 4.0 license_url: https://creativecommons.org/licenses/by/4.0/ third party services關於NexT所支援之第三方服務請參考官方文件說明]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Theme</tag>
        <tag>NexT</tag>
        <tag>Optimization</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[翻缸Day8:除藻生物]]></title>
    <url>%2Frestart-planted-tank-day8%2F</url>
    <content type="text"><![CDATA[Algae Eaters for Planted Tank目前光照時間已拉長至8小時，光源為Johnlen LED 1.5呎19W水草自然混光燈、色溫4000k&amp;7000k的燈珠各3顆，CO2則是24小時不間斷，唯夜間會降低出氣量。重新翻缸後，底床僅有舊矽砂無鋪設基肥，依植草位置適量埋入ISTA水草根肥，因此在每週換水1/2後會酌量添加TBS綠色&amp;紅色水草液肥。雖然目前並無藻類大量滋生的跡象，但除藻生物可是水草缸不可或缺的小幫手呢。 因為前景的牛毛氈仍是以相當緩慢的生長速度在蔓延中，大概還要兩三週我才敢放入黑殼蝦…以免維護中的草皮被連根拔起!而說到除藻生物，我偏好可愛的小精靈~但水族店老闆表示折損率太高沒有再引進T.T 看來小精靈真的不好飼養，個人經驗…撐不過半年就上天堂了，我也是搞不懂問題出在哪。唉，只好退而求其次以小猴飛狐代替，以及好飼養又很勤奮工作的角螺~ ↓換了新環境的小猴飛狐目前看來有點膽小 ↓小而圓的綠宮廷水上葉逐漸轉化為細長的水中葉了 今早一看，小猴飛狐已經跟黑燈們開始混熟了…再觀察觀察吧，因為北辰大有提過小猴飛狐的危險性，希望這傢伙安份點。]]></content>
      <categories>
        <category>Aquarium</category>
      </categories>
      <tags>
        <tag>aquarium</tag>
        <tag>planted tank</tag>
        <tag>algae control</tag>
        <tag>水族</tag>
        <tag>草缸</tag>
        <tag>algae eaters</tag>
        <tag>除藻生物</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[只要6塊錢~第一次自拍證件照就上手]]></title>
    <url>%2Ftake-a-headshot-yourself%2F</url>
    <content type="text"><![CDATA[How to Take a Headshot Yourself at Home?說到 大頭照 這個東西，其實使用到的機會不多，但要用的時候總是被要求繳交 6個月內的證件照…照相館動輒兩三百塊，拍出來的大頭照多麼不堪我就不說了，大家應該都很有經驗(菸)。雖說市面上已有證件快照的機器，但也不是說很普及，收費大約是$150，於是我想起有看過在家自拍大頭照的教學，就決定來試試了，也讓我的700D在平淡無奇的日常生活中能有登場的機會。 首先呢，找面明亮、乾淨的牆當背景，然後想辦法架好你的相機，手邊有腳架的話當然是最方便啦…如果相機螢幕能翻轉那就更好囉 : ) 接下來就是設定倒數連拍，我覺得10秒比較夠用XD 證件照的規定可以參考外交部領事局的說明，我就不贅述，總之，拍出理想的照片後就是去背、裁剪。若是不會使用專業的修圖軟體，可以參考這篇用PPT處理大頭照的教學，還能調膚色呢XD 說到裁剪照片呢，這個2吋到底是多大呢?拜了Google大神後得到很多答案…眾說紛紜!我個人認為看起來最順眼、最2吋的是像素寬高比為433x581 pixel、實際寬高比為3.5x5.08的大小，提供參考。 裁剪完成後，在修圖軟體上開一張4x6的畫布…小畫家也是可以，那麼4x6是多大呢?(尺寸什麼的好煩)像素寬高比為1795x1205 pixel，然後把大頭照貼滿整個畫布吧!(說貼滿其實也不過8張啦XD) 上述準備就緒，尋找你附近的 立可得 吧~ 許多便利商店及大賣場都有設置喔，可以透過APP將照片傳輸至機器來列印照片，非常方便。 我是在便利商店的立可得列印的，傳輸照片、設定列印選項後，機器會列印繳費單，4x6一張6元，拿著它去櫃檯繳費後就可以回到機器前面取照片囉。 第一次自拍證件照就上手，成功~]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>headshot</tag>
        <tag>大頭照</tag>
        <tag>證件照</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[部署失敗:Failed to Execute Prompt Script]]></title>
    <url>%2Ferror-failed-to-execute-prompt-script%2F</url>
    <content type="text"><![CDATA[Error: failed to execute prompt script事實上呢，在我建好了Blog、龜毛地設定了root配置檔，抱持著既期待又怕受傷害的心情在CLI敲下部署指令後，CLI顯示error: failed to execute prompt script (exit code 1)…嗯，居然部署失敗!!! 我X，都還沒發文呢。趕緊雙手合十虔誠地向Google大神拜呀拜，經過幾次Try&amp;Error，很快地找到解決方案了~(灑花) Solution找到blog資料夾中的root配置檔_config.yml，修改文件中的部署設定。 原始設定: deploy: type: git repository: https://github.com/username/username.github.io.git branch: master 修改為: deploy: type: git repository: https://username:userpassword@github.com/username/username.github.io.git branch: master 部署成功 : ) *參考來源]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
        <tag>Error</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo on GitHub Pages:從零開始]]></title>
    <url>%2Fbuild-blog-with-hexo-on-github-pages%2F</url>
    <content type="text"><![CDATA[Build Blog with Hexo on GitHub Pagescoding也摳了幾年，遇到Bug總是靠著拜Google大神，就這麼一路走來，看過無數高手們手把手的教學文，心裡想著自己哪天也來寫寫學習筆記，紀錄自己的學習歷程以及遇到的問題(以及至今仍在摸索中的水草缸…)，也許在某個夜深人靜的時刻，能幫助到和我一樣經常廢寢忘食、苦苦追尋Bug解決方案的某個誰。於是這個Blog就這麼建起來了，學習筆記就決定從自己搭建Personal Blog的過程開始紀錄吧。 前置作業安裝Node.js官網載點 接著執行作業系統的CLI(command-line interface)輸入以下安裝指令 安裝Hexonpm install hexo-cli -g hexo version # 若安裝成功可查看Hexo版本 安裝Hexo Gitnpm install hexo-deployer-git --save 註冊GitHub帳號官網 特別注意 :為避免某些文件配置錯誤的發生，使用者名稱(username)請務必設定為小寫，使用者名稱也將成為Personal Blog網址的主要部分 新增GitHub專案↓按下New repository↓輸入專案名稱username.github.io，username請改寫為自己的使用者名稱，接著按下Create repository，前置作業到此告一段落! 開始建置初始化回到CLI輸入以下指令開始建立Blog hexo init blog # 初始化 cd blog # 移動至上一步所建立的blog資料夾 npm install # 安裝blog相關套件 部署至blog資料夾底下找到Hexo root配置檔，文件名稱為_config.yml，打開文件找到部署設定區塊填入相關資訊 特別注意 :每個項目的冒號後面一定要空格，username一樣改寫為自己的使用者名稱 deploy: type: git repository: https://github.com/username/username.github.io.git branch: master 接著就可以將Blog部署到GitHub : ) hexo d -g # generate --&gt; deploy 部署成功後在瀏覽器輸入網址 https://username.github.io/ 就可以看到我們的blog囉。 *Hexo官網]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
        <tag>GitHub Pages</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1.5呎翻缸重整]]></title>
    <url>%2Frestart-my-1.5ft-planted-tank%2F</url>
    <content type="text"><![CDATA[Restart My 1.5ft Planted Tank放置play很久很久的魚缸本來是想撤掉了，因為需要定期維護清洗設備…但又覺得可惜。後來又想改設置好整理的一呎缸，不過又考慮到水體小、水質相對難維持穩定的問題。經過一番掙扎，還是決定翻缸重新設景(天啊，水草缸都成了 水藻缸，這工程之浩大用想的就覺得累了…)。因為，我還是想要一個很療癒的水草缸啊。↓魚缸刷洗完成↓重新設景、植草 設備更換 1.不鏽鋼出入水口(玻璃美觀但…易髒難洗) 2.外置CO2霧化器(放在缸內各種藻類實在困擾) 3.致冷晶片冷水機(嗯，為了讓水草度過夏天，但經費有限…) ↓外置CO2霧化器↓本次升級的重磅武器(?)─致冷晶片冷水機 ↓重新設缸Day3，僅保留一株的溫蒂椒草已經開始冒出新葉了…生長速度如此之快，我用了個養樂多瓶底當草盆再植入底床，希望能限制它的植株大小，當個稱職的中景草。 期盼能順利成景，尤其是前景的草皮。※這是我的GitHub Pages首PO!! (灑花)]]></content>
      <categories>
        <category>Aquarium</category>
      </categories>
      <tags>
        <tag>aquarium</tag>
        <tag>planted tank</tag>
        <tag>水族</tag>
        <tag>water grass</tag>
        <tag>fishkeeping</tag>
        <tag>水草缸</tag>
      </tags>
  </entry>
</search>
