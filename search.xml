<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>資料科學筆記(4)：正則式與re模組</title>
      <link href="/data-sci-re/"/>
      <url>/data-sci-re/</url>
      <content type="html"><![CDATA[<h1 id="Python-re-Module-Regular-Expression"><a href="#Python-re-Module-Regular-Expression" class="headerlink" title="Python re Module:Regular Expression"></a>Python re Module:Regular Expression</h1><a id="more"></a><p>什麼是正則式(Regex)？常見的說法有正規表示式、正則表達式…等等，維基百科是如此描述的：使用單個字串來描述、符合某個句法規則的字串。在很多文字編輯器裡，正則運算式通常被用來檢索、替換那些符合某個模式的文字，總之就是「描述某種規則的表達式」。</p><p>↓舉例來說，email address其格式具有一定的規則，假設我要在一堆密密麻麻的html中尋找Gmail郵件地址，就必須使用正則式來表達規則，讓電腦能準確判斷出任何符合Gmail郵件地址格式的字串。<br><img src="https://i.imgur.com/lZufQJS.png" alt="lZufQJS.png"></p><h2 id="Pythex"><a href="#Pythex" class="headerlink" title="Pythex"></a>Pythex</h2><p>上述示範如何用正則式表達Gmail郵件地址規則的網站為<a href="https://pythex.org" target="_blank" rel="noopener">pythex.org</a>，可以用來驗證表達式正確與否，因為表達式的符號有點複雜，該頁面也相當貼心地放了表達式的速查表呢～只要按下regular expression cheatsheet按鈕即可查看。那麼懶人如我就不多解釋表達式符號了XD<br><img src="https://i.imgur.com/DIorI8v.png" alt="DIorI8v.png"></p><h2 id="re-module"><a href="#re-module" class="headerlink" title="re module"></a>re module</h2><p>在Python中使用正則式需要import re模組，常用的方法有search()、match()、findall()等，請參考<a href="https://docs.python.org/2/library/re.html" target="_blank" rel="noopener">官方文件</a>以取得更詳盡的介紹。</p><p>那麼，search跟match有什麼不同呢？當然不會只有字面上的意思不同而已XD 這是我一開始對這兩個方法的疑問，當然我們可以<a href="https://docs.python.org/2/library/re.html#search-vs-match" target="_blank" rel="noopener">看看官方文件怎麼說</a>，但實際編寫程式碼會幫助自己更加理解兩者間的差異。</p><p><font color="red"><font color="black">根據官方文件對兩者差異的解釋：re.match() checks for a match <font>only at the beginning<font color="black"> of the string, while re.search() checks for a match <font>anywhere<font color="black"> in the string.<font><font></font></font></font></font></font></font></font></font></p><ul><li>match的搜尋方式為「從字串起始開始搜索，遇到不符合的字元便停止」</li><li>search的搜尋方式為「整個字串」</li></ul><p>不過我個人覺得最常用的應該是findall()，比對所有符合規則的字串並返回串列：</p><pre><code>import restr_ =  &apos;_.Aa123Bb456Cc789Dd3.14&apos;find_alphabet = re.findall(r&apos;[A-Za-z]+&apos;, str_)print(find_alphabet)  ＃ [&apos;Aa&apos;, &apos;Bb&apos;, &apos;Cc&apos;, &apos;Dd&apos;]find_rational = re.findall(r&apos;[0-9]+\.?[0-9]*&apos;, str_)print(find_rational)  ＃ [&apos;123&apos;, &apos;456&apos;, &apos;789&apos;, &apos;3.14&apos;]</code></pre><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><p>在Google首頁中尋找.jpg/.png，雖然只有一張圖片～但就是測試嘛XD 另外，常用的表達式可以透過re.compile()轉成regex object，直接呼叫search()、match()、findall()，也可以在使用bs4解析網頁時使用(如下):</p><pre><code>#!usr/bin/env python3# coding:utf-8import reimport requests as rqfrom bs4 import BeautifulSoup as bspattern = re.compile(r&apos;.+\.jpg|.+\.png&apos;)url = &apos;https://www.google.com&apos;try:    res = rq.get(url)    res.raise_for_status()except rq.HTTPError:    print(&apos;HTTP Error!&apos;)soup = bs(res.text, &apos;html.parser&apos;)imgs = soup.find_all(&quot;meta&quot;, {&quot;content&quot;:pattern})  # find all images in attr &apos;content&apos; of tag &apos;meta&apos;for img in imgs:    print(img[&apos;content&apos;])  # /images/branding/googleg/1x/googleg_standard_color_128dp.png</code></pre>]]></content>
      
      <categories>
          
          <category> Data Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> data science </tag>
            
            <tag> re module </tag>
            
            <tag> regular expression </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>資料科學筆記(3)：Web Crawler</title>
      <link href="/data-sci-google-search/"/>
      <url>/data-sci-google-search/</url>
      <content type="html"><![CDATA[<h1 id="Python-Google-Search"><a href="#Python-Google-Search" class="headerlink" title="Python:Google Search"></a>Python:Google Search</h1><a id="more"></a><p>說到網路爬蟲，最厲害的應該就是Google了．．．呵！雖然寫不出這麼會爬的東西，但沒關係，我們只要能寫個像樣的爬蟲去使喚Google的爬蟲就行 : p</p><h2 id="Web-Analytics"><a href="#Web-Analytics" class="headerlink" title="Web Analytics"></a>Web Analytics</h2><p>首先來瞧瞧Google Search的網址，嘗試輸入任意關鍵字執行搜尋後可以發現，搜尋的網址是長這樣的：</p><pre><code>http://www.google.com.tw/search?q=</code></pre><p>“=”後面便是搜尋的關鍵字了，再來檢查一下網頁原始碼，搜尋結果就在class=”g”的div區塊中。</p><p>既然爬蟲能這樣到處玩耍，想必也會有不歡迎爬蟲的網站XD 畢竟要是放任大量爬蟲在網站拚命搜刮，可是會給伺服器帶來困擾的呢，所以Web Crawler會有許多的技巧來偽裝，讓自己在伺服器的眼中看起來更像是人為的操作：例如，在request加上user agent偽裝成瀏覽器，或在多個request之間設置延遲，除了模擬人為操作，亦避免造成他人伺服器的負擔．．．這是道德問題XD</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><pre><code>#!/usr/bin/env python3# *** coding : utf-8 ***import randomimport requests as rqfrom bs4 import BeautifulSoup as bsuser_agent = [&quot;Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&quot;,            &quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0&quot;,            &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0&quot;,            &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0&quot;,            &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&quot;]target = input(&apos;search:&apos;)url = &apos;http://www.google.com.tw/search?q=&apos; + targettry:    res = rq.get(url=url, headers={&apos;User-Agent&apos;: random.choice(user_agent)})    res.raise_for_status()except rq.exceptions.HTTPError:    print(&apos;[HTTP_Error]&apos;)soup = bs(res.text, &apos;html.parser&apos;)link = soup.select(&apos;.g .r a&apos;)for index in range(2):    print(link[index].string)   # title    print(link[index][&apos;href&apos;])  # link</code></pre><p>輸出結果：<br><img src="https://i.imgur.com/EcaezM5.png" alt="EcaezM5.png"></p>]]></content>
      
      <categories>
          
          <category> Data Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web crawler </tag>
            
            <tag> data science </tag>
            
            <tag> google search </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>資料科學筆記(2)：BeautifulSoup模組</title>
      <link href="/data-sci-bs4/"/>
      <url>/data-sci-bs4/</url>
      <content type="html"><![CDATA[<h1 id="Python-BeautifulSoup-Module"><a href="#Python-BeautifulSoup-Module" class="headerlink" title="Python:BeautifulSoup Module"></a>Python:BeautifulSoup Module</h1><a id="more"></a><p>使用Requests取得網頁內容後，會得到一堆密密麻麻的html，這時候便可以讓BeautifulSoup來協助解析網頁內容。</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><pre><code>$pip3 install bs4</code></pre><h2 id="Web-Analytics"><a href="#Web-Analytics" class="headerlink" title="Web Analytics"></a>Web Analytics</h2><p>來試著寫一個簡單的web crawler去PTT西斯版逛逛吧，但因為西斯版有年齡驗證，所以必須利用Requests.Session()物件去做post，按下各位在美好童年就已經按過的「我已滿18歲按鈕」，web crawler取得伺服器驗證後就可以在西斯版橫行無阻啦。</p><p>從截圖可以看到，url為<a href="https://www.ptt.cc/ask/over18...這就是取得驗證的網址，注意url後頭的from=%2Fbbs%2Fsex...在post驗證的payload要寫入from這個key，表示這個post來自西斯版首頁。" target="_blank" rel="noopener">https://www.ptt.cc/ask/over18...這就是取得驗證的網址，注意url後頭的from=%2Fbbs%2Fsex...在post驗證的payload要寫入from這個key，表示這個post來自西斯版首頁。</a><br><img src="https://i.imgur.com/PAuJRHa.png" alt="PAuJRHa.png"></p><p>關於BeautifulSoup更多細節請參考<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html" target="_blank" rel="noopener">官方文件</a>，這邊簡單說明，基本上就是把request取得的html丟給Soup去解析，接著可以使用find(), find_all(), select()等方法來篩選尋找目標數據所在的tag。</p><p>舉例來說，我要讓web crawler去爬取西斯版首頁的文章標題＆連結，檢視網頁原始碼後可以發現我要的數據就在class＝r-ent的tag裡面。<br><img src="https://i.imgur.com/56hpBfq.png" alt="56hpBfq.png"></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><pre><code>import requests as rqfrom bs4 import BeautifulSoup as bsurl = &apos;https://www.ptt.cc/bbs/sex/index.html&apos;payload = {    &apos;from&apos;:url,    &apos;yes&apos;:&apos;yes&apos;}session = rq.Session()session.post(&apos;https://www.ptt.cc/ask/over18&apos;, data=payload)res = session.get(url)soup = bs(res.text, &apos;html.parser&apos;)result = soup.select(&apos;.r-ent .title a&apos;)for title in result:    print(title.text, title[&apos;href&apos;])</code></pre><p>輸出結果：<br><img src="https://i.imgur.com/NmCiRB0.png" alt="NmCiRB0.png"></p>]]></content>
      
      <categories>
          
          <category> Data Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web crawler </tag>
            
            <tag> data science </tag>
            
            <tag> bs4 module </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>資料科學筆記(1)：Requests模組</title>
      <link href="/data-sci-requests/"/>
      <url>/data-sci-requests/</url>
      <content type="html"><![CDATA[<h1 id="Python-Requests-Module"><a href="#Python-Requests-Module" class="headerlink" title="Python:Requests Module"></a>Python:Requests Module</h1><a id="more"></a><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><pre><code>$pip3 install requests</code></pre><h2 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h2><p>此例為對網頁做基本的請求＆接收回應，raise_for_status()為連線檢查，若返回異常則會拋出Error。</p><pre><code>import requests as rqurl = &apos;http://www.google.com.tw/search?&apos;  # target urltry:    res = rq.get(url)    res.raise_for_status()except rq.HTTPError:    print(&apos;HTTP Error!&apos;)print(res.text)  # html</code></pre><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p>必要時可以加上參數，例如Google Search:</p><pre><code>payload = {&apos;q&apos;:&apos;data science&apos;}res = rq.get(url, params=payload)  # http://www.google.com.tw/search?q=data+science</code></pre><p>參數的部分為字典結構，key則要視url結構而定。</p><h2 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h2><p>針對網頁中的表單，可以使用Post來傳送Payload</p><pre><code>res = rq.post(url, params=payload)</code></pre><p>不過．．．對Google Search頁面做Post會得到這樣的回應：</p><pre><code>&lt;a href=//www.google.com/&gt;&lt;span id=logo aria-label=Google&gt;&lt;/span&gt;&lt;/a&gt;&lt;p&gt;&lt;b&gt;405.&lt;/b&gt; &lt;ins&gt;That’s an error.&lt;/ins&gt;&lt;p&gt;The request method &lt;code&gt;POST&lt;/code&gt; is inappropriate for the URL &lt;code&gt;/search?q=data+science&lt;/code&gt;.  &lt;ins&gt;That’s all we know.&lt;/ins&gt;</code></pre><p>Google說這樣是不當的行為呢，我只是做個示範，好孩子不要學呀＾.&lt;</p>]]></content>
      
      <categories>
          
          <category> Data Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web crawler </tag>
            
            <tag> data science </tag>
            
            <tag> requests </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo on GitHub Pages:從Win轉移到Mac</title>
      <link href="/hexo-switching-from-win-to-mac/"/>
      <url>/hexo-switching-from-win-to-mac/</url>
      <content type="html"><![CDATA[<h1 id="Hexo-on-GitHub-Pages-Switching-from-Windows-to-Mac"><a href="#Hexo-on-GitHub-Pages-Switching-from-Windows-to-Mac" class="headerlink" title="Hexo on GitHub Pages:Switching from Windows to Mac"></a>Hexo on GitHub Pages:Switching from Windows to Mac</h1><p>一直以來都有想換筆電的想法，但總是能撐則撐，畢竟是要噴個幾萬塊的事情呢．．．不過前陣子需要帶著筆電趴趴造，而跟著我8年的老Win筆電過於笨重，這實在令人感到非常困擾，所以就決定換掉囉。經考量後換了Mac Air．．．沒有所謂最好用的工具，只有最適合的工具，畢竟工具還是要人來使用的，關於工具的選擇就別開戰場啦（笑）<br><a id="more"></a><br>既然換了電腦換了系統，除了熟悉系統操作，再來就是開發環境的建置囉，趕緊先把Hexo的環境先建置起來才能更新Blog。</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>官方下載：<a href="https://git-scm.com" target="_blank" rel="noopener">點我</a>，若是已安裝過自帶Git環境的XCode可以跳過。</p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>官方下載：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">點我</a></p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><pre><code>sudo npm install -g hexo-clisudo npm install hexo-deployer-git --savecd {blog_name}        # build folder of bloghexo init {blog_name}hexonpm installhexo s --debug  # run local server(127.0.0.1:4000)</code></pre><p><img src="https://i.imgur.com/iftnF8e.jpg" alt="test"></p><h2 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h2><p>確定在本機可以正常運作後，接下來只要把根目錄下的_config.yml、scaffolds資料夾及source資料夾覆寫到Mac的Blog根目錄下就完成！</p><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>後記：<br>1.在發佈這篇文章後，我發現Blog分類及標籤頁面消失了．．．原來是我只把source底下的“_posts”複製到新的根目錄下，只要重新建立“categories”及”tags”兩個new page就行啦。<br>2.原本使用的NexT主題為舊版，這次乾脆就更新到v6.4.0啦，配置檔只有微幅的調整，需注意的是languages的部分，檔名中hyphen後的字改為大寫字母了，如果根目錄配置檔沒有修改，Blog預設語言就會因爲找不到對應檔案而變成英文。<br>3.所以我發現關於Hexo的筆記沒有寫到建立new page(掩面)</p><p>以上，就是我在Mac系統下所更新的第一篇學習筆記了。</p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github pages </tag>
            
            <tag> windows </tag>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django:從零開始</title>
      <link href="/start-django-project/"/>
      <url>/start-django-project/</url>
      <content type="html"><![CDATA[<h1 id="Django-Virtual-Environment-amp-New-Project"><a href="#Django-Virtual-Environment-amp-New-Project" class="headerlink" title="Django:Virtual Environment &amp; New Project"></a>Django:Virtual Environment &amp; New Project</h1><p>關於Django虛擬環境建置 &amp; 如何開始一個新專案。<br><a id="more"></a></p><h2 id="Virtual-Environment-for-Django"><a href="#Virtual-Environment-for-Django" class="headerlink" title="Virtual Environment for Django"></a>Virtual Environment for Django</h2><p>開發Django Project建議另建一個乾淨的虛擬環境，只安裝專案所需套件，Python環境建置就不贅述，從安裝及建立虛擬環境開始:</p><pre><code>pip install virtualenv  # install virtual environment packagecd c:\virtualenv DjangoEnv  # build virtual environment for Djangocd DjangoEnvScripts\activate  # start virtual environmentpip install django  # install Django packagedeactivate  # stop virtual environment</code></pre><h2 id="Start-New-Django-Project"><a href="#Start-New-Django-Project" class="headerlink" title="Start New Django Project"></a>Start New Django Project</h2><p>建立專案。</p><pre><code># start virtual environment firstdjango-admin startproject {project_name}  # build new project</code></pre><h2 id="Build-Application"><a href="#Build-Application" class="headerlink" title="Build Application"></a>Build Application</h2><p>建立應用程式。</p><pre><code># start virtual environment firstcd {project_name}python manage.py startapp {app_name}  # build applicationmd templates  # build folder for web templatesmd static  # build folder for static files(e.g. css, images...)python manage.py makemigrations {app_name(optional)}  # build data migration for databasepython manage.py migrate {app_name(optional)}  # data synchronization</code></pre><h2 id="Run-Django-Server"><a href="#Run-Django-Server" class="headerlink" title="Run Django Server"></a>Run Django Server</h2><p>啟動測試Server。</p><pre><code># start virtual environment firstcd {project_name}python manage.py runserver  # http://127.0.0.1:8000</code></pre>]]></content>
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> web framework </tag>
            
            <tag> virtual environment </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Error:檔案無法載入，因為這個系統已停用指令碼執行</title>
      <link href="/error-execution-of-scripts-is-disabled-on-this-system/"/>
      <url>/error-execution-of-scripts-is-disabled-on-this-system/</url>
      <content type="html"><![CDATA[<h1 id="Error-Execution-of-Scripts-Is-Disabled-on-This-System"><a href="#Error-Execution-of-Scripts-Is-Disabled-on-This-System" class="headerlink" title="Error: Execution of Scripts Is Disabled on This System"></a>Error: Execution of Scripts Is Disabled on This System</h1><p>問題來源 : 今日在Win10作業系統下建立Python virtual environment for Django，接著要用Scripts/activate指令啟動虛擬環境時，CLI顯示了這個令人錯愕的訊息:<br><a id="more"></a></p><p>「檔案無法載入，因為這個系統已停用指令碼執行」</p><p>代表目前作業系統的Execution Policy設定為Restricted(不允許執行)這是我在Win7作業系統下使用虛擬環境從沒遇過的狀況，而Google搜尋結果顯示有許多人在PowerShell執行Script遇到相同問題。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>以系統管理員權限執行PowerShell，執行以下指令:</p><pre><code>Set-ExecutionPolicy RemoteSigned</code></pre><p>使作業系統接受所有自訂或信任來源的Script，如此問題便解決啦。</p>]]></content>
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pyhton </tag>
            
            <tag> django </tag>
            
            <tag> powershell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VS Code快速建立Python開發環境</title>
      <link href="/set-up-python-in-vscode/"/>
      <url>/set-up-python-in-vscode/</url>
      <content type="html"><![CDATA[<h1 id="Set-Up-Python-in-Visual-Studio-Code"><a href="#Set-Up-Python-in-Visual-Studio-Code" class="headerlink" title="Set Up Python in Visual Studio Code"></a>Set Up Python in Visual Studio Code</h1><p>個人從自學Python到現在，一直都是使用工具書所推薦的IDE:PyCharm，它確實是相當優秀的整合開發環境，但過胖這一點偶爾還是會令人感到困擾…每次打開程式就是要等它大爺暖身一下(白眼)。而開始學習在GitHub Pages寫blog以來，我都是用VS Code發文，它的輕量化和豐富的擴充套件真是令人感到愉悅呢ヽ(●´∀`●)ﾉ 所以說，乾脆就在VS Code寫Python就好啦。<br><a id="more"></a></p><h2 id="Download-VS-Code"><a href="#Download-VS-Code" class="headerlink" title="Download VS Code"></a>Download VS Code</h2><p><a href="https://code.visualstudio.com/download" target="_blank" rel="noopener">點我前往官方下載</a></p><h2 id="Install-Python-Extension-for-VS-Code"><a href="#Install-Python-Extension-for-VS-Code" class="headerlink" title="Install Python Extension for VS Code"></a>Install Python Extension for VS Code</h2><p>↓點側邊工具列的’擴充功能’，然後搜尋’Python’，就會看到MS官方為Python開發的擴充套件，直接安裝即可。<br><img src="https://i.imgur.com/HD4254a.jpg" alt="HD4254a.jpg"></p><h2 id="Build-Working-Directory"><a href="#Build-Working-Directory" class="headerlink" title="Build Working Directory"></a>Build Working Directory</h2><p>建立一個工作目錄，理由後面會解釋。</p><h2 id="Run-Python-File"><a href="#Run-Python-File" class="headerlink" title="Run Python File"></a>Run Python File</h2><p>要在VS Code環境執行Python程式，你可以直接右鍵–&gt;在終端機(CLI)執行Python檔案，或者按下ctrl + `叫出CLI用’Python {file_path}’去執行也可以…但每次都這樣搞就太麻煩了嘛，所以我們來建個任務組態檔吧。<br><img src="https://i.imgur.com/hT5hAXa.jpg" alt="hT5hAXa.jpg"></p><p>重點來了，首先點選上方工作列’檔案’–&gt;’開啟資料夾’，選擇我們剛剛建立的工作目錄，若是沒有先選擇工作目錄，那麼接下來的步驟就會發生錯誤，VS Code會告訴你一句莫名其妙的話 :’這些工作只會出現在工作區資料夾中’。選擇好工作目錄後，按下ctrl + shift + P接著搜尋’task’，點選’工作:設定工作(Tasks:Configure Task)‘，然後VS Code會在工作目錄下產生一個’tasks.json’，將下方內容直接覆蓋並存檔 :</p><pre><code>&quot;version&quot;: &quot;2.0.0&quot;,    &quot;tasks&quot;: [            {                &quot;label&quot;: &quot;Run Python Code&quot;,                &quot;type&quot;: &quot;shell&quot;,                &quot;command&quot;: &quot;python&quot;,                &quot;args&quot;: [                    &quot;${file}&quot;                ],                &quot;group&quot;: {                    &quot;kind&quot;: &quot;build&quot;,                    &quot;isDefault&quot;: true                },                &quot;presentation&quot;: {                    &quot;echo&quot;: true,                    &quot;reveal&quot;: &quot;always&quot;,                    &quot;focus&quot;: true,                    &quot;panel&quot;: &quot;shared&quot;                }            }        ]</code></pre><p>↓然後就可以透過快捷鍵’ctrl + shift + B’執行Python程式囉，順帶一提，這是我寫給LineBot的Google爬蟲XD<br><img src="https://i.imgur.com/PZreIqo.jpg" alt="PZreIqo.jpg"></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> vs code </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo on GitHub Pages:發文</title>
      <link href="/first-post-on-github-pages/"/>
      <url>/first-post-on-github-pages/</url>
      <content type="html"><![CDATA[<h1 id="The-First-Post-on-Github-Pages"><a href="#The-First-Post-on-Github-Pages" class="headerlink" title="The First Post on Github Pages"></a>The First Post on Github Pages</h1><p>我來面對Hexo相關記錄一直沒有往發文的部分推進的事實了，就是這樣(Ora)<br><a id="more"></a><br>關於發文這件事，正所謂工欲善其事，必先利其器，就從選擇一個自己偏好的文字編輯器或IDE開始，個人私心推薦VSCode。</p><p>決定好工具後，首先來看看blog根目錄底下有個叫’scaffolds’的資料夾，這裡面放的是blog頁面模板。打開’post.md’會見到預先寫入的title、date等等，此為發文的模板，每次發文都是以這個檔案當為範本，當然我們也可以編輯它。例如，模板預設是沒有寫入’categories’的，那我會把它加上去，否則每次發文都沒有分類的項目可以填，還得自己打(懶~)<br><img src="https://i.imgur.com/TaK8Wzc.jpg" alt="TaK8Wzc.jpg"></p><p>在Hexo框架撰文是使用Markdown，不熟悉語法可以參考<a href="https://markdown.tw/" target="_blank" rel="noopener">官方文件</a>，很簡單的~ 然後就可以開始撰寫文章囉，相關指令如下:</p><h2 id="Start-New-Post"><a href="#Start-New-Post" class="headerlink" title="Start New Post"></a>Start New Post</h2><pre><code>cd bloghexo new post post-title  # &apos;post-title&apos;請置換為自己的文章標題</code></pre><h2 id="Publish-New-Post"><a href="#Publish-New-Post" class="headerlink" title="Publish New Post"></a>Publish New Post</h2><pre><code>hexo d -g  # generate --&gt; deploy</code></pre><p>關於發文有兩件小事分享 :</p><p>1.categories是唯一、有序的，tags則沒有區分(關鍵字的概念)，意思是如果你的文章設定了A、B兩個類別，那麼這篇文章的分類就會變成’類別A底下的類別B’。<br>2.在new post指令輸入文章標題時，因為標題也是.md的檔名，所以一開始我用underline做區隔(a_b_c)，但我發現Hexo會自動把underline轉成hyphen(a-b-c，順帶一提這條短線叫hyphen…dash是破折號! )，所以就配合它啦，反正title可以建立文章後再修改為中文，檔名還是英文命名比較不會有什麼光怪陸離的事情發生(怕.jpg)</p><p>以上，優化的部分會努力推進的。</p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Hexo </tag>
            
            <tag> github pages </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>關於Python的變數範圍</title>
      <link href="/scope-of-python-variables/"/>
      <url>/scope-of-python-variables/</url>
      <content type="html"><![CDATA[<h1 id="Global-and-Local-Scope-of-Python-Variables"><a href="#Global-and-Local-Scope-of-Python-Variables" class="headerlink" title="Global and Local Scope of Python Variables"></a>Global and Local Scope of Python Variables</h1><p>在Python的世界裡，變數是不需要先宣告就能直接賦値並使用的，而 <strong>變數的作用範圍會在賦値的時候建立</strong> ，除非你指定了global或nonlocal關鍵字。<br><a id="more"></a><br>先看看<a href="https://docs.python.org/3/faq/programming.html#id9" target="_blank" rel="noopener">官方文件</a>怎麼說:</p><blockquote><p>In Python, variables that are only referenced inside a function are implicitly global. If a variable is <strong>assigned a value</strong> anywhere within the function’s body, it’s assumed to be a local unless explicitly declared as global.</p></blockquote><blockquote><p>Though a bit surprising at first, a moment’s consideration explains this. On one hand, requiring global for assigned variables provides a bar against unintended side-effects. On the other hand, if global was required for all global references, you’d be using global all the time. You’d have to declare as global every reference to a built-in function or to a component of an imported module. This clutter would defeat the usefulness of the global declaration for identifying side-effects.</p></blockquote><p>簡而言之，在函式區塊內部賦値的變數即為區域變數(除非指定global或nonlocal)，於函式區塊之外賦値的便是全域變數。</p><p>直接敲幾段code來看會更清楚 :</p><pre><code>#!/usr/bin/evn python3# *** coding : utf-8 ***a, b = 1, 2  # Global Variabledef func_a():    global a  # Global Variable    print(a, &quot;# Global Variable a&quot;)    a = 2def func_b():    b = 3  # Local Variable in func_a()    def func_c():        nonlocal b  # Local Variable in func_a()        b = 4        print(b, &quot;# Local Variable b&quot;)    print(b, &quot;# Local Variable b&quot;)    func_c()func_a()func_b()print(b, &quot;# Global Variable b&quot;)</code></pre><p><strong>輸出結果:</strong></p><pre><code>1 # Global Variable a3 # Local Variable b4 # Local Variable b2 # Global Variable b</code></pre>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> variable </tag>
            
            <tag> nonlocal </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在Heroku環境下使用自訂字型</title>
      <link href="/use-custom-fonts-in-heroku-apps/"/>
      <url>/use-custom-fonts-in-heroku-apps/</url>
      <content type="html"><![CDATA[<h1 id="How-to-Use-Custom-Fonts-in-Heroku-Apps"><a href="#How-to-Use-Custom-Fonts-in-Heroku-Apps" class="headerlink" title="How to Use Custom Fonts in Heroku Apps?"></a>How to Use Custom Fonts in Heroku Apps?</h1><p>事情是這樣子的，持續努力讓Bot能查教師課表的某一天，在經歷了數據蒐集、數據處理、介接imgur api…等等，終於讓Bot傳來了一張圖片啦~但仔細一看似乎不太對勁(!)<br><a id="more"></a><br><img src="https://i.imgur.com/4ecyC4N.jpg" alt="4ecyC4N.jpg"></p><p>我X，踩雷了，竟然出現中文亂碼的狀況，這課表鬼才看得懂(鬼:口口口口口這鬼也看不懂好嘛)於是又開始try&amp;error loop…甚至讓Bot去下CLI指令刪除搬移檔案…繞了好一大圈，終於讓我找到答案了!!!令人難過的是，這方法非常簡單…雖然這是常有的事，可就是白耗了好多時間。但沒關係，讓碰見相同問題的人能快速找到解決方案，這就是學習筆記的意義所在。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>1.準備好你要的字型，要<font color="red">特別注意<font color="black">的是，該字型必須是Linux/Ubuntu所支援的字型。<font><font><br>2.在專案根目錄下新增一個名稱為「.fonts」的資料夾(tips:在命名時輸入.fonts.)<br>3.把字型檔案(.ttf)放到上述資料夾中<br>4.重新push專案</font></font></font></font></p><p><img src="https://i.imgur.com/uxdEvJZ.png" alt="uxdEvJZ.png"></p><p>關於中文亂碼，似乎是matplotlib無法在Heroku環境下找到可套用的中文字型，但我在本機測試是沒問題的…所以要自己提供字型就是了，真是踩了個莫名其妙的雷，總之中文亂碼問題就這麼解決了。</p>]]></content>
      
      <categories>
          
          <category> LineBot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> line </tag>
            
            <tag> bot </tag>
            
            <tag> heroku </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>翻缸Day21:藍綠藻來襲</title>
      <link href="/restart-planted-tank-day21/"/>
      <url>/restart-planted-tank-day21/</url>
      <content type="html"><![CDATA[<h1 id="How-to-Kill-Cyanobacteria-in-The-Planted-Tank"><a href="#How-to-Kill-Cyanobacteria-in-The-Planted-Tank" class="headerlink" title="How to Kill Cyanobacteria in The Planted Tank?"></a>How to Kill Cyanobacteria in The Planted Tank?</h1><p>開始新工作，下了班想發文卻提不起勁…呵。但還是利用假日來紀錄一下魚缸的近況吧，也希望還有力氣可以寫篇學習筆記什麼的。<br><a id="more"></a><br>↓上週三出門辦事發現水族店在隔壁，就進去逛了<br><img src="https://i.imgur.com/8QSsMfb.jpg" alt="8QSsMfb.jpg"><br>↓於是加入新成員<br><img src="https://i.imgur.com/himpyCZ.jpg" alt="himpyCZ.jpg"><br>↓綠宮廷轉水中葉，全數拔起整理再植草<br><img src="https://i.imgur.com/k5Jxf0j.jpg" alt="k5Jxf0j.jpg"><br>↓角螺開心地啃藻…這缸子該刷了<br><img src="https://i.imgur.com/lSF2Z0A.jpg" alt="lSF2Z0A.jpg"><br>↓僱來一批除藻小幫手<br><img src="https://i.imgur.com/pkNizEv.jpg" alt="pkNizEv.jpg"></p><p>然後呢，最近幾天發現藍綠藻持續蔓延，底砂、牛毛氈甚至入水口生化棉也染上了噁心的藍綠色…即使拔起來用檸檬酸浸泡清洗試圖阻止，依然無效。經過爬文吸收資訊，也確定不會對魚蝦造成傷害，決定直接使用紅黴素來處理。雖然不會對魚蝦造成影響，但對於硝化菌們來說可就不妙了，所以投藥前必須將濾材另行安置才行。</p><p>↓到處生長的藍綠藻<br><img src="https://i.imgur.com/cEm4u6i.jpg" alt="cEm4u6i.jpg"><br>↓移出圓桶中的濾材並加強打氣維持好氧的硝化菌<br><img src="https://i.imgur.com/umj5hh7.jpg" alt="umj5hh7.jpg"><br>↓然後紅黴素便可以登場了!(決鬥吧藍綠藻!抽牌!)<br><img src="https://i.imgur.com/X3OmePn.jpg" alt="X3OmePn.jpg"></p><h2 id="※關於投藥劑量"><a href="#※關於投藥劑量" class="headerlink" title="※關於投藥劑量"></a>※關於投藥劑量</h2><p>根據<a href="https://www.paludarium.net/aquarium/48" target="_blank" rel="noopener">P大</a>所說的2.5ppm來計算，我的魚缸水量約23L:23000000 * 0.00025% = 57.5(mg)，一顆紅黴素膠囊為250mg，所以我只需要1/5顆左右的劑量、持續投藥四日。</p><h2 id="2018-7-23-連續投藥Day3"><a href="#2018-7-23-連續投藥Day3" class="headerlink" title="2018/7/23 連續投藥Day3"></a>2018/7/23 連續投藥Day3</h2><p>除了每日換水1/2，光源也調整為上午與傍晚開啟、不連續合計8小時(有一說如此中斷能干擾藻類生長)，目前觀察到藍綠藻已停止蔓延，清洗後的入水口綿也沒有藍綠藻生長。</p><h2 id="2018-7-25-連續投藥Day5"><a href="#2018-7-25-連續投藥Day5" class="headerlink" title="2018/7/25 連續投藥Day5"></a>2018/7/25 連續投藥Day5</h2><p>↓藍綠藻明顯消失，但我決定今日不換水，讓藥物的效用多殘留一天，確保能控制住…別再來啦，真的是挺麻煩的。<br><img src="https://i.imgur.com/wtmQzkE.jpg" alt="wtmQzkE.jpg"></p>]]></content>
      
      <categories>
          
          <category> Aquarium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aquarium </tag>
            
            <tag> planted tank </tag>
            
            <tag> 水族 </tag>
            
            <tag> algae control </tag>
            
            <tag> cyanobacteria </tag>
            
            <tag> Erythrocin </tag>
            
            <tag> 草缸 </tag>
            
            <tag> 除藻 </tag>
            
            <tag> 藍綠藻 </tag>
            
            <tag> 紅黴素 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>先別管如何發文了，你聽過NexT嗎?</title>
      <link href="/before-new-post-root-config-and-theme-config/"/>
      <url>/before-new-post-root-config-and-theme-config/</url>
      <content type="html"><![CDATA[<h1 id="Before-First-Post-About-Root-Config-amp-Theme-Config"><a href="#Before-First-Post-About-Root-Config-amp-Theme-Config" class="headerlink" title="Before First Post:About Root Config &amp; Theme Config"></a>Before First Post:About Root Config &amp; Theme Config</h1><p>部署完我們的Blog呢，別急著發文，看一眼別人的，再看看自己的頁面，應該有明白些什麼吧(笑)，先進行初步的個人化設定、讓它看起來更像一個Personal Blog吧~那麼，就先從選擇一個喜歡的佈景主題開始。<br><a id="more"></a><br>Hexo如此熱門的框架，有許多的<a href="https://hexo.io/themes/" target="_blank" rel="noopener">第三方主題</a>能套用，或者想<a href="https://hexo.io/zh-tw/docs/themes.html" target="_blank" rel="noopener">打造一個自己的主題</a>也行，而我選擇了相當受歡迎的經典主題──NexT。</p><h1 id="安裝NexT主題"><a href="#安裝NexT主題" class="headerlink" title="安裝NexT主題"></a>安裝NexT主題</h1><pre><code>cd blog    # 移動至Blog根目錄下 git clone https://github.com/theme-next/hexo-theme-next themes/next</code></pre><h2 id="設定主題"><a href="#設定主題" class="headerlink" title="設定主題"></a>設定主題</h2><p>打開blog根目錄下的Hexo root配置檔(_config.yml)，找到#Extensions區塊，將theme屬性設定為next</p><pre><code># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next</code></pre><h2 id="Local-Host測試"><a href="#Local-Host測試" class="headerlink" title="Local Host測試"></a>Local Host測試</h2><pre><code>hexo clean        # 清除hexo cachehexo s --debug    # 以debug模式啟動local host server</code></pre><p>如果CLI沒有輸出錯誤訊息，那麼你應該會在CLI見到以下這段文字:</p><pre><code>INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code></pre><p>接著打開瀏覽器輸入localhost:4000便能在本機查看、測試自己的Blog囉。</p><h1 id="配置檔-config-yml"><a href="#配置檔-config-yml" class="headerlink" title="配置檔(_config.yml)"></a>配置檔(_config.yml)</h1><p><strong>更多詳細的Config設定請參考官方文件，在此僅就個人所設定的部分作介紹。</strong></p><p>*官方文件(中文):<br>  1.<a href="https://hexo.io/zh-tw/docs/" target="_blank" rel="noopener">Hexo docs</a><br>  2.<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT docs</a></p><h2 id="Root-Config"><a href="#Root-Config" class="headerlink" title="Root Config"></a>Root Config</h2><p>檔案位址:~/_config.yml</p><pre><code># Sitetitle: LaplaceTW&apos;s Blog         # 網站標題subtitle: learning-by-doing     # 網站副標題description: learning-by-doing  # 網站描述keywords:author: LaplaceTW               # 個人暱稱language: zh-tw                 # 頁面語言timezone:# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: https://username.github.io/  # 網站首頁網址root: /permalink: :title/                # 文章永久連結，基於優化考量不建議使用預設值(:year/:month/:day/:title/)permalink_defaults:# Home page setting# path: Root path for your blogs index page. (default = &apos;&apos;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator:path: &apos;&apos;per_page: 5      # 每頁顯示文章數(預設值為10)order_by: -date</code></pre><p>↓Root Config沒什麼複雜的屬性設定，不過在#site設定部分，我以為設定為subtitle的文字會顯示在author下方(紅框處)…結果顯示的文字是description，所以我說內個subtitle呢???<br><img src="https://i.imgur.com/3YLGWXs.jpg" alt="3YLGWXs.jpg"></p><h2 id="Theme-Config"><a href="#Theme-Config" class="headerlink" title="Theme Config"></a>Theme Config</h2><p>檔案位址:~/themes/next/_config.yml</p><h3 id="favicon"><a href="#favicon" class="headerlink" title="favicon"></a>favicon</h3><p>首先就來改網站的分頁icon吧，我覺得這對Blog個人化而言挺重要的呢XD 個人只有更改前三個icon，尺寸調整好後，修改為同樣的檔名直接取代掉就行(懶)，然後就可以在瀏覽器的分頁頁籤看到自己的icon囉~<br>圖片位址:~/themes/next/source/images</p><pre><code>favicon:small: /images/favicon-16x16-next.pngmedium: /images/favicon-32x32-next.pngapple_touch_icon: /images/apple-touch-icon-next.pngsafari_pinned_tab: /images/logo.svg#android_manifest: /images/manifest.json#ms_browserconfig: /images/browserconfig.xml</code></pre><h3 id="subtitle"><a href="#subtitle" class="headerlink" title="subtitle"></a>subtitle</h3><p>index_with_subtitle改為true依然不見subtitle顯示於何處。</p><pre><code># If true, will add site-subtitle to index page, added in main hexo config.#subtitle: Subtitleindex_with_subtitle: false</code></pre><h3 id="scheme"><a href="#scheme" class="headerlink" title="scheme"></a>scheme</h3><p>NexT主題目前有四種<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">外觀模式</a>可以選擇~將喜歡的模式取消註解即可。</p><pre><code># ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes#scheme: Musescheme: Mist#scheme: Pisces#scheme: Gemini</code></pre><h3 id="sidebar"><a href="#sidebar" class="headerlink" title="sidebar"></a>sidebar</h3><p>側邊欄依設定的Scheme不同，有許多屬性可以設定。</p><pre><code># ---------------------------------------------------------------# Sidebar Settings# ---------------------------------------------------------------social:                                              # 顯示社交訊息(||後為social icon設定)GitHub: https://github.com/laplacetw || github       # icon參考網址 https://fontawesome.com/cheatsheet?from=ioE-Mail: mailto:nicholas611469@gmail.com || envelope# Sidebar Avatar                                     # 顯示作者頭像# in theme directory(source/images): /images/avatar.gif# in site  directory(source/uploads): /uploads/avatar.gifavatar: /images/avatar.png# Creative Commons 4.0 International License.        # 顯示創用CC授權模式# http://creativecommons.org/# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zerocreative_commons: by#creative_commons:</code></pre><h3 id="creative-commons"><a href="#creative-commons" class="headerlink" title="creative commons"></a>creative commons</h3><p>文章內標註<a href="https://zh.wikipedia.org/wiki/創作共用授權條款" target="_blank" rel="noopener">創用CC授權條款</a></p><pre><code># Declare license on postspost_copyright:enable: truelicense: CC BY 4.0license_url: https://creativecommons.org/licenses/by/4.0/</code></pre><h3 id="third-party-services"><a href="#third-party-services" class="headerlink" title="third party services"></a>third party services</h3><p>關於NexT所支援之第三方服務請參考<a href="http://theme-next.iissnan.com/third-party-services.html" target="_blank" rel="noopener">官方文件說明</a></p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Theme </tag>
            
            <tag> NexT </tag>
            
            <tag> Optimization </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>翻缸Day8:除藻生物</title>
      <link href="/restart-planted-tank-day8/"/>
      <url>/restart-planted-tank-day8/</url>
      <content type="html"><![CDATA[<h1 id="Algae-Eaters-for-Planted-Tank"><a href="#Algae-Eaters-for-Planted-Tank" class="headerlink" title="Algae Eaters for Planted Tank"></a>Algae Eaters for Planted Tank</h1><p>目前光照時間已拉長至8小時，光源為Johnlen LED 1.5呎19W水草自然混光燈、色溫4000k&amp;7000k的燈珠各3顆，CO2則是24小時不間斷，唯夜間會降低出氣量。重新翻缸後，底床僅有舊矽砂無鋪設基肥，依植草位置適量埋入ISTA水草根肥，因此在每週換水1/2後會酌量添加TBS綠色&amp;紅色水草液肥。雖然目前並無藻類大量滋生的跡象，但除藻生物可是水草缸不可或缺的小幫手呢。<br><a id="more"></a></p><p>因為前景的牛毛氈仍是以相當緩慢的生長速度在蔓延中，大概還要兩三週我才敢放入黑殼蝦…以免維護中的草皮被連根拔起!而說到除藻生物，我偏好可愛的小精靈~但水族店老闆表示折損率太高沒有再引進T.T 看來小精靈真的不好飼養，個人經驗…撐不過半年就上天堂了，我也是搞不懂問題出在哪。唉，只好退而求其次以小猴飛狐代替，以及好飼養又很勤奮工作的角螺~</p><p>↓換了新環境的小猴飛狐目前看來有點膽小<br><img src="https://i.imgur.com/rmBmzwM.jpg" alt="restart_day8_01"></p><p>↓小而圓的綠宮廷水上葉逐漸轉化為細長的水中葉了<br><img src="https://i.imgur.com/9C9KqUd.jpg" alt="restart_day8_02"></p><p>今早一看，小猴飛狐已經跟黑燈們開始混熟了…再觀察觀察吧，因為北辰大有提過<a href="http://northernstar-aquarium.blogspot.com/2011/09/blog-post.html" target="_blank" rel="noopener">小猴飛狐的危險性</a>，希望這傢伙安份點。</p>]]></content>
      
      <categories>
          
          <category> Aquarium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aquarium </tag>
            
            <tag> planted tank </tag>
            
            <tag> 水族 </tag>
            
            <tag> algae control </tag>
            
            <tag> 草缸 </tag>
            
            <tag> algae eaters </tag>
            
            <tag> 除藻生物 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>只要6塊錢~第一次自拍證件照就上手</title>
      <link href="/take-a-headshot-yourself/"/>
      <url>/take-a-headshot-yourself/</url>
      <content type="html"><![CDATA[<h1 id="How-to-Take-a-Headshot-Yourself-at-Home"><a href="#How-to-Take-a-Headshot-Yourself-at-Home" class="headerlink" title="How to Take a Headshot Yourself at Home?"></a>How to Take a Headshot Yourself at Home?</h1><p>說到 <strong>大頭照</strong> 這個東西，其實使用到的機會不多，但要用的時候總是被要求繳交 <strong>6個月內</strong>的證件照…照相館動輒兩三百塊，拍出來的大頭照多麼不堪我就不說了，大家應該都很有經驗(菸)。雖說市面上已有證件快照的機器，但也不是說很普及，收費大約是$150，於是我想起有看過在家自拍大頭照的教學，就決定來試試了，也讓我的700D在平淡無奇的日常生活中能有登場的機會。<br><a id="more"></a></p><p>首先呢，找面明亮、乾淨的牆當背景，然後想辦法架好你的相機，手邊有腳架的話當然是最方便啦…如果相機螢幕能翻轉那就更好囉 : )<br><img src="https://i.imgur.com/IYuC7Q9.jpg" alt="headshot_01"></p><p>接下來就是設定倒數連拍，我覺得10秒比較夠用XD 證件照的規定可以參考<a href="https://www.boca.gov.tw/cp-16-4123-c2932-1.html" target="_blank" rel="noopener">外交部領事局</a>的說明，我就不贅述，總之，拍出理想的照片後就是去背、裁剪。若是不會使用專業的修圖軟體，可以參考<a href="http://gigikaren1104.pixnet.net/blog/post/383578103" target="_blank" rel="noopener">這篇</a>用PPT處理大頭照的教學，還能調膚色呢XD</p><p>說到裁剪照片呢，這個<strong>2吋</strong>到底是多大呢?拜了Google大神後得到很多答案…眾說紛紜!我個人認為看起來最順眼、最2吋的是像素寬高比為433x581 pixel、實際寬高比為3.5x5.08的大小，提供參考。</p><p>裁剪完成後，在修圖軟體上開一張4x6的畫布…小畫家也是可以，那麼4x6是多大呢?(尺寸什麼的好煩)像素寬高比為1795x1205 pixel，然後把大頭照貼滿整個畫布吧!(說貼滿其實也不過8張啦XD)<br><img src="https://i.imgur.com/7WE4wAb.jpg" alt="headshot_02"></p><p>上述準備就緒，<a href="http://www.likoda.com.tw/info/store/" target="_blank" rel="noopener">尋找</a>你附近的 <strong>立可得</strong> 吧~ 許多便利商店及大賣場都有設置喔，可以透過APP將照片傳輸至機器來列印照片，非常方便。<br><img src="https://i.imgur.com/3Dg9R1U.jpg" alt="headshot_03"><br><img src="https://i.imgur.com/gZpfIw5.jpg" alt="headshot_04"></p><p>我是在便利商店的立可得列印的，傳輸照片、設定列印選項後，機器會列印繳費單，4x6一張6元，拿著它去櫃檯繳費後就可以回到機器前面取照片囉。<br><img src="https://i.imgur.com/a246LAA.jpg" alt="headshot_05"><br><img src="https://i.imgur.com/kHUHVTO.jpg" alt="headshot_06"></p><p>第一次自拍證件照就上手，成功~</p>]]></content>
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> headshot </tag>
            
            <tag> 大頭照 </tag>
            
            <tag> 證件照 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>部署失敗:Failed to Execute Prompt Script</title>
      <link href="/error-failed-to-execute-prompt-script/"/>
      <url>/error-failed-to-execute-prompt-script/</url>
      <content type="html"><![CDATA[<h1 id="Error-failed-to-execute-prompt-script"><a href="#Error-failed-to-execute-prompt-script" class="headerlink" title="Error: failed to execute prompt script"></a>Error: failed to execute prompt script</h1><p>事實上呢，在我建好了Blog、龜毛地設定了root配置檔，抱持著既期待又怕受傷害的心情在CLI敲下部署指令後，CLI顯示error: failed to execute prompt script (exit code 1)…嗯，居然部署失敗!!! 我X，都還沒發文呢。趕緊雙手合十虔誠地向Google大神拜呀拜，經過幾次Try&amp;Error，很快地找到解決方案了~(灑花)<br><a id="more"></a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>找到blog資料夾中的root配置檔_config.yml，修改文件中的部署設定。</p><p>原始設定:</p><pre><code>deploy:  type: git  repository: https://github.com/username/username.github.io.git  branch: master</code></pre><p>修改為:</p><pre><code>deploy:  type: git  repository: https://username:userpassword@github.com/username/username.github.io.git  branch: master</code></pre><p>部署成功 : )</p><p>*<a href="https://www.zhihu.com/question/38219432" target="_blank" rel="noopener">參考來源</a></p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Hexo </tag>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo on GitHub Pages:從零開始</title>
      <link href="/build-blog-with-hexo-on-github-pages/"/>
      <url>/build-blog-with-hexo-on-github-pages/</url>
      <content type="html"><![CDATA[<h1 id="Build-Blog-with-Hexo-on-GitHub-Pages"><a href="#Build-Blog-with-Hexo-on-GitHub-Pages" class="headerlink" title="Build Blog with Hexo on GitHub Pages"></a>Build Blog with Hexo on GitHub Pages</h1><p>coding也摳了幾年，遇到Bug總是靠著拜Google大神，就這麼一路走來，看過無數高手們手把手的教學文，心裡想著自己哪天也來寫寫學習筆記，紀錄自己的學習歷程以及遇到的問題(以及至今仍在摸索中的水草缸…)，也許在某個夜深人靜的時刻，能幫助到和我一樣經常廢寢忘食、苦苦追尋Bug解決方案的某個誰。於是這個Blog就這麼建起來了，學習筆記就決定從自己搭建Personal Blog的過程開始紀錄吧。<br><a id="more"></a></p><h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><h3 id="安裝Node-js"><a href="#安裝Node-js" class="headerlink" title="安裝Node.js"></a>安裝Node.js</h3><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">官網載點</a></p><p>接著執行作業系統的CLI(command-line interface)輸入以下安裝指令</p><h3 id="安裝Hexo"><a href="#安裝Hexo" class="headerlink" title="安裝Hexo"></a>安裝Hexo</h3><pre><code>npm install hexo-cli -ghexo version            # 若安裝成功可查看Hexo版本</code></pre><h3 id="安裝Hexo-Git"><a href="#安裝Hexo-Git" class="headerlink" title="安裝Hexo Git"></a>安裝Hexo Git</h3><pre><code>npm install hexo-deployer-git --save</code></pre><h3 id="註冊GitHub帳號"><a href="#註冊GitHub帳號" class="headerlink" title="註冊GitHub帳號"></a>註冊GitHub帳號</h3><p><a href="https://github.com" target="_blank" rel="noopener">官網</a></p><p><font color="red">特別注意 :<font color="black">為避免某些文件配置錯誤的發生，使用者名稱(username)請務必設定為小寫，使用者名稱也將成為Personal Blog網址的主要部分<font><font></font></font></font></font></p><h3 id="新增GitHub專案"><a href="#新增GitHub專案" class="headerlink" title="新增GitHub專案"></a>新增GitHub專案</h3><p>↓按下New repository<br><img src="https://i.imgur.com/hoQ0WZP.jpg" alt="New repository"><br>↓輸入專案名稱username.github.io，username請改寫為自己的使用者名稱，接著按下Create repository，前置作業到此告一段落!<br><img src="https://i.imgur.com/wHAh9q5.jpg" alt="repo name"></p><h2 id="開始建置"><a href="#開始建置" class="headerlink" title="開始建置"></a>開始建置</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>回到CLI輸入以下指令開始建立Blog</p><pre><code>hexo init blog    # 初始化cd blog           # 移動至上一步所建立的blog資料夾npm install       # 安裝blog相關套件</code></pre><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>至blog資料夾底下找到Hexo root配置檔，文件名稱為_config.yml，打開文件找到部署設定區塊填入相關資訊</p><p><font color="red">特別注意 :<font color="black">每個項目的冒號後面一定要空格，username一樣改寫為自己的使用者名稱<font><font></font></font></font></font></p><pre><code>deploy:  type: git  repository: https://github.com/username/username.github.io.git  branch: master</code></pre><p>接著就可以將Blog部署到GitHub : )</p><pre><code>hexo d -g    # generate --&gt; deploy</code></pre><p>部署成功後在瀏覽器輸入網址 <a href="https://username.github.io/" target="_blank" rel="noopener">https://username.github.io/</a> 就可以看到我們的blog囉。</p><p><a href="https://hexo.io/zh-tw/" target="_blank" rel="noopener">*Hexo官網</a></p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.5呎翻缸重整</title>
      <link href="/restart-my-1.5ft-planted-tank/"/>
      <url>/restart-my-1.5ft-planted-tank/</url>
      <content type="html"><![CDATA[<h1 id="Restart-My-1-5ft-Planted-Tank"><a href="#Restart-My-1-5ft-Planted-Tank" class="headerlink" title="Restart My 1.5ft Planted Tank"></a>Restart My 1.5ft Planted Tank</h1><h2 id="放置play很久很久的魚缸"><a href="#放置play很久很久的魚缸" class="headerlink" title="放置play很久很久的魚缸"></a>放置play很久很久的魚缸</h2><p>本來是想撤掉了，因為需要定期維護清洗設備…但又覺得可惜。後來又想改設置好整理的一呎缸，不過又考慮到水體小、水質相對難維持穩定的問題。經過一番掙扎，還是決定翻缸重新設景(天啊，水草缸都成了 <strong>水藻缸</strong>，這工程之浩大用想的就覺得累了…)。<br>因為，我還是想要一個很療癒的水草缸啊。<br><a id="more"></a><br>↓魚缸刷洗完成<br><img src="https://i.imgur.com/riEPpd9.jpg" alt="刷洗後的魚缸"><br>↓重新設景、植草<br><img src="https://i.imgur.com/le3gi6j.jpg" alt="植草設景完成"></p><h2 id="設備更換"><a href="#設備更換" class="headerlink" title="設備更換"></a>設備更換</h2><p>  1.不鏽鋼出入水口(玻璃美觀但…易髒難洗)<br>  2.外置CO2霧化器(放在缸內各種藻類實在困擾)<br>  3.致冷晶片冷水機(嗯，為了讓水草度過夏天，但經費有限…)</p><p>↓外置CO2霧化器<br><img src="https://i.imgur.com/Dd3j2RI.jpg" alt="外置CO2霧化器"><br>↓本次升級的重磅武器(?)─致冷晶片冷水機<br><img src="https://i.imgur.com/F4EQYpT.jpg" alt="致冷晶片冷水機"></p><p>↓重新設缸Day3，僅保留一株的溫蒂椒草已經開始冒出新葉了…生長速度如此之快，我用了個養樂多瓶底當草盆再植入底床，希望能限制它的植株大小，當個稱職的中景草。<br><img src="https://i.imgur.com/lmTVpf9.jpg" alt="溫蒂椒草"></p><p>期盼能順利成景，尤其是前景的草皮。<br>※這是我的GitHub Pages首PO!! (灑花)</p>]]></content>
      
      <categories>
          
          <category> Aquarium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aquarium </tag>
            
            <tag> planted tank </tag>
            
            <tag> water grass </tag>
            
            <tag> fishkeeping </tag>
            
            <tag> 水族 </tag>
            
            <tag> 水草缸 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
