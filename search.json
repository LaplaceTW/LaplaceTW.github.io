[{"title":"樹莓派：紅外線熱像儀","url":"/rspi-thermal-cam-amg8833/","content":"<p>看到火車站架設熱像儀監控旅客們的體溫，出於好奇也想做一個看看🤣<br><a id=\"more\"></a></p>\n<h3 id=\"AMG8833-Intro\"><a href=\"#AMG8833-Intro\" class=\"headerlink\" title=\"AMG8833 Intro\"></a>AMG8833 Intro</h3><p><img src=\"https://i.imgur.com/JATdb1S.jpg\" alt><br>於是我買來了Adafruit AMG8833模組，這模組上頭裝著Panasonic所生產的紅外線陣列感測器唷。<br>Datasheet：<a href=\"https://b2b-api.panasonic.eu/file_stream/pids/fileversion/1819\" target=\"_blank\" rel=\"noopener\">Panasonic IR Array Sensor Grid-EYE</a></p>\n<p><img src=\"https://i.imgur.com/gQseBWz.jpg\" alt><br><img src=\"https://i.imgur.com/DBrxsGu.jpg\" alt></p>\n<p>參考<a href=\"https://www.adafruit.com/product/3538\" target=\"_blank\" rel=\"noopener\">Adafruit官網</a>的技術參數說明：</p>\n<ol>\n<li>感測器為8x8紅外線陣列</li>\n<li>溫度感測區間為攝氏0度～攝氏80度(精度為正負2.5度)</li>\n<li>人體最大感測距離為7米</li>\n<li>透過<a href=\"https://zh.wikipedia.org/wiki/I%C2%B2C\" target=\"_blank\" rel=\"noopener\">I2C協定</a>進行數據傳輸</li>\n</ol>\n<h3 id=\"Setting-amp-Installing\"><a href=\"#Setting-amp-Installing\" class=\"headerlink\" title=\"Setting &amp; Installing\"></a>Setting &amp; Installing</h3><p>接下來將於運行Raspbian作業系統的樹莓派上進行環境設置，我習慣<a href=\"https://laplacetw.github.io/rspi-meet-raspberry-pi-b3-plus/#Remote\">使用VNC Server與樹莓派進行遠端連線操作</a>。</p>\n<h4 id=\"系統更新\"><a href=\"#系統更新\" class=\"headerlink\" title=\"系統更新\"></a>系統更新</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo apt-get update</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo apt-get upgrade</span><br></pre></td></tr></table></figure>\n<h4 id=\"啟用I2C-amp-SPI介面\"><a href=\"#啟用I2C-amp-SPI介面\" class=\"headerlink\" title=\"啟用I2C &amp; SPI介面\"></a>啟用I2C &amp; SPI介面</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo raspi-config</span><br></pre></td></tr></table></figure>\n<p>在選項5的介面設定中啟用它們，然後測試是否成功啟用<br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> ls /dev/i2c* /dev/spi*</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Packge-Installing\"><a href=\"#Packge-Installing\" class=\"headerlink\" title=\"Packge Installing\"></a>Packge Installing</h4><p>直接安裝Adafruit的AMG88XX Package，pip會處理其他依賴的函式庫(e.g. Adafruit-Blinka)。<br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo pip3 install adafruit-circuitpython-amg88xx</span><br></pre></td></tr></table></figure><br><img src=\"https://i.imgur.com/sANUgo1.png\" alt></p>\n<h4 id=\"Blinka-Test\"><a href=\"#Blinka-Test\" class=\"headerlink\" title=\"Blinka Test\"></a>Blinka Test</h4><p>使用Adafruit的測試範例來確認環境設定是否完成。<br><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> board</span><br><span class=\"line\"><span class=\"keyword\">import</span> digitalio</span><br><span class=\"line\"><span class=\"keyword\">import</span> busio</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"Hello blinka!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Try to great a Digital input</span></span><br><span class=\"line\">pin = digitalio.DigitalInOut(board.D4)</span><br><span class=\"line\">print(<span class=\"string\">\"Digital IO ok!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Try to create an I2C device</span></span><br><span class=\"line\">i2c = busio.I2C(board.SCL, board.SDA)</span><br><span class=\"line\">print(<span class=\"string\">\"I2C ok!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Try to create an SPI device</span></span><br><span class=\"line\">spi = busio.SPI(board.SCLK, board.MOSI, board.MISO)</span><br><span class=\"line\">print(<span class=\"string\">\"SPI ok!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"done!\"</span>)</span><br></pre></td></tr></table></figure><br><img src=\"https://i.imgur.com/msoQDyb.png\" alt></p>\n<h4 id=\"I2C-Test\"><a href=\"#I2C-Test\" class=\"headerlink\" title=\"I2C Test\"></a>I2C Test</h4><p>試著透過I2C讀取感測器數據並印出來<br><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> busio</span><br><span class=\"line\"><span class=\"keyword\">import</span> board</span><br><span class=\"line\"><span class=\"keyword\">import</span> adafruit_amg88xx</span><br><span class=\"line\"></span><br><span class=\"line\">i2c = busio.I2C(board.SCL, board.SDA)</span><br><span class=\"line\">amg = adafruit_amg88xx.AMG88XX(i2c)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> amg.pixels:</span><br><span class=\"line\">        <span class=\"comment\"># Pad to 1 decimal place</span></span><br><span class=\"line\">        print([<span class=\"string\">\"&#123;0:.1f&#125;\"</span>.format(temp) <span class=\"keyword\">for</span> temp <span class=\"keyword\">in</span> row])</span><br><span class=\"line\">        print(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure><br><img src=\"https://i.imgur.com/DK85IXe.png\" alt></p>\n<h4 id=\"Package-Installing\"><a href=\"#Package-Installing\" class=\"headerlink\" title=\"Package Installing\"></a>Package Installing</h4><p>安裝將數據進行可視化所需的函式庫<br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo apt-get install -y python3-scipy python3-pygame</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo pip3 install colour</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Build-Thermal-Camera\"><a href=\"#Build-Thermal-Camera\" class=\"headerlink\" title=\"Build Thermal Camera\"></a>Build Thermal Camera</h3><p>依照<a href=\"https://pinout.xyz/\" target=\"_blank\" rel=\"noopener\">樹莓派GPIO</a>與AMG8833進行連接：</p>\n<ol>\n<li>3V Power連接到Vin</li>\n<li>\b\bGND連接到GND</li>\n<li>連接SDA &amp; SCL<br><img src=\"https://i.imgur.com/ilmXszn.jpg\" alt></li>\n</ol>\n<p>Adafruit官方範例程式：<br><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"This example is for Raspberry Pi (Linux) only!</span></span><br><span class=\"line\"><span class=\"string\">   It will not work on microcontrollers running CircuitPython!\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> busio</span><br><span class=\"line\"><span class=\"keyword\">import</span> board</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pygame</span><br><span class=\"line\"><span class=\"keyword\">from</span> scipy.interpolate <span class=\"keyword\">import</span> griddata</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> colour <span class=\"keyword\">import</span> Color</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> adafruit_amg88xx</span><br><span class=\"line\"></span><br><span class=\"line\">i2c_bus = busio.I2C(board.SCL, board.SDA)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#low range of the sensor (this will be blue on the screen)</span></span><br><span class=\"line\">MINTEMP = <span class=\"number\">26.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#high range of the sensor (this will be red on the screen)</span></span><br><span class=\"line\">MAXTEMP = <span class=\"number\">32.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#how many color values we can have</span></span><br><span class=\"line\">COLORDEPTH = <span class=\"number\">1024</span></span><br><span class=\"line\"></span><br><span class=\"line\">os.putenv(<span class=\"string\">'SDL_FBDEV'</span>, <span class=\"string\">'/dev/fb1'</span>)</span><br><span class=\"line\">pygame.init()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#initialize the sensor</span></span><br><span class=\"line\">sensor = adafruit_amg88xx.AMG88XX(i2c_bus)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pylint: disable=invalid-slice-index</span></span><br><span class=\"line\">points = [(math.floor(ix / <span class=\"number\">8</span>), (ix % <span class=\"number\">8</span>)) <span class=\"keyword\">for</span> ix <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, <span class=\"number\">64</span>)]</span><br><span class=\"line\">grid_x, grid_y = np.mgrid[<span class=\"number\">0</span>:<span class=\"number\">7</span>:<span class=\"number\">32j</span>, <span class=\"number\">0</span>:<span class=\"number\">7</span>:<span class=\"number\">32j</span>]</span><br><span class=\"line\"><span class=\"comment\"># pylint: enable=invalid-slice-index</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sensor is an 8x8 grid so lets do a square</span></span><br><span class=\"line\">height = <span class=\"number\">240</span></span><br><span class=\"line\">width = <span class=\"number\">240</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#the list of colors we can choose from</span></span><br><span class=\"line\">blue = Color(<span class=\"string\">\"indigo\"</span>)</span><br><span class=\"line\">colors = list(blue.range_to(Color(<span class=\"string\">\"red\"</span>), COLORDEPTH))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#create the array of colors</span></span><br><span class=\"line\">colors = [(int(c.red * <span class=\"number\">255</span>), int(c.green * <span class=\"number\">255</span>), int(c.blue * <span class=\"number\">255</span>)) <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> colors]</span><br><span class=\"line\"></span><br><span class=\"line\">displayPixelWidth = width / <span class=\"number\">30</span></span><br><span class=\"line\">displayPixelHeight = height / <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\">lcd = pygame.display.set_mode((width, height))</span><br><span class=\"line\"></span><br><span class=\"line\">lcd.fill((<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">pygame.display.update()</span><br><span class=\"line\">pygame.mouse.set_visible(<span class=\"keyword\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">lcd.fill((<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">pygame.display.update()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#some utility functions</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">constrain</span><span class=\"params\">(val, min_val, max_val)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> min(max_val, max(min_val, val))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">map_value</span><span class=\"params\">(x, in_min, in_max, out_min, out_max)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#let the sensor initialize</span></span><br><span class=\"line\">time.sleep(<span class=\"number\">.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#read the pixels</span></span><br><span class=\"line\">    pixels = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> sensor.pixels:</span><br><span class=\"line\">        pixels = pixels + row</span><br><span class=\"line\">    pixels = [map_value(p, MINTEMP, MAXTEMP, <span class=\"number\">0</span>, COLORDEPTH - <span class=\"number\">1</span>) <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> pixels]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#perform interpolation</span></span><br><span class=\"line\">    bicubic = griddata(points, pixels, (grid_x, grid_y), method=<span class=\"string\">'cubic'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#draw everything</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ix, row <span class=\"keyword\">in</span> enumerate(bicubic):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> jx, pixel <span class=\"keyword\">in</span> enumerate(row):</span><br><span class=\"line\">            pygame.draw.rect(lcd, colors[constrain(int(pixel), <span class=\"number\">0</span>, COLORDEPTH- <span class=\"number\">1</span>)],</span><br><span class=\"line\">                             (displayPixelHeight * ix, displayPixelWidth * jx,</span><br><span class=\"line\">                              displayPixelHeight, displayPixelWidth))</span><br><span class=\"line\"></span><br><span class=\"line\">    pygame.display.update()</span><br></pre></td></tr></table></figure></p>\n<p>迷你紅外線熱像儀就這麼運作起來囉～🙆‍♂️ 可依照自己的測試環境，嘗試調整感測溫度上下限讓影像清晰一些。<br><img src=\"https://i.imgur.com/KtWuOfU.mp4\" alt></p>\n","categories":["Raspberry Pi"],"tags":["raspberry pi","adafruit","thermal camera"]},{"title":"eMask口罩預購&取貨","url":"/taiwan-emask-pre-order/","content":"<p>Taiwan No.1❤️<a id=\"more\"></a></p>\n<h3 id=\"口罩預購\"><a href=\"#口罩預購\" class=\"headerlink\" title=\"口罩預購\"></a>口罩預購</h3><p><br><br>\b<a href=\"https://emask.taiwan.gov.tw/msk/index.jsp\" target=\"_blank\" rel=\"noopener\">eMask口罩預購系統</a>於3/12~3/18開放首波預購，今天終於開始取貨啦！取貨時間為3/26~4/1，若沒有在期限內完成領取就視同放棄唷。(這可不是什麼愚人節梗！</p>\n<p>第二波預購期間為3/25~3/27晚上8點截止，詳情見<a href=\"https://mrmad.com.tw/emask-taiwan-gov-20-app\" target=\"_blank\" rel=\"noopener\">衛福部公告</a>，我個人是使用健保快易通APP來預購的，相關設定可以參考這篇教學：<a href=\"https://mrmad.com.tw/emask-taiwan-gov-20-app\" target=\"_blank\" rel=\"noopener\">點我</a>，無須讀取我們的<del>地表最強</del>健保卡，非常方便。</p>\n<p>預購完成後就等待抽籤，首波預購人數不多，因此有參加預購的人都能買到(儘管有18萬人沒有繳費…)，第二波就未知數了＠＠<br>3/28 更新：因為第二波預購人數依然未超過上限，因此登記預購者都能買到。<br><img src=\"https://i.imgur.com/vRZqnCX.jpg\" alt></p>\n<h3 id=\"預購繳費\"><a href=\"#預購繳費\" class=\"headerlink\" title=\"預購繳費\"></a>預購繳費</h3><p><br><br>第二波預購開放APP也能刷卡繳費囉～話說填寫信用卡資訊的這個「卡片後三碼」反而讓我有點錯愕，就檢核碼呀😅<br><img src=\"https://i.imgur.com/Hi10jKK.png\" alt><br>繳費成功！<br><img src=\"https://i.imgur.com/t3NxohE.png\" alt></p>\n<h3 id=\"口罩領取\"><a href=\"#口罩領取\" class=\"headerlink\" title=\"口罩領取\"></a>口罩領取</h3><p><br><br>統一超商ibon首頁就能看到口罩取貨專區😷<br><img src=\"https://i.imgur.com/c0mPcLA.jpg\" alt></p>\n<p>輸入身分證後4碼以及取貨通知簡訊中的取貨序號<br><img src=\"https://i.imgur.com/jEZxkSq.jpg\" alt></p>\n<p>拿著小白單到超商櫃檯就能領取到珍貴的口罩！<br><img src=\"https://i.imgur.com/CW90CFq.jpg\" alt></p>\n<p>希望這糟糕的一切能盡快結束😬，祝福我們都健健康康💪。</p>\n","categories":["Daily"],"tags":["covid-2019"]},{"title":"Manjaro安裝NVIDIA Driver＆CUDA","url":"/linux-manjaro-nvidia-driver-and-cuda/","content":"<p>搞定Manjaro的基本環境後，接下來要設定GTX 1660 Super以利後續的運算任務…噢，又折騰了不少時間，得好好紀錄過程與問題才行吶。<a id=\"more\"></a></p>\n<h3 id=\"Manjaro-freezing-at-boot-screen-after-NVIDIA-driver-installed\"><a href=\"#Manjaro-freezing-at-boot-screen-after-NVIDIA-driver-installed\" class=\"headerlink\" title=\"Manjaro freezing at boot screen after NVIDIA driver installed\"></a>Manjaro freezing at boot screen after NVIDIA driver installed</h3><p>透過Manjaro硬體偵測安裝non-free driver：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo mhwd -a pci nonfree 0300</span><br></pre></td></tr></table></figure><br><img src=\"https://i.imgur.com/mfQGFmj.png\" alt></p>\n<p>重新開機後，很好，畫面就停在黑螢幕了，進不去登入畫面(傻眼。原來在安裝了NVIDIA驅動後還必須手動修改硬體設定，否則視窗服務的運作會異常，導致系統看起來掛了，所以安裝N卡驅動的正確姿勢應該是要先修改設定文件後再重新啟動。首先，在黑螢幕的畫面按下ctrl + alt + F3來進入Terminal：</p>\n<p>查詢GPU BusID<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ lspci | grep -E <span class=\"string\">\"VGA|3D\"</span></span><br></pre></td></tr></table></figure><br>輸出訊息前三組數字即為BusID(忽略前綴0)，例如「01:00.0」則BusID為「1:0:0」。</p>\n<p>備份設定<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo mv /etc/X11/xorg.conf.d/90-mhwd.conf /etc/X11/xorg.conf.d/90-mhwd.conf.bak</span><br></pre></td></tr></table></figure></p>\n<p>寫入 /etc/X11/xorg.conf.d/90-mhwd.conf，BusID改為你要設定的GPU，我是設定為內顯的AMD GPU。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Section <span class=\"string\">\"Module\"</span></span><br><span class=\"line\">    Load <span class=\"string\">\"modesetting\"</span></span><br><span class=\"line\">EndSection</span><br><span class=\"line\"></span><br><span class=\"line\">Section <span class=\"string\">\"Device\"</span></span><br><span class=\"line\">    Identifier <span class=\"string\">\"nvidia\"</span></span><br><span class=\"line\">    Driver <span class=\"string\">\"nvidia\"</span></span><br><span class=\"line\">    BusID <span class=\"string\">\"PCI:1:0:0\"</span></span><br><span class=\"line\">    Option <span class=\"string\">\"AllowEmptyInitialConfiguration\"</span></span><br><span class=\"line\">EndSection</span><br></pre></td></tr></table></figure></p>\n<p>修改完成後重新啟動即可。</p>\n<p>參考：<a href=\"https://blog.csdn.net/baidu_33340703/article/details/103977592\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/baidu_33340703/article/details/103977592</a></p>\n<h3 id=\"CUDA＆cuDNN\"><a href=\"#CUDA＆cuDNN\" class=\"headerlink\" title=\"CUDA＆cuDNN\"></a>CUDA＆cuDNN</h3><p>在安裝CUDA之前，先確認N卡驅動是否正確安裝：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ nvidia-smi</span><br></pre></td></tr></table></figure><br><img src=\"https://i.imgur.com/UKIf8U1.png\" alt></p>\n<p>安裝CUDA、cuDNN以及後續會用到的Python函式庫：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -Syu tensorflow-cuda cuda cudnn python-pycuda python-tensorflow-cuda python-matplotlib</span><br></pre></td></tr></table></figure><br>＊為避免和pacman軟體庫提供的版本衝突，Arch/Manjaro移除了pip軟體庫中的tensorflow-gpu，以tensorflow-cuda取代之。</p>\n<p>將CUDA安裝目錄中的samples複製到home目錄下，編譯然後測試CUDA是否安裝成功：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cp -r /opt/cuda/samples ~</span><br><span class=\"line\">$ ~/samples</span><br><span class=\"line\">$ sudo make -k</span><br></pre></td></tr></table></figure><br>編譯過程需要點時間，大概30分鐘，編譯完成後執行deviceQuery：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/samples/1_Utilities/deviceQuery</span><br><span class=\"line\">$ ./deviceQuery</span><br><span class=\"line\">./deviceQuery Starting...</span><br><span class=\"line\"></span><br><span class=\"line\">CUDA Device Query (Runtime API) version (CUDART static linking)</span><br><span class=\"line\"></span><br><span class=\"line\">Detected 1 CUDA Capable device(s)</span><br><span class=\"line\"></span><br><span class=\"line\">Device 0: <span class=\"string\">\"GeForce GTX 1660 SUPER\"</span></span><br><span class=\"line\"> CUDA Driver Version / Runtime Version          10.2 / 10.2</span><br><span class=\"line\"> CUDA Capability Major/Minor version number:    7.5</span><br><span class=\"line\"> Total amount of global memory:                 5945 MBytes (6233391104 bytes)</span><br><span class=\"line\"> (22) Multiprocessors, ( 64) CUDA Cores/MP:     1408 CUDA Cores</span><br><span class=\"line\"> </span><br><span class=\"line\">(略...)</span><br><span class=\"line\"></span><br><span class=\"line\">deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 10.2, CUDA Runtime Version = 10.2, NumDevs = 1</span><br><span class=\"line\">Result = PASS  <span class=\"comment\"># PASS表示CUDA安裝成功</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h3><p>用<a href=\"https://laplacetw.github.io/data-sci-ml-hello-world-mnist/\">MNIST手寫數字辨識</a>\b來做測試，每批次都1秒就運算完了，雖然實際應該不到1秒XD</p>\n<h3 id=\"Keras-could-not-create-cudnn-handle-cudnn-status-alloc-failed\"><a href=\"#Keras-could-not-create-cudnn-handle-cudnn-status-alloc-failed\" class=\"headerlink\" title=\"Keras could not create cudnn handle: cudnn_status_alloc_failed\"></a>Keras could not create cudnn handle: cudnn_status_alloc_failed</h3><p>噢，正想說一切都配置好了，趕緊來繼續實驗放置了半個月的cifar-10模型訓練(因為Google CoLab的免費資源太熱門導致經常斷線而白忙，只好自己建置運算環境了😂)，結果出現了一個看起來很厲害的錯誤訊息(傻眼x2。查詢後發現是GPU記憶體配置問題，<a href=\"https://www.tensorflow.org/guide/gpu#limiting_gpu_memory_growth\" target=\"_blank\" rel=\"noopener\">Tensorflow為了避免記憶體碎片化</a>，預設會盡可能把可見的GPU記憶體都映射給當前的進程：</p>\n<blockquote>\n<p>By default, TensorFlow maps nearly all of the GPU memory of all GPUs (subject to CUDA_VISIBLE_DEVICES) visible to the process. This is done to more efficiently use the relatively precious GPU memory resources on the devices by reducing memory fragmentation.</p>\n</blockquote>\n<p>結果就是cifar-10這樣的運算量就導致記憶體不足而拋出錯誤訊息，所以我們必須讓Tensorflow按需求配置GPU記憶體：<br><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">config = tf.compat.v1.ConfigProto()  <span class=\"comment\"># tensorflow-gpu 2.1.0</span></span><br><span class=\"line\">config.gpu_options.allow_growth=<span class=\"keyword\">True</span></span><br><span class=\"line\">tf.compat.v1.keras.backend.set_session(tf.compat.v1.Session(config=config))</span><br></pre></td></tr></table></figure></p>\n<p>解決～每批次的運算速度比我在CoLab上面快10秒呢，$$沒有白花了QQ</p>\n<p>參考：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/weixin_42769131/article/details/88848478\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_42769131/article/details/88848478</a></li>\n<li><a href=\"https://blog.csdn.net/zuoyouzouzou/article/details/104329286\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zuoyouzouzou/article/details/104329286</a></li>\n</ul>\n","categories":["Linux"],"tags":["keras","linux","manjaro","nvidia"]},{"title":"Manjaro:You need to load kernel first","url":"/linux-need-to-load-kernel-first/","content":"<p>Manjaro在安裝完成並執行同步軟體庫&amp;更新後，重新開機黑屏顯示「error: file ‘/boot/vmlinuz-4.19-x86_64’ not found」<a id=\"more\"></a>、「\berror: You need to load kernel first」，這問題在我重新安裝並更新後依然發生了，到Manjaro Forum爬文才\b得知此問題來自pacman原始碼的變更，若使用低於18.1.5的舊版本ISO檔進行安裝就可能會受到影響，而我是使用18.0.1來安裝的😅</p>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>使用live USB來開機啟動Manjaro，在terminal執行以下指令 :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo manjaro-chroot -a</span><br><span class=\"line\">$ pacman -S linux419 linux419-headers</span><br><span class=\"line\">$ mkinitcpio -P</span><br><span class=\"line\">$ update-grub</span><br><span class=\"line\">$ sync</span><br><span class=\"line\">$ <span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure></p>\n<p>header版本依照錯誤訊息顯示哪個版本not found，重新安裝該版本就行了，指令執行完畢重新開機即可。</p>\n<p>參考 :</p>\n<ul>\n<li><a href=\"https://forum.manjaro.org/t/howto-rescue-your-system-error-hook-invalid-value-path/123226\" target=\"_blank\" rel=\"noopener\">Rescue your system: error: hook … Invalid value Path</a></li>\n<li><a href=\"https://forum.manjaro.org/t/error-file-boot-vmlinux-4-19-x86-64-not-found/123303\" target=\"_blank\" rel=\"noopener\">error: file ‘/boot/vmlinux-4.19-x86_64’ not found</a></li>\n</ul>\n","categories":["Linux"],"tags":["error","linux","manjaro"]},{"title":"Manjaro KDE 安裝＆個人化","url":"/linux-manjaro-install-and-optimization/","content":"<p>前陣子組了一台新主機，安裝了Manjaro Linux。<br><a id=\"more\"></a><br>\b其實是為了NVIDIA GPU的運算力，礙於窮學生經費有限僅能擠出20K左右的預算，取捨後實際花費為18K。</p>\n<ul>\n<li>AMD AM4 Ryzen 5 2400G</li>\n<li>ASUS PRIME A320M-K</li>\n<li>Crucial 16GB DDR4-3200 Ballistix SportLT</li>\n<li>WD Blue 250GB(M.2 SATA 3D TLC)</li>\n<li>Power Master N9 RGB/ATX</li>\n<li>Antec NX650</li>\n<li>Zotec GTX1660 SUPER Twin Fan 6G(T16620F-10L)</li>\n</ul>\n<p><img src=\"https://i.imgur.com/E7LsmEN.jpg\" alt><br><img src=\"https://i.imgur.com/9waIGr8.jpg\" alt></p>\n<h3 id=\"About-Manjaro\"><a href=\"#About-Manjaro\" class=\"headerlink\" title=\"About Manjaro\"></a>About Manjaro</h3><p>目前實際接觸過的Linux版本也就Ubuntu跟Raspberry Pi的Raspbian，本來也是預計要裝Ubuntu，但無意間看到Manjaro的相關文章，決定安裝KDE桌面環境版本，內建的下拉式terminal真香😋</p>\n<p>Manjaro是基於Arch的Linux發行版(這意味著許多問題都能在<a href=\"https://wiki.archlinux.org\" target=\"_blank\" rel=\"noopener\">Arch Wiki</a>找到答案)，初始版本發行日期為2011年7月10日，目標為使強大的Arch Linux能被人們更容易地使用，硬體檢測與核心切換是Manjaro相當突出的特色。<a href=\"https://manjaro.org/download/\" target=\"_blank\" rel=\"noopener\">官方</a>支援桌面環境有XFCE、KDE Plasma、GNOME，另外社群也支援了其他桌面環境，例如MATE、LXDE等。Manjaro雖然和Arch同樣採用滾動更新，但<a href=\"https://manjaro.org/features/fresh-and-stable/\" target=\"_blank\" rel=\"noopener\">根據Manjaro官方所述</a>，為避免滾動更新可能引發的相容性問題或錯誤，Manjaro有3個軟體庫:Stable、Testing、Unstable，Arch的滾動更新在經過Manjaro官方測試後才會正式發佈給Manjaro的使用者，所以Manjaro的滾動更新相對於Arch會有一定的延遲。至於安全性相關的更新則採用「快速追蹤」的做法，其有較高的優先測試等級，甚至是略過測試，以便盡快修復安全性問題。(↓官網圖片)<br><img src=\"https://manjaro.org/img/features/repositories.png\" alt></p>\n<p>社群資源 :\b\b\b\b</p>\n<ul>\n<li><a href=\"https://forum.manjaro.org\" target=\"_blank\" rel=\"noopener\">Manjaro Forum</a></li>\n<li><a href=\"https://wiki.manjaro.org/\" target=\"_blank\" rel=\"noopener\">Manjaro Wiki</a> / <a href=\"https://wiki.archlinux.org/index.php/Main_page_(正體中文\" target=\"_blank\" rel=\"noopener\">Manjaro Wiki(繁中)</a> )</li>\n<li><a href=\"https://manjaro-zh.blogspot.com/p/blog-page_7.html\" target=\"_blank\" rel=\"noopener\">Manjaro＠中文</a></li>\n</ul>\n<p>＊Wiki頁面亦有列出官方推特、臉書與Reddit討論版的連結。另外，官方論壇雖然也有(簡體)中文討論區，但目前活躍程度跟Manjaro＠中文(繁體)討論區差不多…主要還是英文討論區較為活躍。</p>\n<h3 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h3><p>ISO載點 : <a href=\"https://manjaro.org/download/\" target=\"_blank\" rel=\"noopener\">官網</a>、<a href=\"https://osdn.net/projects/manjaro/storage/\" target=\"_blank\" rel=\"noopener\">OSDN(含社群版本)</a><br>接下來就是找支閒置的4GB+ USB來製作開機隨身碟，燒錄工具推薦<a href=\"https://www.balena.io/etcher/\" target=\"_blank\" rel=\"noopener\">BalenaEtcher</a>。完成後就使用這支隨身碟來開機，Manjaro啟動選項的驅動設定建議選擇non-free，進入桌面環境後啟動安裝程式<del>然後就是下一步下一步下一步</del>。<br><img src=\"https://i.imgur.com/BdZpaEz.png\" alt></p>\n<p>Manjaro的安裝就跟M$的作業系統一樣簡單沒啥好說😁</p>\n<h3 id=\"Setting\"><a href=\"#Setting\" class=\"headerlink\" title=\"Setting\"></a>Setting</h3><p>核心切換<br><img src=\"https://i.imgur.com/VP0nbJW.png\" alt><br>MHWD - Manjaro Hardware Detection<br><img src=\"https://i.imgur.com/890z6MZ.png\" alt></p>\n<h4 id=\"Network\"><a href=\"#Network\" class=\"headerlink\" title=\"Network\"></a>Network</h4><p>↓DSL就是設定一般家用有線網路，例如CHT ADSL。<br><img src=\"https://i.imgur.com/i3sv4Dh.png\" alt></p>\n<h4 id=\"WiFi\"><a href=\"#WiFi\" class=\"headerlink\" title=\"WiFi\"></a>WiFi</h4><p>這部分有點折騰🤪，原本買了某知名A牌廠商的USB網卡，外盒寫了支援WIN、MAC、LINUX，而Manjaro早就內建該網卡的WiFi晶片驅動了…但無論是內建或是AUR下載來的，怎麼搞就是抓不到，我耗了好幾個晚上的時間在爬文跟測試，最後還在Manjaro Forum發問仍是沒有解決，於是我決定棄用(狀態顯示為很混怒)。</p>\n<p>查了一下直接買來TP-Link TL-WN722N，我他X什麼設定都沒搞！什麼驅動都沒裝！一插就爽！！！<br><img src=\"https://i.imgur.com/hp7z3aA.jpg\" alt></p>\n<h4 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update\"></a>Update</h4><p>查詢Pacman Mirror來源<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ pacman-mirrors -l</span><br></pre></td></tr></table></figure></p>\n<p>變更Mirror來源為Taiwan<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo pacman-mirrors -t 5 -c Taiwan</span><br></pre></td></tr></table></figure></p>\n<p>同步軟體庫＆更新<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -Syyu</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://i.imgur.com/yHCOIyM.png\" alt></p>\n<p>＊所有更新完成後若發生中文亂碼的情況，則需安裝字體並重新登入：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S noto-fonts-cjk</span><br></pre></td></tr></table></figure></p>\n<p>我所安裝的Noto Fonts為Google的開源字型，<a href=\"https://tinyurl.com/uhwvs4w\" target=\"_blank\" rel=\"noopener\">Arch Wiki</a>亦有其他推薦的中文字體可選擇。</p>\n<h4 id=\"Chinese-IME-Input-Method-Editor\"><a href=\"#Chinese-IME-Input-Method-Editor\" class=\"headerlink\" title=\"Chinese IME(Input Method Editor)\"></a>Chinese IME(Input Method Editor)</h4><p>中文輸入法安裝參考 : <a href=\"https://manjaro-zh.blogspot.com/2015/05/manjaro-linux-gcin.html\" target=\"_blank\" rel=\"noopener\">Manjaro@中文</a><br>安裝gcin<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S gcin</span><br></pre></td></tr></table></figure></p>\n<p>編輯.xprofile<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kate ~/.xprofile</span><br></pre></td></tr></table></figure><br>寫入以下設定 :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GTK_IM_MODULE=gcin</span><br><span class=\"line\"><span class=\"built_in\">export</span> QT_IM_MODULE=gcin</span><br><span class=\"line\"><span class=\"built_in\">export</span> LC_CTYPE=zh_TW.UTF-8</span><br><span class=\"line\"><span class=\"built_in\">export</span> XMODIFIERS=<span class=\"string\">\"@im=gcin\"</span></span><br><span class=\"line\">gcin &amp;</span><br></pre></td></tr></table></figure></p>\n<p>打開terminal執行下列指令 :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo gtk-query-immodules-2.0 --update-cache</span><br><span class=\"line\">$ sudo gtk-query-immodules-3.0 --update-cache</span><br></pre></td></tr></table></figure></p>\n<p>然後重新登入即可使用。</p>\n<h4 id=\"Google-Chrome-Chromium\"><a href=\"#Google-Chrome-Chromium\" class=\"headerlink\" title=\"Google Chrome / Chromium\"></a>Google Chrome / Chromium</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S chromium</span><br><span class=\"line\">$ sudo pacman -S google-chrome</span><br></pre></td></tr></table></figure>\n<h4 id=\"VS-Code\"><a href=\"#VS-Code\" class=\"headerlink\" title=\"VS Code\"></a>VS Code</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S code</span><br></pre></td></tr></table></figure>\n<h3 id=\"MacOS-like-KDE\"><a href=\"#MacOS-like-KDE\" class=\"headerlink\" title=\"MacOS-like KDE\"></a>MacOS-like KDE</h3><p>全域主題 : Glassy<br>圖示 : McMojave-circle-dark<br>游標 : McMojave-circle-dark<br>安裝 Latte Dock桌面元件 :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo pacman -S latte-dock</span><br></pre></td></tr></table></figure></p>\n<p>↓看起來跟Mac OS桌面環境有87%像🤣🤣🤣<br><img src=\"https://i.imgur.com/5xQmNUU.png\" alt><br><img src=\"https://i.imgur.com/8jMN6Zb.png\" alt><br><img src=\"https://i.imgur.com/W5KyxXn.png\" alt><br><img src=\"https://i.imgur.com/EvXxv3m.png\" alt></p>\n<p>虛擬桌面切換 :<br><img src=\"https://i.imgur.com/F2H0OyB.gif\" alt></p>\n","categories":["Linux"],"tags":["linux","manjaro","kde"]},{"title":"Python批次加密PDF文件","url":"/python-pdf-batch-encrypt/","content":"<p>又好一段時間沒更新了(忙，然後就2020年了…紀錄一下前陣子寫了段程式碼幫人處理批次加密PDF。<br><a id=\"more\"></a></p>\n<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>事實上這需求與薪資系統有關，我只知道那系統似乎很瞎，但人工處理這種大量重複性的問題更瞎🙄<br>於是我們會有無數個PDF文件和一個txt文件，PDF內容是個人機密😎，而txt裡頭則是對照表，當程式讀進路徑下所有PDF文件後，會依照PDF檔名去對照每個人的ID Number，以作為PDF文件加密的密碼，然後使用PyPDF2這個模組來進行加密。需注意讀取跟寫入的檔名不能相同，因為加密完會遇到檔案已存在而無法回寫的情況，只好在讀檔之前一律先把檔名改為”tmp.pdf”，讀進來加密完再另存回原檔名，然後刪除”tmp.pdf”，如此完成一個PDF文件的加密。</p>\n<p>\b＊PDF檔名即為code，而txt檔裡頭的對照表有兩個欄位：code | id_number</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># *** coding:utf-8 ***</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os, glob</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyPDF2 <span class=\"keyword\">import</span> PdfFileReader <span class=\"keyword\">as</span> pdfReader</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyPDF2 <span class=\"keyword\">import</span> PdfFileWriter <span class=\"keyword\">as</span> pdfWriter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_id_by_code</span><span class=\"params\">(code, table)</span>:</span></span><br><span class=\"line\">    pswd = <span class=\"string\">\"123456\"</span>  <span class=\"comment\"># default password</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> table:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> code <span class=\"keyword\">in</span> i:</span><br><span class=\"line\">            pswd = str(i).split()[<span class=\"number\">1</span>]</span><br><span class=\"line\">            print(code, <span class=\"string\">\"--&gt;\"</span>, pswd)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> pswd</span><br><span class=\"line\"></span><br><span class=\"line\">id = open(<span class=\"string\">\"ID.txt\"</span>)</span><br><span class=\"line\">ID_table = list(id)</span><br><span class=\"line\">id.close()</span><br><span class=\"line\"></span><br><span class=\"line\">pdf_files = glob.glob(<span class=\"string\">r\"*.pdf\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> path <span class=\"keyword\">in</span> pdf_files:</span><br><span class=\"line\">    code = path.replace(<span class=\"string\">\".pdf\"</span>, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">    os.rename(path, <span class=\"string\">\"tmp.pdf\"</span>)</span><br><span class=\"line\">    in_file = open(<span class=\"string\">\"tmp.pdf\"</span>, <span class=\"string\">\"r+b\"</span>)</span><br><span class=\"line\">    in_pdf = pdfReader(in_file)</span><br><span class=\"line\"></span><br><span class=\"line\">    out_pdf = pdfWriter()</span><br><span class=\"line\">    out_pdf.appendPagesFromReader(in_pdf)</span><br><span class=\"line\">    pswd = find_id_by_code(code, ID_table)</span><br><span class=\"line\">    out_pdf.encrypt(pswd)</span><br><span class=\"line\"></span><br><span class=\"line\">    out_file = open(path, <span class=\"string\">\"wb\"</span>)</span><br><span class=\"line\">    out_pdf.write(out_file)</span><br><span class=\"line\"></span><br><span class=\"line\">    in_file.close()</span><br><span class=\"line\">    out_file.close()</span><br><span class=\"line\">    os.remove(<span class=\"string\">\"tmp.pdf\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">del</span> in_pdf, out_pdf</span><br><span class=\"line\">input(<span class=\"string\">\"Encrypt Complete! Now you can close the window.\"</span>)</span><br></pre></td></tr></table></figure>\n","categories":["Python"],"tags":["python","pdf"]},{"title":"大眾運輸x穿戴裝置x感應進站","url":"/apple-watch-with-ipass/","content":"<p>自從改用icash 2.0搭台鐵以來，在感應進站的時候，明顯感覺icash 2.0需要大約2秒的感應時間😒 於是我想到並馬上設定了line pay一卡通，但想要做到「感應進站」這件事，似乎沒有這麼順利…<a id=\"more\"></a>當我仔細研究了line pay的「<a href=\"https://www.i-pass.com.tw/IPS/Event/LINEPay-iPASS/an006.html\" target=\"_blank\" rel=\"noopener\">乘車碼</a>」功能，才知道\b\b目前僅有高雄捷運、高雄客運橘12以及東南客運橘20能用啊😬 另外，高雄捷運已經和Mastercard合作啦，所以是可以搭配Apple Pay或其他電子支付來感應進站的。</p>\n<p>花了點時間做資訊收集，總之，要用我手上的iPhone逼～進台鐵或搭公車目前還是做不到的(台鐵目前只允許台鐵E訂通產生的對號座QR碼讀取進站)。看來，只能透過「物理」的方式來達成我的需求了，目標是讓隨身物品附加上電子票證的功能，例如手錶。</p>\n<p>立馬找了網拍賣家，買來一卡通貼片，將錶帶用酒精清潔乾淨後，仔細地貼上。</p>\n<p><img src=\"https://i.imgur.com/ZyhdWvs.png\" alt><br><img src=\"https://i.imgur.com/A2ujMAY.png\" alt><br><img src=\"https://i.imgur.com/jtjIOaj.png\" alt></p>\n<p>\b之所以會選擇一卡通，是打算綁定到line pay一卡通帳戶上來使用其自動加值的功能。首先，到手機上的line pay頁面，點選設定–&gt;連結一卡通–&gt;輸入卡號，設定完成後，因為一卡通尚未完成記名設定，因此line pay會提示使用者要到全家FamiPort完成卡片更新。</p>\n<p><img src=\"https://i.imgur.com/GoVhvle.png\" alt><br><img src=\"https://i.imgur.com/joqo0wD.png\" alt><br><img src=\"https://i.imgur.com/OytTTZS.png\" alt></p>\n<p>\b\b不過…<a href=\"https://www.i-pass.com.tw/IPS/Event/LINEPay-iPASS/an009.html\" target=\"_blank\" rel=\"noopener\">自動加值</a>只適用於一卡通的特約商店，不包含7-ELEVEN、台鐵、高鐵、公車、捷運等🙄 算了，反正我還是帶著Apple Watch到超商完成加值並開始使用了。</p>\n<hr>\n<p>使用電子票證貼片來搭乘台鐵約一週後，我認為它是仍有改善空間的解決方案 :</p>\n<ul>\n<li>貼片的邊緣部分會沾黏灰塵而逐漸減弱黏性，黏貼的方式或許比較適合封閉的環境，例如前陣子爆紅的寶貝球悠遊卡或其他吊飾的內部</li>\n<li>\b台鐵自動驗票閘門的感應區域在右側，但手錶配戴之慣用手則是因人而異，以我配戴於左手為例，感應進站需要稍微蹲低並轉動手腕才能順利感應…</li>\n</ul>\n<p>因為受不了貼片黏膠，就把貼片給撕下來了，錶帶整個黏呼呼的，還得用橡皮擦把殘膠嚕個乾淨。有了貼片的使用經驗，目前順利使用中的是網路賣家客製的電子票證手機貼片，但我可沒想再黏貼於任何地方了，就讓它在手機和保護殼之間的夾縫中生存吧，這樣一來無論是換手機還是換保護殼都很方便，搭乘台鐵就直接拿出手機來感應吧</p>\n","categories":["Daily"],"tags":["apple watch","ipass","e-payment"]},{"title":"動手更換老舊的電源插座","url":"/replace-electrical-socket/","content":"<p>\b\b\b突然想起很久、很久以前，似乎在五金賣場買了兩個插座要來更換，但買回來後就一直擱著…然後就忘了這件事😅<a id=\"more\"></a>雖然插座不知道為什麼某天就突然插不緊了，我一開始還以為是裡頭的簧片變形之類的，\b不過就一直忘了換，儘管插頭插上去不是很穩固，但也還算得上堪用。</p>\n<p>＊<span style=\"color:red;\">安全至上，插座是有電的，更換前務必切掉總開關。</span></p>\n<p>但我終於想起來啦，趕緊把兩個放到長灰塵的新插座挖出來，開始拆掉舊的插座，卸下蓋板、轉開兩顆固定螺絲…草泥馬呀！😱我想說怎麼看起來怪怪的，原來是插座本體的塑膠外殼竟然劣化斷掉了，所以才會直接看到裡頭的簧片…我以為只是簧片變形 ＝＝<br><img src=\"https://i.imgur.com/VVpK0Au.png\" alt></p>\n<p>接著用一字起子往電線旁紅圈處的卡榫插進去，就可以把電線給卸除了，不過我手邊沒有一字起子，所以用之前魚缸用的不鏽鋼長夾代替XD 如果怕忘了怎麼裝(或原本裝設的人裝反了)，卸除電線之前可以先拍照紀錄，通常紅色的為火線(有電)、白色的為水線(無電)，如果是三孔插座的話還會有綠色的接地線。</p>\n<p>話說這插座還真是裂得誇張…<br><img src=\"https://i.imgur.com/wID59J9.png\" alt></p>\n<p>\b電線都卸除後就可以安裝新的插座啦，電線安裝的孔位旁邊會有圖示，較短的橫槓表示為火線安裝處，較長的橫槓則為水線，或有標示一個大寫英文字母W的字樣，中間則是接地線，務必確認電線有插到底不會鬆脫。而我當初買的是兩孔插座並沒有接地的設計，所以兩條接地線稍微整個線收好，就可以把插座面板鎖回去啦。<br>\b\b\b<img src=\"https://i.imgur.com/hqiXjor.png\" alt></p>\n<p>打開電源總開關測試一下插座是否安裝正確，裝上插座蓋板，完成～😎<br><img src=\"https://i.imgur.com/uLTa5wO.png\" alt></p>\n","categories":["Daily"],"tags":["DIY","plug socket"]},{"title":"南科自造基地研習Part 2","url":"/maker-space-workshop-part-2/","content":"<p>人工智慧―自然語言處理與聊天機器人開發。<br><a id=\"more\"></a><br>Part 2於8/26 ~ 8/27在成大系統系館進行，講師為A.P. Wen-Hsiang Lu。</p>\n<h3 id=\"研習內容大綱\"><a href=\"#研習內容大綱\" class=\"headerlink\" title=\"研習內容大綱\"></a>研習內容大綱</h3><p><br></p>\n<ul>\n<li>自然語言處理(NLP)技術和應用簡介</li>\n<li>自然語言處理工具練習</li>\n<li>命名實體識別(NER)語意分析練習</li>\n<li>聊天機器人(ChatBot)實作練習</li>\n</ul>\n<hr>\n<h3 id=\"筆記\"><a href=\"#筆記\" class=\"headerlink\" title=\"筆記\"></a>筆記</h3><p><br></p>\n<ul>\n<li>NLP的最終目標—自動化的語言理解/處理/分析/推理</li>\n<li>NLP的重要性—使人機互動能做到真正的「溝通」</li>\n<li>語言句法結構<ul>\n<li>例1：日文為SOV結構(動詞在句尾)</li>\n<li>例2：原民語為VSO結構(動詞在句首)</li>\n</ul>\n</li>\n<li>語言學相關知識類型<ul>\n<li>聲學知識(音譯)</li>\n<li>詞彙學知識(字根)</li>\n<li>詞性知識</li>\n<li>文法知識</li>\n<li>語意學知識</li>\n<li>實用知識：情境如何影響句子的解釋</li>\n<li>世界知識：\b\b\b我的理解是common sense，例如「I read an article about ＯＯＯ in the paper.」，我們會「直覺」地認為句子中的paper指的是「論文」。</li>\n</ul>\n</li>\n<li>NLP相關技術<ul>\n<li>概率與資訊理論</li>\n<li>語言學知識</li>\n<li>字彙/詞庫/語料庫/片語/詞義辨識</li>\n<li>Ｎ-gram語言建模／隱性馬可夫模型</li>\n<li>詞性標記</li>\n<li>文法解析</li>\n<li>深度學習</li>\n<li>計算語言學<ul>\n<li>語言描述：普遍性與跨語言研究</li>\n<li>計算模型的實現<ul>\n<li>演算法與資料結構</li>\n<li>知識表徵模型</li>\n<li>推理過程模型</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>心理語言學<ul>\n<li>人類為語言理解可計算性的存在證明</li>\n<li>心理學研究可以被用來解釋計算模型</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>NLP技術問題<ul>\n<li>龐大的字彙量/無數的現象與規則</li>\n<li>不規則變化(例外、例外中的例外…)</li>\n<li>字彙/情境/文法中的歧義</li>\n<li>網路時代的多語言問題<ul>\n<li>語言障礙(人類語言據估算約有5000到7000種)</li>\n<li>資訊過載</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>NLP相關應用<ul>\n<li>機器翻譯</li>\n<li>自動語音識別</li>\n<li>(跨語言)資訊檢索</li>\n<li>(跨語言)問題回答</li>\n<li>文本摘要</li>\n<li>資訊抽取</li>\n<li>對話系統/聊天機器人</li>\n</ul>\n</li>\n<li>NLP基本機率模型<ul>\n<li>N-gram Language Model</li>\n<li>Hidden Markov Model(HMM)</li>\n</ul>\n</li>\n<li>NLP深度學習模型<ul>\n<li>模型發展：訓練結果的詞向量由非上下文相關 –&gt; 上下文相關(詞彙於不同句子中有各自的向量表示)</li>\n<li>Word2Vec<ul>\n<li>CBOW(Continuous Bag of Words)：利用周圍的詞預測中心的詞</li>\n<li>Skip-gram：利用中心的詞預測周圍的詞，訓練時間久、結果較CBOW準確</li>\n</ul>\n</li>\n<li>RNN(Recurrent Neural Network)</li>\n<li>LSTM(Long Short-Term Memory)</li>\n<li>Seq2Seq(Sequence to Seqence)</li>\n<li>Seq2Seq with Attention</li>\n</ul>\n</li>\n<li>命名實體識別(NER)<ul>\n<li>擷取文字資料中的人名、地名、組織名等目標實體進行分析、標記</li>\n<li>模型構建<ul>\n<li>Rule-based:<ul>\n<li>Pos Tagging Pattern + statistic</li>\n<li>Dictionary-based</li>\n</ul>\n</li>\n<li>Traditional ML-based:<ul>\n<li>Hidden Markov Model(HMM)</li>\n<li>CRF(Conditional Random Field) + template</li>\n</ul>\n</li>\n<li>DL-based:<ul>\n<li>LSTM(Long Short-Term Memory)</li>\n<li>LSTM with Attention</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Viterbi Algorithm(維特比演算法)<ul>\n<li>動態規劃演算法</li>\n<li>在語音辨識中，聲音訊號做為觀察到的事件序列，而文字字串被視為隱含產生聲音訊號的原因，因此可對聲音訊號應用維特比演算法尋找出最有可能的文字字串。</li>\n</ul>\n</li>\n<li>CRF++：條件隨機域詞性標記工具</li>\n</ul>\n</li>\n<li>線上工具<ul>\n<li><a href=\"http://ehownet.iis.sinica.edu.tw/index.php\" target=\"_blank\" rel=\"noopener\">中研院E-HowNet繁體知網系統</a></li>\n<li><a href=\"http://ckipsvr.iis.sinica.edu.tw\" target=\"_blank\" rel=\"noopener\">中研院CKIP中文斷詞系統</a></li>\n<li><a href=\"http://parser.iis.sinica.edu.tw\" target=\"_blank\" rel=\"noopener\">中研院CKIP中文剖析器線上測試版</a></li>\n<li><a href=\"http://nlp.stanford.edu:8080/parser/\" target=\"_blank\" rel=\"noopener\">Stanford Parser</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"實作練習\"><a href=\"#實作練習\" class=\"headerlink\" title=\"實作練習\"></a>實作練習</h3><p>\b</p>\n<h4 id=\"中文斷詞工具\"><a href=\"#中文斷詞工具\" class=\"headerlink\" title=\"中文斷詞工具\"></a>中文斷詞工具</h4><p>此工具使用了教育部國語辭典(16萬詞)來協助斷詞比對，練習用Python實作一個中文斷詞工具，大致上的概念為「先斷句，再斷詞」。</p>\n<p>程式範例：先用正則式比對各種標點符號進行斷句後，再逐句來處理斷詞。斷詞的部分，則是由左至右循序比對、抽取出句子中最長的詞，然後再比對剩下的句子…透過重複前述步驟來拆解句子。<br>\b\b\b\b<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">book = &#123;&#125;</span><br><span class=\"line\">result = <span class=\"string\">\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">segment</span><span class=\"params\">(sentences)</span>:</span></span><br><span class=\"line\">    lines = re.split(<span class=\"string\">r'[，。；：！？／（）「」『』【】]'</span>, sentences)</span><br><span class=\"line\">    end = len(lines) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> lines[end] == <span class=\"string\">''</span>:</span><br><span class=\"line\">        <span class=\"keyword\">del</span> lines[end]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lines</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compare</span><span class=\"params\">(txt)</span>:</span></span><br><span class=\"line\">    end = len(txt)</span><br><span class=\"line\">    res = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> end != <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> txt[<span class=\"number\">0</span>:end] <span class=\"keyword\">in</span> book:</span><br><span class=\"line\">            res = txt[<span class=\"number\">0</span>:end]</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        end -= <span class=\"number\">1</span></span><br><span class=\"line\">    res = res <span class=\"keyword\">if</span> res != <span class=\"string\">\"\"</span> <span class=\"keyword\">else</span> txt</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">breakSen</span><span class=\"params\">(txt)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> result</span><br><span class=\"line\">    str_len = len(txt)</span><br><span class=\"line\">    start = <span class=\"number\">0</span></span><br><span class=\"line\">    end = str_len + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> start &lt; str_len:</span><br><span class=\"line\">        _slice = txt[start:end]</span><br><span class=\"line\">        word = compare(_slice)</span><br><span class=\"line\">        result += word</span><br><span class=\"line\">        start += len(word)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> start != str_len:</span><br><span class=\"line\">            result += <span class=\"string\">\"/\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'words.txt'</span>, <span class=\"string\">'r'</span>, encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    lines = file.read().splitlines()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">        book[line] = line</span><br><span class=\"line\">txt = <span class=\"string\">\"長頸鹿屬是一屬生長在非洲的反芻偶蹄動物，共有四個物種，是現存世界上最高的陸生動物。一般雄性個體高達4.8到5.5公尺高，重達900公斤。雌性個體一般要小一些。\"</span></span><br><span class=\"line\">print(<span class=\"string\">\"\\ntxt : \\n\\n\"</span>, txt, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">sentences = segment(txt)</span><br><span class=\"line\">print(<span class=\"string\">\"segment : \\n\\n\"</span>, sentences, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> sentences:</span><br><span class=\"line\">    breakSen(s)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> s != sentences[len(sentences) - <span class=\"number\">1</span>]:</span><br><span class=\"line\">        result += <span class=\"string\">\"/\"</span></span><br><span class=\"line\">print(<span class=\"string\">\"result : \\n\\n\"</span> + result, <span class=\"string\">\"\\n\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://i.imgur.com/1DFMiqJ.png\" alt></p>\n<h4 id=\"聊天機器人\"><a href=\"#聊天機器人\" class=\"headerlink\" title=\"聊天機器人\"></a>聊天機器人</h4><p>使用Google Dialogflow負責NLP，並與Line Channel串接為可自動回應的Chatbot。網路上<a href=\"https://www.appcoda.com.tw/chatbot-dialogflow-ios/\" target=\"_blank\" rel=\"noopener\">基礎教學</a>很多，因此設定過程省略，基本上就是建立一個Agent來負責處理回應的接收和傳送，在Agent底下可以建立Intents以及Entities來設定對話流程、關鍵字。</p>\n<p><img src=\"https://i.imgur.com/NNhEuJO.png\" alt><br><img src=\"https://i.imgur.com/WWiDs8E.png\" alt><br><img src=\"https://i.imgur.com/Aqqcwxy.png\" alt></p>\n<hr>\n<h3 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h3><p><br><br>透過盧老師的詳細講解，讓大家了解到自然語言處理(NLP)所涉及包含社會科學等各方面的技術知識，以及在NLP領域還有許多難題尚待解決，如果少了NLP相關技術的話，未來的人機互動將會缺少相當重要的一塊，而人類的語言是如此多元、複雜，絕非單純把數據無腦地丟進深度學習模型就能解決(自從Google DeepMind讓阿發狗秀了一波騷操作後，人們聽到AI深度學習什麼的就像聽到傳說中的<del>EX咖哩棒</del>Excalibur呀😂)。\b</p>\n<p>經過Part 2的研習，對於NLP中所謂的「斷詞」總算是有較完整的概念了，雖然自己在工作上有寫過Line與Web聊天機器人，但我自己明白那有多粗糙，就只是抓取關鍵字做出相對的回應罷了，一點兒都不智慧😕雖然使用者還是會很認真和機器人對話，但看在龜毛的人眼裡是很介意的<del>，我絕對不會承認我很介意</del>。我想我接下來可以嘗試使用NLP來做點什麼，並從經驗中更進一步理解關於NLP的知識。</p>\n<p>感謝A.P. Wen-Hsiang Lu與助教們的用心講解，受益良多。</p>\n","categories":["Workshop"],"tags":["NLP","semantic analysis","chatbot"]},{"title":"閱讀筆記:兒童急性壞死性腦病(ANEC)","url":"/acute-necrotizing-encephalopathy-of-childhood/","content":"<p>前幾天於PTT看到某篇<a href=\"https://www.ptt.cc/bbs/BabyMother/M.1566400996.A.FC7.html\" target=\"_blank\" rel=\"noopener\">媽寶版的文章</a>，才知道如此令人心碎的疾病。<a id=\"more\"></a>作者的孩子(1Y10M)其病況始於突然反覆發燒，於短短幾天內病情便急轉直下、陷入昏迷，神經科醫師診斷可能有腦部損傷，疑似兒童急性壞死性腦病(ANEC)，經緊急安排腦部核磁共振檢查，結果發現視丘及腦幹受損相當嚴重！\b\b\b去年遇到相同狀況的<a href=\"https://www.parenting.com.tw/article/5079996\" target=\"_blank\" rel=\"noopener\">賴教授與其夫人</a>得知此事，便和作者聯繫並給予鼓勵，我也和大家在批踢踢留言給作者鼓勵打氣，無論如何都希望奇蹟能出現。</p>\n<p>這樣的事令我感到相當震驚與難過，無知的我以為都2019年了，除了那些罕見遺傳性疾病，我們對於大多數的已知疾病應該都有所掌握才對…我這想法真可笑。出於好奇，我在網路上搜尋了關於ANEC的資訊，想知道關於其預防及治療的進展。</p>\n<hr>\n<h3 id=\"什麼是兒童急性壞死性腦病-ANEC-？\"><a href=\"#什麼是兒童急性壞死性腦病-ANEC-？\" class=\"headerlink\" title=\"什麼是兒童急性壞死性腦病(ANEC)？\"></a>什麼是兒童急性壞死性腦病(ANEC)？</h3><p>\b\b\b吳昌騰醫師今年1月曾於其<a href=\"https://zh-tw.facebook.com/TaiwanPerDoctor/posts/268050263890017\" target=\"_blank\" rel=\"noopener\">臉書貼文</a>說到：<br><blockquote><p>兒童急性壞死性腦病(acute necrotizing encephalopathy of children，ANEC)絕對是令兒科急診醫師人人驚心動魄的疾病。ANEC是一種高死亡率的腦病變，主要好發於日本、台灣和韓國。目前為止全世界已經有許多的病例報告。雖然致病機轉尚未完全明瞭，不過目前認為此病與人體的免疫系統和代謝有關。不同病毒皆能引發ANEC，包括A型及B型流感、副流感、帶狀泡疹病毒(水痘)、德國痲疹、HHV-6 及 HHV-8、腸道病毒及柯薩奇病毒 A9；ANEC亦分偶發性或遺傳性，死亡率達70%。ANEC具有病情急、進展快、死亡率高等特點，兒童患者常伴隨嘔吐、快速的意識喪失、不同程度肝功能障礙，預後差，存活者常伴有嚴重的神經系統後遺症。目前ANEC尚缺乏有效的治療方法，治療方法通常為支持療法，如抗生素、抗病毒藥物、IVIG等等治療。</p>\n</blockquote></p>\n<p>＊「預後」: 疾病發生後，對疾病未來發展的病程和結果(痊愈、複發、惡化、致殘、 併發症及死亡等)的預測。</p>\n<h3 id=\"疾病管制署致醫界通函第369號\"><a href=\"#疾病管制署致醫界通函第369號\" class=\"headerlink\" title=\"疾病管制署致醫界通函第369號\"></a>疾病管制署致醫界通函第369號</h3><p>\b衛福部疾管署曾於今年2/26發佈<a href=\"https://www.cdc.gov.tw/Bulletin/Detail/RZNFvB_786v_kT6tQ2HTBQ?typeid=48\" target=\"_blank\" rel=\"noopener\">醫界通函</a>，呼籲臨床醫師針對流感併發腦炎之病例提高警覺：<br><blockquote><p>全國醫界朋友，您好：</p>\n<p>國內自2018年10月1日起累計406例流感併發重症病例(以217例感染H1N1、166例感染H3N2為多)，34例死亡(21例H1N1、13例H3N2)，包含4名孩童死亡病例，其中3名孩童未接種本季流感疫苗。此4名死亡孩童皆併發腦炎，其病毒學檢驗結果皆為H1N1，又其發病至出現神經學症狀中位數為1天(範圍0–4天)，且病程快速惡化，雖均使用流感抗病毒藥物治療，仍於發病後2至5天內死亡。</p>\n<p>根據國內研究，兒童感染流感後約有1–2%出現腦炎症狀，然而其最嚴重的表現為急性壞死性腦病變(acute necrotizing encephalopathy)，死亡率可高達30-40%。<span style=\"color:red;\">疾管署籲請醫師提高警覺，於流感流行季，對於出現疑似腦炎的神經學症狀，如意識改變、抽搐、局部神經學症狀等個案，應儘速進行流感相關檢驗並使用流感抗病毒藥物</span>；另根據日本少數病例治療經驗，針對未侵犯腦幹之急性壞死性腦病變部分個案，早期使用類固醇可能對個案預後有幫忙，請臨床醫師評估個案狀況審慎使用。</p>\n<p>感謝您與我們共同維護全民的健康安全。</p>\n</blockquote></p>\n<p>因為發現疾管署曾發佈此醫界通函，便找了找相關的新聞報導，但我對於ANEC的新聞搜尋結果感到疑惑，只找到幾則於今年2月所發佈關於流感併發腦炎的報導，這才提到兒童急性壞死性腦病這個詞…我以為媒體應該更加關注這樣嚴重的事，呵呵。</p>\n<h3 id=\"相關文獻\"><a href=\"#相關文獻\" class=\"headerlink\" title=\"相關文獻\"></a>相關文獻</h3><h4 id=\"Acute-necrotising-encephalopathy-of-childhood-a-new-syndrome-presenting-with-multifocal-symmetric-brain-lesions\"><a href=\"#Acute-necrotising-encephalopathy-of-childhood-a-new-syndrome-presenting-with-multifocal-symmetric-brain-lesions\" class=\"headerlink\" title=\"Acute necrotising encephalopathy of childhood: a new syndrome presenting with multifocal, symmetric brain lesions\"></a>Acute necrotising encephalopathy of childhood: a new syndrome presenting with multifocal, symmetric brain lesions</h4><p>ANEC\b係由<a href=\"https://www.ncnp.go.jp/nin/english/department.html\" target=\"_blank\" rel=\"noopener\">日本國立神經科學研究中心</a>的Mizuguchi等人於1995年發表的<a href=\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1073485/\" target=\"_blank\" rel=\"noopener\">論文</a>所提出，文件中回顧了13位接受治療的連續患者與28份報告的病例記錄，描述日本兒童中普遍存在著一種未被識別的急性腦病類型之臨床病理學特徵，於呼吸道感染後，原本健康的兒童開始出現<span style=\"color:red;\">昏迷，抽搐，嘔吐，高燒以及肝腫大等症狀</span>。此急性腦病被認為是多發性兒童急性壞死性腦病的新型實體，<span style=\"color:red;\">電腦斷層掃描與核磁共振結果顯示，ANEC\b於視丘、白質、腦幹及小腦造成之腦損傷呈現對稱分佈</span>。</p>\n<h4 id=\"Neuropsychological-outcomes-of-childhood-acute-necrotizing-encephalopathy\"><a href=\"#Neuropsychological-outcomes-of-childhood-acute-necrotizing-encephalopathy\" class=\"headerlink\" title=\"Neuropsychological outcomes of childhood acute necrotizing encephalopathy\"></a>Neuropsychological outcomes of childhood acute necrotizing encephalopathy</h4><p>此<a href=\"https://www.sciencedirect.com/science/article/abs/pii/S0387760419301627\" target=\"_blank\" rel=\"noopener\">論文</a>描述了3位ANEC患者的神經心理學結果，研究於經歷ANEC後的18個月至10年之間，對患者長期認知與心理的影響。3個病例均表現出<span style=\"color:red;\">注意力不集中、精細動作困難(例如:書寫、下棋)、焦慮，甚至社交障礙</span>。長期損害的嚴重程度與急性症狀表現及恢復期的神經成像有關，這些研究結果強調了詳細的神經心理學評估和長期恢復之必要性。</p>\n<h4 id=\"Acute-Necrotizing-Encephalopathy-of-Childhood-with-Novel-Influenza-A-swH1-Infection-A-Case-Report\"><a href=\"#Acute-Necrotizing-Encephalopathy-of-Childhood-with-Novel-Influenza-A-swH1-Infection-A-Case-Report\" class=\"headerlink\" title=\"Acute Necrotizing Encephalopathy of Childhood with Novel Influenza A (swH1) Infection : A Case Report\"></a>Acute Necrotizing Encephalopathy of Childhood with Novel Influenza A (swH1) Infection : A Case Report</h4><p>此病例報告為發表於童綜合醫學雜誌(2018，P.123-P.128)上的<a href=\"http://zh-tw.sltung.com.tw/uploadfiles/files/20190510_092057_4490.pdf\" target=\"_blank\" rel=\"noopener\">論文</a>，病患為4歲8個月的女童，發病前相當健康。其初始症狀為間歇性發燒與嘔吐表現，隨著發生<span style=\"color:red;\">抽搐與快速的意識喪失</span>，以及鼻腔檢體分離出豬流感病毒，腦部神經成像出現典型的兒童急性壞死性腦病特徵。此女童於醫療團隊積極使用Oseltamivir(克流感)，搭配immunoglobulin(免疫球蛋白)和methylprednisolone(類固醇)治療後存活下來。</p>\n<hr>\n<h3 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h3><p>這幾天看了些相關資訊與近一年內的文獻，除上述所提到的，還有<a href=\"https://jcpsp.pk/archive/2019/Jul2019/13.pdf\" target=\"_blank\" rel=\"noopener\">ANEC患者之臨床特徵</a>、<a href=\"https://journals.sagepub.com/doi/abs/10.1177/1535370219846497\" target=\"_blank\" rel=\"noopener\">發展小鼠急性腦病模型以釐清致病機制</a>以及針對成人ANE患者的相關研究，於前述臨床特徵的研究中甚至發現，抗病毒藥物搭配免疫調節治療並未改變疾病進程。看來，ANEC至今仍是缺乏有效的治療方法，但我相信醫學研究很快就會找到答案的。</p>\n","categories":["Study"],"tags":["ANEC","influenza"]},{"title":"南科自造基地研習Part 1","url":"/maker-space-workshop-part-1/","content":"<p>\b系統晶片應用―以無線心律檢測為例。<br><a id=\"more\"></a><br>Part 1於8/14 ~ 8/16在成大系統系館進行，講師為Prof. Shuenn-Yuh Lee。</p>\n<h3 id=\"研習內容大綱\"><a href=\"#研習內容大綱\" class=\"headerlink\" title=\"研習內容大綱\"></a>研習內容大綱</h3><p><br></p>\n<ul>\n<li>應用於智慧互動照護與監控系統之體外感測網路簡介</li>\n<li>應用於身體感測網路之低功率無線心電訊號擷取電路與系統<ul>\n<li>ZigBee\b\b\b無線心電訊號擷取系統晶片</li>\n<li>身體感測網路之低功率無線心電訊號擷取與分類系統</li>\n</ul>\n</li>\n<li>應用於神經調節之植入式身體感測網路</li>\n<li>應用於植入式身體感測網路之低功率雙向遙測裝置結合微型心臟起搏器</li>\n</ul>\n<hr>\n<h3 id=\"筆記\"><a href=\"#筆記\" class=\"headerlink\" title=\"筆記\"></a>筆記</h3><p><br></p>\n<ul>\n<li>IP-Based vs. Solution-Based</li>\n<li>遠距醫療照護服務的潛在市場與預期成長</li>\n<li>心肌於心搏週期中之極化、去極化、再極化</li>\n<li>心電圖(ECG)之P波、QRS波群和T波之簡易判讀</li>\n<li>從實驗室走向產品化所面臨的挑戰<ul>\n<li>居家照護系統</li>\n<li>裝置續航力―低功耗設計</li>\n<li>使用便利性―無線傳輸</li>\n<li>訊號解析度對診斷精確度之影響</li>\n<li>診斷結果對醫生與使用者之呈現</li>\n</ul>\n</li>\n<li>Wi-Fi/Bluetooth/ZigBee應用於穿戴式裝置無線傳輸之可行性評估</li>\n<li>無線生物訊號擷取SoC\b所整合之元件架構介紹<ul>\n<li>涉及過多電子學知識，個人認知無法消化…QQ</li>\n</ul>\n</li>\n<li>植入式微型電刺激器之應用<ul>\n<li>心臟起搏器</li>\n<li>人工耳蝸</li>\n<li>人工視網膜</li>\n<li>功能性神經肌肉電刺激器</li>\n<li>膀胱控制</li>\n<li>深層腦部電刺激</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"實作練習\"><a href=\"#實作練習\" class=\"headerlink\" title=\"實作練習\"></a>實作練習</h3><ul>\n<li>使用HSPICE進行電路模擬測試驗證</li>\n</ul>\n<p>\b＊HSPICE筆記</p>\n<ul>\n<li>以電晶體、二極體、電阻和電容等各種電子元件模型為基礎，經數值模擬分析計算出電路中各結點之電壓、電流</li>\n<li>主要提供直流穩態(DC)、暫態(TRAN)以及小信號頻率響應(AC)的模擬，使用者可依照所設計之電路自行編寫模擬分析等控制指令</li>\n<li>語法規則<ul>\n<li>指令檔(.sp)第一行預設不會執行，使用慣例為撰寫標題用</li>\n<li>英文字母大小寫無區分</li>\n<li>\b\b指令執行並無先後順序</li>\n<li>註解符號為 ‘*’(星號)</li>\n<li>指令檔需以 ‘.END’宣告結束</li>\n<li>引入元件庫 : .lib ‘filepath’ TT</li>\n<li>引入子電路 : .include ‘filepath’</li>\n<li>將引入元件庫指令放在.protect &amp; .unprotect之間，可於模擬時不顯示元件之製程參數</li>\n<li>宣告變數 : .param param_name = value</li>\n<li>呼叫元件―MOSFET : M11 n1 n2 n3 n4 N_18 W=10u L=1u m=2<ul>\n<li>M11的M代表MOSFET，11為自定義元件名稱，如同程式語言中的變數名稱</li>\n<li>MOSFET為四端元件，因此n1 ~ n4依序代表其D、G、S、B端點所連接的節點</li>\n<li>N_18表示呼叫元件庫中名稱為N_18的MOSFET元件</li>\n<li>W &amp; L參數為指定MOSFET元件之寬度與通道長度</li>\n<li>m = 2代表將兩個Ｍ11元件並聯，此為“抽象上的並聯”，也就是說呼叫這個MOSFET元件時，實際寬度為W x m，當所需的MOSFET寬度超出製程規定區間時，可適當地利用此參數來做調整</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">元件代號</th>\n<th style=\"text-align:center\">對應元件  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">V</td>\n<td style=\"text-align:center\">Voltage Source</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">I</td>\n<td style=\"text-align:center\">Current Source</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">R</td>\n<td style=\"text-align:center\">Resistor</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">L</td>\n<td style=\"text-align:center\">Inductor</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C</td>\n<td style=\"text-align:center\">Capacitor</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">M</td>\n<td style=\"text-align:center\">MOSFET</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">Sub-Circuit</td>\n</tr>\n</tbody>\n</table>\n<p>控制指令 :</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">指令</th>\n<th style=\"text-align:center\">作用  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">.AC</td>\n<td style=\"text-align:center\">交流分析(頻率響應)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.DC</td>\n<td style=\"text-align:center\">直流分析</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.OP</td>\n<td style=\"text-align:center\">靜態點分析</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.NOISE</td>\n<td style=\"text-align:center\">雜訊分析</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.TRAN</td>\n<td style=\"text-align:center\">暫態分析</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.SUBCKT</td>\n<td style=\"text-align:center\">定義子電路</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.ENDS</td>\n<td style=\"text-align:center\">子電路定義結束</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.OPTIONS</td>\n<td style=\"text-align:center\">設定參數及其他功能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.PRINT</td>\n<td style=\"text-align:center\">指定輸出內容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.PLOT</td>\n<td style=\"text-align:center\">視覺化輸出</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.TEMP</td>\n<td style=\"text-align:center\">指定模擬環境溫度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.END</td>\n<td style=\"text-align:center\">指令檔編寫結束</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h3><p><br><br>很幸運能參與自造基地這一系列的研習，關於Part 1的研習內容，雖然資工人沒學過電子學\b(我想我該找本電子學來研讀😅)，De Morgan’s laws也不大記得了😂，但知識不嫌多，聽在心裡想在腦子裡，總是有個概念。而李教授除了課程內容，也講了許多受用的觀念，特別是Solution-Based的概念令我相當有感，投入職場至今確實見到台廠普遍沒有系統整合的概念，撇開台積電那樣將晶圓代工做到極致的特例不談，即使我們有先進工業製程能生產各種精密機械與零組件，卻無法發揮其最大價值，因為我們習慣當打工仔，不負責兜出完整的終端產品。</p>\n<p>\b\b\b研習課程的最後由李老師所指導的優秀博士生助教帶大家使用HSPICE來模擬電路，雖然我不懂如何完整編寫出模擬電路，但資工人對於電腦語言總是有點Sense😎，理解語法規則後，也是看得懂每一行在做些什麼的，例如元件庫和子電路的概念，就如同程式語言中的函式庫及自訂函式。</p>\n<p>感謝Prof. Shuenn-Yuh Lee與助教們的用心講解，受益良多。</p>\n","categories":["Workshop"],"tags":["ecg","wireless","hspice"]},{"title":"以 MLP with Keras 進行手寫數字辨識測試","url":"/data-sci-ml-hello-world-mnist/","content":"<h2 id=\"Load-MNIST-Data-Set\"><a href=\"#Load-MNIST-Data-Set\" class=\"headerlink\" title=\"Load MNIST Data Set\"></a>Load MNIST Data Set</h2><a id=\"more\"></a>\n<p>載入60000筆訓練資料與10000筆測試資料。<br><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">(train_feature, train_label), (test_feature, test_label) = mnist.load_data()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Data-Preprocessing\"><a href=\"#Data-Preprocessing\" class=\"headerlink\" title=\"Data Preprocessing\"></a>Data Preprocessing</h2><p>\n\n</p><h3 id=\"Reshape\"><a href=\"#Reshape\" class=\"headerlink\" title=\"Reshape\"></a>Reshape</h3><p>將28x28特徵值Raw Data(圖片)轉換為32位元浮點數一維資料。<br><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">train_feature_vector = train_feature.reshape(len(train_feature), <span class=\"number\">784</span>).astype(<span class=\"string\">'float32'</span>)</span><br><span class=\"line\">test_feature_vector = test_feature.reshape(len(test_feature), <span class=\"number\">784</span>).astype(<span class=\"string\">'float32'</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Feature-Normalization\"><a href=\"#Feature-Normalization\" class=\"headerlink\" title=\"Feature Normalization\"></a>Feature Normalization</h3><p>對特徵值進行正規化處理，也就是將數據按比例縮放至[0, 1]區間，且不改變其原本分佈，以提升模型的訓練收斂速度與預測精準度。<br><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">train_feature_normal = train_feature_vector / <span class=\"number\">255</span></span><br><span class=\"line\">test_feature_normal = test_feature_vector / <span class=\"number\">255</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"One-Hot-Encoding\"><a href=\"#One-Hot-Encoding\" class=\"headerlink\" title=\"One-Hot Encoding\"></a>One-Hot Encoding</h3><p>對離散型資料標籤進行獨熱編碼處理轉換為布林陣列，以進行矩陣運算。<br><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">train_label_onehot = np_utils.to_categorical(train_label)</span><br><span class=\"line\">test_label_onehot = np_utils.to_categorical(test_label)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Model-Definition\"><a href=\"#Model-Definition\" class=\"headerlink\" title=\"Model Definition\"></a>Model Definition</h2><p>定義循序(線性)模型之結構、訓練方法、準確率評估<br><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">model = Sequential()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Layer-Definition\"><a href=\"#Layer-Definition\" class=\"headerlink\" title=\"Layer Definition\"></a>Layer Definition</h3><p>定義輸入層、隱藏層、輸出層 :</p>\n<ul>\n<li>神經元個數 : 784 -&gt; 256 -&gt; 10</li>\n<li>常態分佈亂數初始化權重＆偏權值</li>\n<li>活化函數採用 Relu &amp; Softmax</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">model.add( Dense(units=<span class=\"number\">256</span>, input_dim=<span class=\"number\">784</span>, init=<span class=\"string\">'normal'</span>, activation=<span class=\"string\">'relu'</span>) )</span><br><span class=\"line\">model.add( Dense(units=<span class=\"number\">10</span>, init=<span class=\"string\">'normal'</span>, activation=<span class=\"string\">'softmax'</span>) )</span><br></pre></td></tr></table></figure>\n<h3 id=\"Training-Definition\"><a href=\"#Training-Definition\" class=\"headerlink\" title=\"Training Definition\"></a>Training Definition</h3><p>定義訓練方法 : </p>\n<ul>\n<li>損失函數採用 Cross Entropy</li>\n<li>優化器採用 Adam</li>\n<li>驗證資料分割比例為0.2(將6萬筆訓練資料進一步分割為4.8萬訓練用資料以及1.2萬驗證用資料)</li>\n<li>訓練週期(epoch)為10</li>\n<li>每批次樣本數為200(因此一個完整的訓練週期為4.8萬/200=240批次)</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">model.compile(loss=<span class=\"string\">'categorical_crossentropy'</span>, optimizer=<span class=\"string\">'adam'</span>, metrics=[<span class=\"string\">'accuracy'</span>])</span><br><span class=\"line\">model.fit(x=train_feature_normal, y=train_label_onehot, validation_split=<span class=\"number\">0.2</span>, epochs=<span class=\"number\">10</span>, batch_size=<span class=\"number\">200</span>, verbose=<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Accuracy-Evaluation\"><a href=\"#Accuracy-Evaluation\" class=\"headerlink\" title=\"Accuracy Evaluation\"></a>Accuracy Evaluation</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">accuracy = model.evaluate(test_feature_normal, test_label_onehot)</span><br><span class=\"line\">print(<span class=\"string\">'\\n[Accuracy] = '</span>, accuracy[<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"Save-amp-Load-Model\"><a href=\"#Save-amp-Load-Model\" class=\"headerlink\" title=\"Save &amp; Load Model\"></a>Save &amp; Load Model</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># save</span></span><br><span class=\"line\">model.save(<span class=\"string\">\"mdl_mlp_mnist.h5\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># load</span></span><br><span class=\"line\">model = load_model(<span class=\"string\">\"mdl_mlp_mnist.h5\"</span>)</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Full-Code\"><a href=\"#Full-Code\" class=\"headerlink\" title=\"Full Code\"></a>Full Code</h2><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> keras.utils <span class=\"keyword\">import</span> np_utils</span><br><span class=\"line\"><span class=\"keyword\">from</span> keras.datasets <span class=\"keyword\">import</span> mnist</span><br><span class=\"line\"><span class=\"keyword\">from</span> keras.models <span class=\"keyword\">import</span> Sequential</span><br><span class=\"line\"><span class=\"keyword\">from</span> keras.layers <span class=\"keyword\">import</span> Dense</span><br><span class=\"line\"><span class=\"keyword\">from</span> keras.models <span class=\"keyword\">import</span> load_model</span><br><span class=\"line\">np.random.seed(<span class=\"number\">1234</span>)  <span class=\"comment\"># for reproducibility</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">showPredict</span><span class=\"params\">(imgs, lbls, predictions)</span>:</span></span><br><span class=\"line\">    plt.gcf().set_size_inches(<span class=\"number\">10</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">        fig = plt.subplot(<span class=\"number\">2</span>, <span class=\"number\">5</span>, i + <span class=\"number\">1</span>)</span><br><span class=\"line\">        fig.imshow(imgs[i], cmap=<span class=\"string\">'binary'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        title = <span class=\"string\">'prediction = '</span> + str(predictions[i])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> predictions[i] != lbls[i]:</span><br><span class=\"line\">            title += <span class=\"string\">'(X)'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        title += <span class=\"string\">'\\nlabel = '</span> + str(lbls[i])</span><br><span class=\"line\">        fig.set_title(title, fontsize=<span class=\"number\">10</span>)</span><br><span class=\"line\">        fig.set_xticks([])</span><br><span class=\"line\">        fig.set_yticks([])</span><br><span class=\"line\">    </span><br><span class=\"line\">    plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mdlTrain</span><span class=\"params\">(train_feature, train_label, test_feature, test_label)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># model definition</span></span><br><span class=\"line\">    model = Sequential()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># input:784, hidden:256, output:10</span></span><br><span class=\"line\">    model.add( Dense(units=<span class=\"number\">256</span>, input_dim=<span class=\"number\">784</span>, init=<span class=\"string\">'normal'</span>, activation=<span class=\"string\">'relu'</span>) )</span><br><span class=\"line\">    model.add( Dense(units=<span class=\"number\">10</span>, init=<span class=\"string\">'normal'</span>, activation=<span class=\"string\">'softmax'</span>) )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># training definition</span></span><br><span class=\"line\">    model.compile(loss=<span class=\"string\">'categorical_crossentropy'</span>, optimizer=<span class=\"string\">'adam'</span>, metrics=[<span class=\"string\">'accuracy'</span>])</span><br><span class=\"line\">    model.fit(x=train_feature, y=train_label, validation_split=<span class=\"number\">0.2</span>, epochs=<span class=\"number\">10</span>, batch_size=<span class=\"number\">200</span>, verbose=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># accuracy evaluation</span></span><br><span class=\"line\">    accuracy = model.evaluate(test_feature, test_label)</span><br><span class=\"line\">    print(<span class=\"string\">'\\n[Accuracy] = '</span>, accuracy[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> model</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># load mnist data</span></span><br><span class=\"line\">(train_feature, train_label), (test_feature, test_label) = mnist.load_data()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># data preprocessing</span></span><br><span class=\"line\"><span class=\"comment\"># reshape</span></span><br><span class=\"line\">train_feature_vector = train_feature.reshape(len(train_feature), <span class=\"number\">784</span>).astype(<span class=\"string\">'float32'</span>)</span><br><span class=\"line\">test_feature_vector = test_feature.reshape(len(test_feature), <span class=\"number\">784</span>).astype(<span class=\"string\">'float32'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># feature normalization </span></span><br><span class=\"line\">train_feature_normal = train_feature_vector / <span class=\"number\">255</span></span><br><span class=\"line\">test_feature_normal = test_feature_vector / <span class=\"number\">255</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># one-hot encoding</span></span><br><span class=\"line\">train_label_onehot = np_utils.to_categorical(train_label)</span><br><span class=\"line\">test_label_onehot = np_utils.to_categorical(test_label)</span><br><span class=\"line\"></span><br><span class=\"line\">action = input(<span class=\"string\">\"1: Model Testing\\n2: Model Training\\n\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> action == <span class=\"string\">\"1\"</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"Load mdl_mlp_mnist.h5\"</span>)</span><br><span class=\"line\">    model = load_model(<span class=\"string\">\"mdl_mlp_mnist.h5\"</span>)</span><br><span class=\"line\">    prediction = model.predict_classes(test_feature_normal)</span><br><span class=\"line\">    showPredict(test_feature, test_label, prediction)</span><br><span class=\"line\">    <span class=\"keyword\">del</span> model</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"===== Start training =====\"</span>)</span><br><span class=\"line\">    model = mdlTrain(train_feature_normal, train_label_onehot, test_feature_normal, test_label_onehot)</span><br><span class=\"line\">    model.save(<span class=\"string\">\"mdl_mlp_mnist.h5\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"===== Model has been saved =====\"</span>)</span><br><span class=\"line\">    prediction = model.predict_classes(test_feature_normal)</span><br><span class=\"line\">    showPredict(test_feature, test_label, prediction)</span><br><span class=\"line\">    <span class=\"keyword\">del</span> model</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/IPC8oCO.png\" alt=\"IPC8oCO.png\"><br><img src=\"https://i.imgur.com/qCt4QIA.png\" alt=\"qCt4QIA.png\"></p>\n<hr>\n<h2 id=\"Test-Your-Own-Handwritten-Numbers-Image\"><a href=\"#Test-Your-Own-Handwritten-Numbers-Image\" class=\"headerlink\" title=\"Test Your Own Handwritten Numbers Image\"></a>Test Your Own Handwritten Numbers Image</h2><p>為了讓訓練好的模型預測看看資料集以外的圖片，我用FireAlpaca\b「手寫」了10張28x28的數字圖片😆，並將圖片命名為「真實數字_圖片順序編碼.jpg」這樣的格式，例如「8_image2.jpg」代表這張圖片為我製作的第2張圖片，內容為數字8，這樣的命名規則是為了方便讀取圖片時能從檔名擷取其label。</p>\n<h3 id=\"import-blob-amp-opencv\"><a href=\"#import-blob-amp-opencv\" class=\"headerlink\" title=\"import blob &amp; opencv\"></a>import blob &amp; opencv</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> glob <span class=\"keyword\">import</span> glob</span><br><span class=\"line\"><span class=\"keyword\">from</span> cv2 <span class=\"keyword\">import</span> cv2 <span class=\"keyword\">as</span> cv</span><br></pre></td></tr></table></figure>\n<p>P.S. 在VS Code中若只寫「import cv2」的話會報錯…</p>\n<h3 id=\"data-preprocessing\"><a href=\"#data-preprocessing\" class=\"headerlink\" title=\"data preprocessing\"></a>data preprocessing</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_test_process</span><span class=\"params\">(files)</span>:</span></span><br><span class=\"line\">    test_image = []</span><br><span class=\"line\">    test_label = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        label = int(file[<span class=\"number\">0</span>:<span class=\"number\">1</span>])  <span class=\"comment\"># get label from file name</span></span><br><span class=\"line\">        image = cv.imread(file, cv.IMREAD_GRAYSCALE)  <span class=\"comment\"># read image as grayscale</span></span><br><span class=\"line\">        <span class=\"comment\"># retval, dst = cv.threshold(src, thresh, maxval, type[,dst])</span></span><br><span class=\"line\">        image = cv.threshold(image, <span class=\"number\">120</span>, <span class=\"number\">255</span>, cv.THRESH_BINARY_INV)[<span class=\"number\">1</span>]  <span class=\"comment\"># binary invert</span></span><br><span class=\"line\">        test_image.append(image)</span><br><span class=\"line\">        test_label.append(label)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># list -&gt; numpy.array</span></span><br><span class=\"line\">    test_image = np.array(test_image)</span><br><span class=\"line\">    test_label = np.array(test_label)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># reshape(flatten) &amp; normalization</span></span><br><span class=\"line\">    test_image_normal = test_image.reshape(len(test_image), <span class=\"number\">784</span>).astype(<span class=\"string\">'float32'</span>) / <span class=\"number\">255</span></span><br><span class=\"line\">    <span class=\"comment\"># one-hot encoding</span></span><br><span class=\"line\">    test_label_onehot = np_utils.to_categorical(test_label)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (test_image, test_label), (test_image_normal, test_label_onehot)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Prediction\"><a href=\"#Prediction\" class=\"headerlink\" title=\"Prediction\"></a>Prediction</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">model = load_model(<span class=\"string\">\"mdl_mlp_mnist.h5\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"=== Load mdl_mlp_mnist.h5 ===\"</span>)</span><br><span class=\"line\">files = glob(<span class=\"string\">'*.jpg'</span>)  <span class=\"comment\"># find all images (path)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># data preprocessing</span></span><br><span class=\"line\">(test_image, test_label), (test_image_normal, test_label_onehot) = get_test_process(files)</span><br><span class=\"line\"></span><br><span class=\"line\">prediction = model.predict_classes(test_image_normal)</span><br><span class=\"line\">showPredict(test_image, test_label, prediction)</span><br><span class=\"line\"><span class=\"keyword\">del</span> model</span><br></pre></td></tr></table></figure>\n<h3 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h3><p>哎呀，其中一張數字8的圖片預測錯誤😂<br><img src=\"https://i.imgur.com/1eJE60d.png\" alt=\"1eJE60d.png\"></p>\n<p>跟資料集的圖片比較起來，我的手寫圖片經過影像處理完，筆跡變得超細，所以特徵相對不那麼明顯吧，把原圖多點幾個像素上去再預測一次就過了呢。<br><img src=\"https://i.imgur.com/0MsDeaK.png\" alt=\"0MsDeaK.png\"></p>\n<hr>\n<p>＊測試程式指定隨機亂數種子是為了<a href=\"https://keras.io/zh/getting-started/faq/#how-can-i-obtain-reproducible-results-using-keras-during-development\" target=\"_blank\" rel=\"noopener\">再現性</a></p>\n<p>＊下載 MNIST 資料集時若發生 <a href=\"https://stackoverflow.com/questions/41691327/ssl-sslerror-ssl-certificate-verify-failed-certificate-verify-failed-ssl-c/41692664?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa\" target=\"_blank\" rel=\"noopener\">ssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed</a>，在\b Terminal 執行以下命令 :<br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">/Applications/Python\\ 3.6/Install\\ Certificates.command</span><br></pre></td></tr></table></figure></p>\n<p>📄<a href=\"https://keras.io/zh/\" target=\"_blank\" rel=\"noopener\">Keras中文說明文件</a></p>\n","categories":["Data Science"],"tags":["keras","mnist","machine learning"]},{"title":"使用 Selenium 模組控制瀏覽器","url":"/data-sci-use-selenium-with-chrome-driver/","content":"<p>自從開發環境轉移到 Mac OS 後，倒是沒有在這環境下測試用 Selenium 去控制瀏覽器，不過我並不想控制 Safari ，因為它不是一個跨平台的瀏覽器。<br><a id=\"more\"></a><br>第一次使用 Selenium 是學習 Web Crawler 的過程中發現，在瀏覽器中可見的物件並不代表一定爬得到(初心者😗)，於是我了解到那些自己抓不到的數據是由 JavaScript 所動態產生的，因為我向目標伺服器所發出的 request 只能取得靜態的數據，若要進行進階的動態網頁資料擷取，那麼我就必須學習如何用程式碼去控制瀏覽器。</p>\n<hr>\n<h2 id=\"Install-Selenium\"><a href=\"#Install-Selenium\" class=\"headerlink\" title=\"Install Selenium\"></a>Install Selenium</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ pip3 install selenium</span><br></pre></td></tr></table></figure>\n<h2 id=\"Download-Chrome-Driver\"><a href=\"#Download-Chrome-Driver\" class=\"headerlink\" title=\"Download Chrome Driver\"></a>Download Chrome Driver</h2><p>要讓 Selenium 能夠控制 Chrome 瀏覽器，需要<span style=\"color:red;\">對應版本</span>的 <a href=\"https://chromedriver.storage.googleapis.com/index.html\" target=\"_blank\" rel=\"noopener\">ChromeDriver</a>，例如我的 Chrome 為目前的最新版本 76.0.3809.100，那麼我就下載 ver.76 最新的 76.0.3809.68 版本 ChromeDriver，然後把 ChromeDriver 放在適當的路徑下，以便在程式中呼叫。</p>\n<h2 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h2><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># coding:utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.chrome.options <span class=\"keyword\">import</span> Options</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getChrome</span><span class=\"params\">(show=False)</span>:</span>  <span class=\"comment\"># return chrome handler</span></span><br><span class=\"line\">    WINDOW_SIZE = <span class=\"string\">\"1366, 768\"</span>  <span class=\"comment\"># screen size</span></span><br><span class=\"line\">    CHROMEDRIVER_PATH = <span class=\"string\">r\"/Users/nick/Downloads/chromedriver\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    options = Options()  <span class=\"comment\"># config</span></span><br><span class=\"line\">    options.add_argument(<span class=\"string\">\"log-level=3\"</span>)  <span class=\"comment\"># shut the logging</span></span><br><span class=\"line\">    options.add_argument(<span class=\"string\">\"--window-size=%s\"</span> % WINDOW_SIZE)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> show: options.add_argument(<span class=\"string\">\"--headless\"</span>)  <span class=\"comment\"># headless mode</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> webdriver.Chrome(CHROMEDRIVER_PATH, chrome_options=options)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">chrome = getChrome()</span><br><span class=\"line\">chrome.get(<span class=\"string\">\"https://laplacetw.github.io/categories/\"</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">chrome.save_screenshot(<span class=\"string\">\"screenshot.png\"</span>)</span><br><span class=\"line\">chrome.quit()</span><br></pre></td></tr></table></figure>\n<p>測試程式若順利執行的話，在檔案目錄下應該會發現多了個執行畫面的截圖 :<br><img src=\"https://i.imgur.com/5qmRipW.png\" alt=\"5qmRipW.png\"></p>\n<p>getChrome()預設會用 headless 模式啟動 Chrome，若想顯示使用者介面的話可以將 “show” 這個參數設為 True，如此便能看到自動化執行 Chrome 的過程。但實際應用的情況下非必要就別啟動圖形介面了，執行速度會快很多的😎</p>\n","categories":["Data Science"],"tags":["python","web crawler","selenium","chromedriver"]},{"title":"關於 SharePoint REST API","url":"/sharepoint-rest-api/","content":"<p>這是一段關於沒有伺服器權限的開發者\b於 SharePoint 進行網站開發的恐怖故事。<br><a id=\"more\"></a><br>這段故事實在是太可怕了，伺服器權限在資訊單位手裡，而完全不懂 SharePoint 也不會 .NET 的我只有使用者權限帳號(黑人問號.jpg)，看著一點幫助都沒有的 training kit 文件，我必須想辦法把它寫成一個入口網站…</p>\n<p>經過摸索研究最終想出了解決方法，我自製母版定義了導航列與頁腳，並利用內容編輯器這個 Web Part 在每個頁面「填入」我要的 HTML 內容，但不得不放棄內建的其他 Web Part，因為我根本無法完全控制那些頑固的東西，它們讓整個頁面佈局看起來相當糟糕!!!</p>\n<p>但如此我便擁有整個頁面內容的控制權了，前端頁面佈局樣式就交給 Bootstrap 去搞定啦，而後端就只能依賴 SharePoint REST API 去處理 CRUD。</p>\n<p>雖然很荒謬但我還是硬著頭皮上了，最後寫了個多功能的 SharePoint 企業內網 :</p>\n<ul>\n<li>公告</li>\n<li>行事曆(支援批次匯入事件)</li>\n<li>會議室預約</li>\n<li>工時追蹤填報(支援統計圖表)</li>\n<li>出勤狀況發佈(系統通知信)</li>\n<li>討論區</li>\n<li>Smart Chat Bot(答覆公司系統與網站相關問題)</li>\n</ul>\n<p>這任務至此告一段落了，紀錄一下 SharePoint REST API 如何使用 : </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> api_create = <span class=\"string\">\"https://server/site/_api/web/lists('&#123; your_list_guid &#125;')/items\"</span>,</span><br><span class=\"line\">    api_read = <span class=\"string\">\"https://server/site/_api/web/lists('&#123; your_list_guid &#125;')/items( &#123; your_list_item_id &#125; )\"</span>,</span><br><span class=\"line\">    api_update = <span class=\"string\">\"https://server/site/_api/web/lists('&#123; your_list_guid &#125;')/items( &#123; your_list_item_id &#125; )\"</span>,</span><br><span class=\"line\">    api_delete = <span class=\"string\">\"https://server/_api/web/lists('&#123; your_list_guid &#125;')/items( &#123; your_list_item_id &#125; )\"</span>,</span><br><span class=\"line\">    data =&#123;</span><br><span class=\"line\">        __metadata: &#123; <span class=\"string\">'type'</span>: <span class=\"string\">'SP.Data.&#123; your_list_item_entity_type_fullname &#125;'</span> &#125;,</span><br><span class=\"line\">        &#123; list_column_name &#125; : &#123; value &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sp_create</span>(<span class=\"params\">api_create</span>)</span>&#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url: api_create,</span><br><span class=\"line\">        method: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">        data: <span class=\"built_in\">JSON</span>.stringify(data),</span><br><span class=\"line\">        contentType: <span class=\"string\">\"application/json; odata=verbose\"</span>,</span><br><span class=\"line\">        headers:&#123;</span><br><span class=\"line\">            <span class=\"string\">\"Accept\"</span>: <span class=\"string\">\"application/json; odata=verbose\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"X-RequestDigest\"</span>: $(<span class=\"string\">\"#__REQUESTDIGEST\"</span>).val()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> data = res.d; <span class=\"comment\">// the data you create</span></span><br><span class=\"line\">            <span class=\"comment\">// do something</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(error));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sp_read</span>(<span class=\"params\">api_read</span>)</span>&#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url: api_read,</span><br><span class=\"line\">        type: <span class=\"string\">\"GET\"</span>,</span><br><span class=\"line\">        headers: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"accept\"</span>:<span class=\"string\">\"application/json; odata=verbose\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> data = res.d; <span class=\"comment\">// the data you read</span></span><br><span class=\"line\">            <span class=\"comment\">// do something</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(error));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sp_update</span>(<span class=\"params\">api_update</span>)</span>&#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url: api_update,</span><br><span class=\"line\">        method: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">        data: <span class=\"built_in\">JSON</span>.stringify(data),</span><br><span class=\"line\">        contentType: <span class=\"string\">\"application/json; odata=verbose\"</span>,</span><br><span class=\"line\">        headers: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"Accept\"</span>: <span class=\"string\">\"application/json;odata=verbose\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"X-RequestDigest\"</span>: $(<span class=\"string\">\"#__REQUESTDIGEST\"</span>).val(),</span><br><span class=\"line\">            <span class=\"string\">\"IF-MATCH\"</span>: <span class=\"string\">\"*\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"X-Http-Method\"</span>: <span class=\"string\">\"MERGE\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> data = res.d; <span class=\"comment\">// the data you update</span></span><br><span class=\"line\">            <span class=\"comment\">// do something</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(error));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sp_delete</span>(<span class=\"params\">api_delete</span>)</span>&#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url: api,</span><br><span class=\"line\">        method: <span class=\"string\">'DELETE'</span>,</span><br><span class=\"line\">        headers: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"Accept\"</span>: <span class=\"string\">\"application/json;odata=verbose\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"X-RequestDigest\"</span>: $(<span class=\"string\">\"#__REQUESTDIGEST\"</span>).val(),</span><br><span class=\"line\">            <span class=\"string\">\"IF-MATCH\"</span>: <span class=\"string\">\"*\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// do something</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(error));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/* filter &amp; select &amp; order(asc / desc)</span></span><br><span class=\"line\"><span class=\"comment\">\"https://server/_api/web/lists('&#123; your_list_guid &#125;')/items?$filter=&#123; list_column_name &#125; eq &#123; keyword &#125;&amp;$select=ID,AuthorId,Created,...&amp;$orderby=&#123; list_column_name &#125; desc\"</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>特別留意 SharePoint REST API 返回的資料筆數預設值是100筆，這在我寫的會議室預約功能所依賴的資料庫筆數超過100之後，因為使用者反應預約完成的會議卻沒有顯示在頁面上而發現。此問題只要在 API 裡頭加上一個 “TOP”參數並指定返回的資料筆數即可解決，例如「TOP=5000」，而 API 能返回的最大值為5000筆。如果需要返回更多筆資料，印象中看過網路上相關討論，但我用在查詢會議室預約這樣有時效性的資料，估計5000筆已經綽綽有餘了XDD</p>\n","categories":["SharePoint"],"tags":["web","sharepoint"]},{"title":"第一次吃樹莓派","url":"/rspi-meet-raspberry-pi-b3-plus/","content":"<p>\b\b\b\b樹莓派3B+初始化安裝。<br><a id=\"more\"></a></p>\n<p><img src=\"https://i.imgur.com/wIdoqQ8.jpg\" alt><br><img src=\"https://i.imgur.com/Dec2LcF.jpg\" alt></p>\n<h3 id=\"Operation-System\"><a href=\"#Operation-System\" class=\"headerlink\" title=\"\b\bOperation System\"></a>\b\bOperation System</h3><p>參考了<a href=\"http://blog.itist.tw/2016/12/34-best-operating-systems-for-raspberry-pi.html\" target=\"_blank\" rel=\"noopener\">IT技術家</a>所整理的作業系統清單，我決定直接安裝官方發行的Raspbian OS。</p>\n<ul>\n<li><a href=\"https://www.raspberrypi.org/downloads/raspbian/\" target=\"_blank\" rel=\"noopener\">Raspbian載點</a></li>\n<li><a href=\"https://www.raspberrypi.org/documentation/installation/installing-images/README.md\" target=\"_blank\" rel=\"noopener\">Raspbian安裝指南</a></li>\n<li><a href=\"https://www.raspberrypi.com.tw/20004/faq-how-to-update-and-upgrade-raspbian/\" target=\"_blank\" rel=\"noopener\">更新Raspbian</a></li>\n</ul>\n<p>由於Raspberry Pi是以SD Card\b\b來當硬碟(<a href=\"https://www.raspberrypi.org/documentation/installation/sd-cards.md\" target=\"_blank\" rel=\"noopener\">官方說明</a>)，網路上大多建議儲存容量至少8G、寫入速度class 10，加上系統更新考量，於是我準備了一張儲存容量16G、寫入速度class 10的SD Card\b來當系統儲存空間，以及一支隨身碟來當資料儲存空間。不過官方有特別強調，較高的寫入速度並非記憶卡性能的唯一標準，因為寫入速度通常是藉由犧牲讀取速度和尋軌效能而提升的。</p>\n<blockquote>\n<p>The card class determines the sustained write speed for the card; a class 4 card will be able to write at 4MB/s, whereas a class 10 should be able to attain 10 MB/s. However, it should be noted that this does not mean a class 10 card will outperform a class 4 card for general usage, because often this write speed is achieved at the cost of read speed and increased seek times.</p>\n</blockquote>\n<p>Raspbian鏡像檔目前有3種版本:</p>\n<ul>\n<li>Raspbian Stretch with desktop and recommended software</li>\n<li>Raspbian Stretch with desktop</li>\n<li>Raspbian Stretch Lite<br><img src=\"https://i.imgur.com/c8sOf6D.png\" alt></li>\n</ul>\n<p>Raspberry Pi安裝作業系統有許多方式，直接刷進去SD Card應該是最簡單的方式，官方推薦<a href=\"https://www.balena.io/etcher/\" target=\"_blank\" rel=\"noopener\">Etcher</a>燒錄工具。<br><img src=\"https://i.imgur.com/lr2zQQi.png\" alt></p>\n<h3 id=\"Connect-to-Wi-Fi-Networks\"><a href=\"#Connect-to-Wi-Fi-Networks\" class=\"headerlink\" title=\"Connect to Wi-Fi Networks\"></a>Connect to Wi-Fi Networks</h3><p>將作業系統刷進SD Card後，讓電腦重新讀取記憶卡，在根目錄下建立wpa_supplicant.conf，寫入網路連線參數，可寫入多筆。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">country=TW</span><br><span class=\"line\">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class=\"line\">update_config=1</span><br><span class=\"line\">network=&#123;</span><br><span class=\"line\">    priority=9</span><br><span class=\"line\">    ssid=&quot;&#123;SSID&#125;&quot;</span><br><span class=\"line\">    psk=&quot;&#123;Password&#125;&quot;</span><br><span class=\"line\">    key_mgmt=WPA-PSK</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>P.S. 優先度Priority數字越大，優先度越高。</p>\n<h3 id=\"Remote\"><a href=\"#Remote\" class=\"headerlink\" title=\"Remote\"></a>Remote</h3><p></p><p><br>SSH連線預設為關閉狀態，如同無線網路設定，在根目錄下建立名稱為’ssh’的檔案即可強制啟用SSH連線。<br><img src=\"https://i.imgur.com/5X2bahA.png\" alt></p>\n<p>我忘了在網路連線設定country參數，所以連線時系統有提醒可以進config設定。<br><img src=\"https://i.imgur.com/QI8vFEc.png\" alt></p>\n<h4 id=\"在Raspberry-Pi安裝VNC-Remote-Server\"><a href=\"#在Raspberry-Pi安裝VNC-Remote-Server\" class=\"headerlink\" title=\"在Raspberry Pi安裝VNC Remote Server\"></a>在Raspberry Pi安裝VNC Remote Server</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install tightvncserver -y</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vncserver  <span class=\"comment\"># run server</span></span></span><br></pre></td></tr></table></figure>\n<p>首次遠端桌面連線時，系統會要求設置連線密碼。<br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ vncserver</span><br><span class=\"line\">You will require a password to access your desktops.</span><br><span class=\"line\"></span><br><span class=\"line\">Password: </span><br><span class=\"line\">Warning: password truncated to the length of 8.</span><br><span class=\"line\">Verify:   </span><br><span class=\"line\">Would you like to enter a view-only password (y/n)? n</span><br><span class=\"line\"></span><br><span class=\"line\">New 'X' desktop is raspberrypi:1</span><br><span class=\"line\"></span><br><span class=\"line\">Creating default startup script /home/pi/.vnc/xstartup</span><br><span class=\"line\">Starting applications specified in /home/pi/.vnc/xstartup</span><br><span class=\"line\">Log file is /home/pi/.vnc/raspberrypi:1.log</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"在Google-Chrome安裝VNC-Viewer擴充程式\"><a href=\"#在Google-Chrome安裝VNC-Viewer擴充程式\" class=\"headerlink\" title=\"在Google Chrome安裝VNC Viewer擴充程式\"></a>在Google Chrome安裝VNC Viewer擴充程式</h4><p>*<a href=\"https://chrome.google.com/webstore/iabmpiboiopbgfabjmgeedhcmjenhbla\" target=\"_blank\" rel=\"noopener\">VNC Viewer for Google Chrome</a><br>\b\b\b\b\b\b<img src=\"https://i.imgur.com/mKcoeaT.png\" alt></p>\n<p>連線Address需指定VNC Server Port，連接阜編碼規則為5900+Display編號。<br>e.g. 192.168.0.2:5901<br><img src=\"https://i.imgur.com/fnD2RQc.png\" alt><br><img src=\"https://i.imgur.com/dYVH37J.png\" alt></p>\n<h3 id=\"Shutdown\"><a href=\"#Shutdown\" class=\"headerlink\" title=\"Shutdown\"></a>Shutdown</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo shutdown -h now</span></span><br></pre></td></tr></table></figure>","categories":["Raspberry Pi"],"tags":["linux","raspberry pi"]},{"title":"QArt Coder:客製化QR Code產生器","url":"/create-qrcode-with-image-by-qart-coder/","content":"<p><del>這是一款真正的</del>影像合成QR Code產生器😎<a id=\"more\"></a></p>\n<p>無意間看到<a href=\"https://www.playpcesor.com/2019/03/qart-coder-qr-code-logo.html\" target=\"_blank\" rel=\"noopener\">電腦玩物的Esor大</a>分享一個很特別的<a href=\"https://research.swtch.com/qr/draw\" target=\"_blank\" rel=\"noopener\">QArt Coder</a>，於是我滿心期待地跑去試用，之前用過的QR Code產生器都是很直白地在QR Code正中央呈現一個縮圖，但這個QArt Coder是將影像用點陣圖的方式呈現～跟QR Code漂亮地結合在一起！</p>\n<p>這個線上工具介面並不複雜，圖片上傳後微調一下，接著點選Save this QR Code，頁面就會產生3種尺寸的QR Code讓人下載<br><img src=\"https://i.imgur.com/Z1UITpy.png\" alt></p>\n<p>但下載的時候有點問題，所以我才寫了這篇XD 直接右鍵儲存影像的話，會發現下載了一個.html檔，在新分頁開啟影像或者下載得到的.html檔都是呈現亂碼的狀態(<del>黃捷式</del>白眼<br><img src=\"https://i.imgur.com/MZ0yKBM.png\" alt></p>\n<p>只好檢查一下網頁原始碼，什麼在新標籤頁打開還是直接拷貝都是不起作用的，對著這張圖片的網頁元件按下<strong>擷取螢幕快照</strong>，就可以成功下載這些QR Code了，但上述是在Mac OS下的操作，我也挺好奇Win OS是否也有個相同狀況XD<br><img src=\"https://i.imgur.com/AN5xk3Q.png\" alt></p>\n","categories":["Tools"],"tags":["qr code"]},{"title":"Mac Safari網頁檢閱器顯示位置","url":"/mac-safari-show-web-inspector/","content":"<p>這東西竟然困擾我兩天，我只記得在Safari檢視網頁原始碼的時候，意外點了某個按鈕，然後它就變成獨立視窗了、然後它就變成獨立視窗了、然後它就變成獨立視窗了…<a id=\"more\"></a>於是我開始把Safari的選單找了一遍又一遍，然後中文關鍵字搜尋只能告訴你該如何在Safari上面叫出這個網頁檢閱器🙄🙄🙄</p>\n<p>最後終於讓我發現，有個國外的老兄在網路上問了<a href=\"https://macmost.com/forum/how-do-i-make-the-web-inspector-appear-in-the-bottom-half-of-my-browser-window.html\" target=\"_blank\" rel=\"noopener\">How Do I Make the Web Inspector Appear In the Bottom Half Of My Browser Window?</a>這樣的問題，我的老天鵝呀，感恩網路！讚嘆網路！</p>\n<p>原來我誤觸的按鈕，會讓網頁檢閱器顯示為獨立視窗<br><img src=\"https://i.imgur.com/EfnEXsd.png\" alt></p>\n<p>按下置於視窗底部的按鈕就回到Safari的底部啦！<br><img src=\"https://i.imgur.com/lrdRwJV.png\" alt></p>\n<p>因為這按鈕在<span style=\"color:red;\">全螢幕模式下不可見</span>，所以我才一直沒注意到這按鈕(傻眼)</p>\n","categories":["Mac"],"tags":["mac","safari"]},{"title":"Google App Script ＋ Spread Sheet = 微後端","url":"/google-app-script-and-spreadsheet/","content":"<p>若想以Google表單來做一個簡易的daily time tracking，提交一次表單就是一筆數據，但每天的時間總是會適當地分配，如此就得重複填寫並送出表單…這真是一個不聰明的方法，若自己寫個網頁表單，request又被瀏覽器同源政策擋下來…就試著用App Script來解決這件事吧，我也沒寫過呢。<a id=\"more\"></a></p>\n<h3 id=\"Create\"><a href=\"#Create\" class=\"headerlink\" title=\"Create\"></a>Create</h3><p><a href=\"https://developers.google.com/apps-script/guides/web\" target=\"_blank\" rel=\"noopener\">Google App Script Doc : Web Apps</a></p>\n<blockquote>\n<h4 id=\"Requirements-for-web-apps\"><a href=\"#Requirements-for-web-apps\" class=\"headerlink\" title=\"Requirements for web apps \"></a>Requirements for web apps <p></p></h4><p>A script can be published as a web app if it meets these requirements:</p>\n<p>-It contains a doGet(e) or doPost(e) function.<br>-The function returns an HTML service HtmlOutput object or a Content service TextOutput object.</p>\n</blockquote>\n<p>首先建立Google雲端試算表和App Script，複製試算表網址“docs.google.com/spreadsheets/d/{Sheet ID}/edit#gid=0”當中的{Sheet ID}，寫App Script的時候會需要這部分的資訊。</p>\n<p></p><p><br><img src=\"https://i.imgur.com/UiGda9u.png\" alt></p>\n<p>若找不到App Script，點選連結更多應用程式，過濾Google的應用程式就能看到了，然後就將它連結至個人的雲端硬碟。<br><img src=\"https://i.imgur.com/4BsYTfE.png\" alt></p>\n<p>建好表格欄位後就可以來寫App Script了<br><img src=\"https://i.imgur.com/NUIlhKk.png\" alt></p>\n<h3 id=\"App-Script\"><a href=\"#App-Script\" class=\"headerlink\" title=\"App Script\"></a>App Script</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doGet</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// parameter</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> params = e.parameter,</span><br><span class=\"line\">      date = params.Date,</span><br><span class=\"line\">      name = params.Name,</span><br><span class=\"line\">      proj = params.Proj,</span><br><span class=\"line\">      hours = params.Hours,</span><br><span class=\"line\">      des = params.Des;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// google sheet</span></span><br><span class=\"line\">  var spreadSheet = SpreadsheetApp.openById(&#123;Sheet ID&#125;),       # 需要Sheet ID</span><br><span class=\"line\">      sheet = spreadSheet.getSheets()[<span class=\"number\">0</span>],  <span class=\"comment\">// focus on sheet 1</span></span><br><span class=\"line\">      lastRow = sheet.getLastRow();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// set value &lt;= getRange(row, col)</span></span><br><span class=\"line\">  sheet.getRange(lastRow + <span class=\"number\">1</span>, <span class=\"number\">1</span>).setValue(date);</span><br><span class=\"line\">  sheet.getRange(lastRow + <span class=\"number\">1</span>, <span class=\"number\">2</span>).setValue(name);</span><br><span class=\"line\">  sheet.getRange(lastRow + <span class=\"number\">1</span>, <span class=\"number\">3</span>).setValue(proj);</span><br><span class=\"line\">  sheet.getRange(lastRow + <span class=\"number\">1</span>, <span class=\"number\">4</span>).setValue(hours);</span><br><span class=\"line\">  sheet.getRange(lastRow + <span class=\"number\">1</span>, <span class=\"number\">5</span>).setValue(des);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// complete =&gt; return true</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ContentService.createTextOutput(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>app script寫好之後，可以另外寫個debug.gs來執行看看<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debug</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> status = doGet(&#123;</span><br><span class=\"line\">      <span class=\"string\">\"parameter\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"Date\"</span> : <span class=\"string\">\"2019-05-06\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Name\"</span> : <span class=\"string\">\"LaplaceTW\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Proj\"</span> : <span class=\"string\">\"Proj-19-05-06\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Hours\"</span> : <span class=\"string\">\"4\"</span>,</span><br><span class=\"line\">        <span class=\"string\">'Des'</span> :<span class=\"string\">\"Daily Time Tracking\"</span>,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">  Logger.log(<span class=\"string\">\"Status : %s\"</span> , status);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure></p>\n<p>沒問題的話，就部署為網路應用程式，部署成功後可取得API網址<br><img src=\"https://i.imgur.com/f6YkDkO.png\" alt></p>\n<h3 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h3><p></p><p><br>用瀏覽器的開發人員模式console發送request測試<br><img src=\"https://i.imgur.com/DNfVP7p.png\" alt><br><img src=\"https://i.imgur.com/4dbIvcw.png\" alt></p>\n<h3 id=\"Passing-an-array-into-Google-App-Script\"><a href=\"#Passing-an-array-into-Google-App-Script\" class=\"headerlink\" title=\"Passing an array into Google App Script ?\"></a>Passing an array into Google App Script ?</h3><p>官方文件對參數的解釋是這樣的:</p>\n<blockquote>\n<p>e.parameter<br>An object of key/value pairs that correspond to the request parameters. Only the first value is returned for parameters that have multiple values.<br>{“name”: “alice”, “n”: “1”}</p>\n</blockquote>\n<blockquote>\n<p>e.parameters<br>An object similar to e.parameter, but with an array of values for each key<br>{“name”: [“alice”], “n”: [“1”, “2”]}</p>\n</blockquote>\n<p>但實際測試的時候我也遇到如同<a href=\"https://tutorials.webduino.io/zh-tw/docs/socket/useful/google-sheet-1.html\" target=\"_blank\" rel=\"noopener\">Webduino官方教學文</a>所說的，怎麼試就是無法透過e.parameters這個欄位傳遞參數呀！最後我也採用了相同的做法(汗)，直接傳遞字串到App Script裡頭再分割數據。<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// doGet(e)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> params = e.parameter,</span><br><span class=\"line\">    data = [<span class=\"string\">'d1'</span>, <span class=\"string\">'d2'</span>, <span class=\"string\">'d3'</span>, <span class=\"string\">'d4'</span>, <span class=\"string\">'d5'</span>],</span><br><span class=\"line\">    len = data.length,</span><br><span class=\"line\">    counter = <span class=\"number\">1.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(counter &lt;= len)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> index = (counter - <span class=\"number\">1.0</span>),</span><br><span class=\"line\">      arr = params[data[index]];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(arr != <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">    arr = arr.split(<span class=\"string\">','</span>);</span><br><span class=\"line\">    <span class=\"comment\">// set value &lt;= getRange(row, col)</span></span><br><span class=\"line\">    sheet.getRange(lastRow + counter, <span class=\"number\">1</span>).setValue(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    sheet.getRange(lastRow + counter, <span class=\"number\">2</span>).setValue(arr[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    sheet.getRange(lastRow + counter, <span class=\"number\">3</span>).setValue(arr[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    sheet.getRange(lastRow + counter, <span class=\"number\">4</span>).setValue(arr[<span class=\"number\">3</span>]);</span><br><span class=\"line\">    sheet.getRange(lastRow + counter, <span class=\"number\">5</span>).setValue(arr[<span class=\"number\">4</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  counter ++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h3><p>在透過Ajax對App Script發送請求寫入Spread Sheet的測試過程中，原本前端會對User填寫的每筆數據個別送出Ajax請求，雖然過於頻繁並非好的處理方式，但這也才讓我意識到同時間多個寫入請求的衝突及數據覆寫問題，所以後來整合成一次性的Ajax請求，改為在App Script處理、分割數據的方式。但這樣還沒解決衝突問題，偉大的Google當然也有考量到潛在的寫入衝突問題:</p>\n<blockquote>\n<h4 id=\"Class-Lock\"><a href=\"#Class-Lock\" class=\"headerlink\" title=\"Class Lock\"></a><a href=\"https://developers.google.com/apps-script/reference/lock/\" target=\"_blank\" rel=\"noopener\">Class Lock</a></h4><p>A representation of a mutual-exclusion lock.</p>\n<p>This class allows scripts to make sure that only one instance of the script is executing a given section of code at a time. This is particularly useful for callbacks and triggers, where a user action may cause changes to a shared resource and you want to ensure that aren’t collisions.</p>\n</blockquote>\n<p>藉由鎖定Script的方式，確保每個時刻只會有唯一的讀寫動作，來避免衝突問題。另外，SpreadsheetApp.flush()的使用也需特別留意。<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// get a script lock for modifying a shared resource</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lock = LockService.getScriptLock();</span><br><span class=\"line\">lock.waitLock(<span class=\"number\">30000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Do Something</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// you should call SpreadsheetApp.flush() prior to releasing the lock,</span></span><br><span class=\"line\"><span class=\"comment\">// to commit all pending changes to the spreadsheet</span></span><br><span class=\"line\">SpreadsheetApp.flush();</span><br><span class=\"line\">lock.releaseLock();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Version\"><a href=\"#Version\" class=\"headerlink\" title=\"Version\"></a>Version</h3><p>這問題耗了我整天的時間在測試…當Script更新並重新部署後，接下來卻發現，Ajax送出的請求一直抓不到參數，每個欄位都是呈現Undefined的狀態，但Debug.gs測試結果卻正常的很!!! 真是見鬼了…折騰半天我從測試結果合理推測部署的Web App所執行的不是最新版本，我在Stack Overflow也有找到相關討論:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/18131157/\" target=\"_blank\" rel=\"noopener\">POST to Google Apps Script web app does use latest version</a></li>\n<li><a href=\"https://stackoverflow.com/questions/49170665/\" target=\"_blank\" rel=\"noopener\">App script web change version for each deploy</a></li>\n</ul>\n<p>建立一個Web App再另外建立App Script把相關邏輯寫成library，然後在Web App去呼叫它，這是一種方式，但我覺得以簡單的應用而言太拐彎抹角了。只要修改並善用debug測試，確認沒問題後再部署為一個新版本，如此外部呼叫就不會有上述的舊版本問題。</p>\n","categories":["Google"],"tags":["google","spread sheet"]},{"title":"個人化NexT主題","url":"/hexo-next-optimize/","content":"<p>2020/02/27更新。<br><a id=\"more\"></a><br>\b\b＊關於在本機伺服器正常運作，但部署後卻沒有生效的情況，單獨執行”hexo d”指令即可，”hexo d -g”之類的組合指令會使某些檔案沒有被推送到遠端伺服器上。</p>\n<hr>\n<h2 id=\"SEO-Search-Engine-Optimization\"><a href=\"#SEO-Search-Engine-Optimization\" class=\"headerlink\" title=\"SEO(Search Engine Optimization)\"></a>SEO(Search Engine Optimization)</h2><p></p><p><br><a href=\"https://www.google.com/webmasters\" target=\"_blank\" rel=\"noopener\">Google Webmaster tools verification</a><br>輸入網址前置字元(部落格網址)，Google提供許多驗證方法，而我選擇的是HTML標記方法，在Hexo根目錄找到/themes/next/layout/_partials/head/head.swig，貼上Google所提供的<meta>標記，部署後按下驗證即可。之後生成sitemap.xml放在根目錄下的public中，並於Google Console中設定提交。<br>＊需注意當執行hexo clean之後public中的sitemap.xml會遭到移除。<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;meta name=<span class=\"string\">\"google-site-verification\"</span> content=<span class=\"string\">\"&#123;verification code&#125;\"</span> /&gt;</span><br></pre></td></tr></table></figure><br><img src=\"https://i.imgur.com/Z9Kj7x3.png\" alt><br><img src=\"https://i.imgur.com/ZQIQDI3.png\" alt></p>\n<h2 id=\"Font-Awsome-Icon\"><a href=\"#Font-Awsome-Icon\" class=\"headerlink\" title=\"Font Awsome Icon\"></a>Font Awsome Icon</h2><p>NexT自帶的版本為v4.7.0，到<a href=\"https://fontawesome.com/start\" target=\"_blank\" rel=\"noopener\">官網</a>找新版本CDN連結，貼在/themes/next/layout/_partials/head/head.swig就能套用更多icon呢。<br><img src=\"https://i.imgur.com/bC6ng9U.png\" alt></p>\n<p>＊引入新版本後部分icon可能會因為class name改變而無法顯示<br><img src=\"https://i.imgur.com/X0Umdjr.png\" alt></p>\n<h3 id=\"Change-Side-Bar-Icon\"><a href=\"#Change-Side-Bar-Icon\" class=\"headerlink\" title=\"Change Side Bar Icon\"></a>Change Side Bar Icon</h3><p>檔案路徑:/themes/next/layout/_macro/sidebar.swig<br>修改social icon相關程式碼為:<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"keyword\">if</span> theme.social_icons.enable &#125;  <span class=\"comment\">// ％符號會影響Code Block顯示因此在文章這裡移除</span></span><br><span class=\"line\">    &#123; set sidebarIcon = <span class=\"string\">'&lt;i class=\"'</span> + link.split(<span class=\"string\">'||'</span>)[<span class=\"number\">1</span>] | trim | <span class=\"keyword\">default</span>(<span class=\"string\">'globe'</span>) + <span class=\"string\">'\"&gt;&lt;/i&gt;'</span> &#125;</span><br><span class=\"line\">&#123; endif &#125;</span><br></pre></td></tr></table></figure><br>如此在NexT Config就能直接設定Font Awsome的class name:<br><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\"><span class=\"attr\">  GitHub:</span> <span class=\"attr\">https://github.com/username</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-github</span> <span class=\"string\">fa-lg</span></span><br><span class=\"line\"><span class=\"attr\">  Linkedin:</span> <span class=\"attr\">https://www.linkedin.com/</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-linkedin-in</span> <span class=\"string\">fa-lg</span></span><br><span class=\"line\"><span class=\"attr\">  Twitter:</span> <span class=\"attr\">https://twitter.com/</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-twitter</span> <span class=\"string\">fa-lg</span></span><br><span class=\"line\"><span class=\"attr\">  E-Mail:</span> <span class=\"attr\">mailto:username@gmail.com</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-envelope</span> <span class=\"string\">fa-lg</span></span><br></pre></td></tr></table></figure><br><img src=\"https://i.imgur.com/f2Ssx2y.png\" alt></p>\n<h3 id=\"Change-Post-Icon\"><a href=\"#Change-Post-Icon\" class=\"headerlink\" title=\"Change Post Icon\"></a>Change Post Icon</h3><p>檔案路徑:themes/next/layout/_macro/post.swig<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;span <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"post-meta-item-icon\"</span>&gt;</span><br><span class=\"line\">    &lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"fas fa-calendar-alt\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;span class=\"post-meta-item-icon\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;i class=\"fas fa-folder-open\"&gt;&lt;/i</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;span class=\"post-meta-item-icon\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;i class=\"fas fa-comment-dots\"&gt;&lt;/i</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/span&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Background-Style\"><a href=\"#Background-Style\" class=\"headerlink\" title=\"Background Style\"></a>Background Style</h2><p>檔案路徑:themes/next/source/css/_custom/custom.styl<br>\b\b\b參考<a href=\"https://slanceli.top/2019/02/18/深度美化Hexo（NexT主题）/#more\" target=\"_blank\" rel=\"noopener\">Slanceli - 深度美化Hexo(NexT主题)</a></p>\n<figure class=\"highlight styl\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Custom styles.</span></span><br><span class=\"line\">@media screen and (<span class=\"attribute\">min-width</span>:<span class=\"number\">1200px</span>)&#123;</span><br><span class=\"line\">    body&#123;\t</span><br><span class=\"line\">        background-image:url(/images/background.png);</span><br><span class=\"line\">        <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">        <span class=\"attribute\">background-attachment</span>:fixed;</span><br><span class=\"line\">        <span class=\"attribute\">background-position</span>:<span class=\"number\">50%</span> <span class=\"number\">60%</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-id\">#footer</span> a&#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>:<span class=\"number\">#eee</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// background</span></span><br><span class=\"line\">.main-inner&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0.9</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// menu</span></span><br><span class=\"line\">.header-inner&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#ffffff</span>e8;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// footer</span></span><br><span class=\"line\">.footer&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2020/02/27更新：<br>調整響應式斷點，讓行動裝置瀏覽也能顯示背景圖片<br><figure class=\"highlight styl\"><table><tr><td class=\"code\"><pre><span class=\"line\">@media screen and (<span class=\"attribute\">min-width</span>:<span class=\"number\">768px</span>)&#123;</span><br><span class=\"line\">    body&#123;\t</span><br><span class=\"line\">        background-image:url(/images/background.png);</span><br><span class=\"line\">        <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">        <span class=\"attribute\">background-attachment</span>:fixed;</span><br><span class=\"line\">        <span class=\"attribute\">background-position</span>:<span class=\"number\">50%</span> <span class=\"number\">60%</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-id\">#footer</span> a&#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>:<span class=\"number\">#eee</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@media screen and (<span class=\"attribute\">min-width</span>:<span class=\"number\">320px</span>) and (max-width:<span class=\"number\">768px</span>)&#123;</span><br><span class=\"line\">    body&#123;\t</span><br><span class=\"line\">        background-image:url(/images/background_768.png);</span><br><span class=\"line\">        <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">        <span class=\"attribute\">background-attachment</span>:fixed;</span><br><span class=\"line\">        <span class=\"attribute\">background-position</span>:<span class=\"number\">70%</span> <span class=\"number\">0%</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-id\">#footer</span> a&#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>:<span class=\"number\">#eee</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Block-Style\"><a href=\"#Block-Style\" class=\"headerlink\" title=\"Block Style\"></a>Block Style</h2><p>使側邊欄與文章區塊邊角變為圓角</p>\n<p>檔案路徑:themes/next/source/css/_variables/Gemini.styl<br>修改參數如下 :<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">$border-radius-inner              = 0 0 16px 16px;</span><br><span class=\"line\">$border-radius                    = 16px;</span><br></pre></td></tr></table></figure></p>\n<p>檔案路徑:themes/next/source/css/_schemes/Gemini/index.styl<br>加入CSS :<br><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>:transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><img src=\"https://i.imgur.com/MpmS7WU.png\" alt></p>\n<h2 id=\"Tag-Cloud\"><a href=\"#Tag-Cloud\" class=\"headerlink\" title=\"Tag Cloud\"></a>Tag Cloud</h2><p>雖然NexT有內建標籤雲，因個人喜好故採用<a href=\"https://github.com/MikeCoder/hexo-tag-cloud\" target=\"_blank\" rel=\"noopener\">第三方標籤雲</a>。</p>\n<h2 id=\"Comment-System\"><a href=\"#Comment-System\" class=\"headerlink\" title=\"Comment System\"></a>Comment System</h2><p>因為不喜歡Disqus複雜的後台，決定改用Gitalk。<br>參考:<a href=\"https://hsiangfeng.github.io/hexo/20191206/2397475810/\" target=\"_blank\" rel=\"noopener\">Gitalk設定教學</a></p>\n<p>然後我收到Github的系統信，建議使用者以Access Token取代OAuth，因此我到Github刪除OAuth，接著在NexT設定檔中的Gitalk區塊增加accessToken參數並移除clientID、clientSecret。<br>參考:<a href=\"https://hsiangfeng.github.io/hexo/20200206/1516602667/\" target=\"_blank\" rel=\"noopener\">GitHub API - Deprecation notice for authentication via URL query parameters</a></p>\n<h2 id=\"Continue…\"><a href=\"#Continue…\" class=\"headerlink\" title=\"Continue…\"></a>Continue…</h2>","categories":["Hexo"],"tags":["hexo","github pages"]},{"title":"Python自動填寫Google表單","url":"/python-auto-fill-out-google-form/","content":"<p>建個Google表單來測試：現任美國總統究竟是州普？卅普？還是川普？<br><a id=\"more\"></a><br><img src=\"https://i.imgur.com/th41Uch.png\" alt></p>\n<p>打開瀏覽器的開發人員模式，切換到Network Panel並試著送出一次表單，可見formResponse有相當明顯的數據傳輸。<br><img src=\"https://i.imgur.com/7EDofS9.png\" alt></p>\n<p>展開查看詳情，在Header的部分可以找到剛才送出表單的資料結構，確定“entry.1216123536”就是所填寫的表單欄位，那麼可以開始寫程式了。<br><img src=\"https://i.imgur.com/O02YylJ.png\" alt></p>\n<h3 id=\"url\"><a href=\"#url\" class=\"headerlink\" title=\"url\"></a>url</h3><p></p><p><br>在Header摘要可見到url的格式為表單網址加上”/formResponse”，使用縮網址會無法重導向至正確的表單位址。</p>\n<h3 id=\"data\"><a href=\"#data\" class=\"headerlink\" title=\"data\"></a>data</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload = &#123;</span><br><span class=\"line\">    <span class=\"string\">'entry.1216123536'</span> : <span class=\"string\">''</span>,</span><br><span class=\"line\">    <span class=\"string\">'fvv'</span> : <span class=\"string\">'0'</span>,</span><br><span class=\"line\">    <span class=\"string\">'draftResponse'</span> : <span class=\"string\">'[]'</span>,</span><br><span class=\"line\">    <span class=\"string\">'pageHistory'</span> : <span class=\"string\">'0'</span>,</span><br><span class=\"line\">    <span class=\"string\">'fbzx'</span> : <span class=\"string\">'9150375950543103543'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h3><p></p><p><br>為了讓程式的行為看起來不那麼程式(?)，設置隨機填寫欄位值與隨機延遲時間。<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> rq</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">'https://docs.google.com/forms/d/e/********************/formResponse'</span></span><br><span class=\"line\">params = [<span class=\"string\">'州普'</span>, <span class=\"string\">'卅普'</span>, <span class=\"string\">'川普'</span>]</span><br><span class=\"line\">payload = &#123;</span><br><span class=\"line\">    <span class=\"string\">'entry.1216123536'</span> : <span class=\"string\">''</span>,</span><br><span class=\"line\">    <span class=\"string\">'fvv'</span> : <span class=\"string\">'0'</span>,</span><br><span class=\"line\">    <span class=\"string\">'draftResponse'</span> : <span class=\"string\">'[]'</span>,</span><br><span class=\"line\">    <span class=\"string\">'pageHistory'</span> : <span class=\"string\">'0'</span>,</span><br><span class=\"line\">    <span class=\"string\">'fbzx'</span> : <span class=\"string\">'9150375950543103543'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">num = <span class=\"number\">10</span>  <span class=\"comment\"># number of executions</span></span><br><span class=\"line\">period = np.arange(<span class=\"number\">0.5</span>, <span class=\"number\">5.0</span>, <span class=\"number\">0.1</span>)</span><br><span class=\"line\">delay = <span class=\"number\">0</span>  <span class=\"comment\"># delay of execution</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> num &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        payload[<span class=\"string\">'entry.1216123536'</span>] = random.choice(params)  <span class=\"comment\"># random choice</span></span><br><span class=\"line\">        res = rq.post(url, data=payload)</span><br><span class=\"line\">        res.raise_for_status()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> res.status_code == <span class=\"number\">200</span> :</span><br><span class=\"line\">            delay = round(random.choice(period), <span class=\"number\">2</span>)  <span class=\"comment\"># round off to the 2nd decimal place</span></span><br><span class=\"line\">            print(<span class=\"string\">'Fill Out : '</span> + payload[<span class=\"string\">'entry.1216123536'</span>] + <span class=\"string\">' delay : '</span> + str(delay) + <span class=\"string\">' sec'</span>)</span><br><span class=\"line\">            time.sleep(delay)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> rq.HTTPError:</span><br><span class=\"line\">        print(<span class=\"string\">'HTTP Error!'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    num -= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://i.imgur.com/jKfaOP4.png\" alt></p>\n<p>↓ 嗯，只有兩個人答對呢(?)<br><img src=\"https://i.imgur.com/zodJ6IR.png\" alt></p>\n","categories":["Python"],"tags":["python","google form"]},{"title":"Hexo on GitHub Pages:Icarus主題","url":"/hexo-theme-icarus/","content":"<p><a href=\"https://theme-next.iissnan.com&quot;\" target=\"_blank\" rel=\"noopener\">NexT</a>主題實在是太多人用了，看得有點膩，最近看到Icarus主題覺得很Blog(?)，決定來換個主題。<br><a id=\"more\"></a></p>\n<h2 id=\"Download\"><a href=\"#Download\" class=\"headerlink\" title=\"Download\"></a>Download</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd blog</span><br><span class=\"line\">git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br><span class=\"line\">hexo s  # run on local host</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/KaGH5Gm.png\" alt></p>\n<hr>\n<h2 id=\"Config\"><a href=\"#Config\" class=\"headerlink\" title=\"Config\"></a>Config</h2><p></p><p><br>參考<a href=\"https://blog.zhangruipeng.me/hexo-theme-icarus/categories/\" target=\"_blank\" rel=\"noopener\">官方文件</a>，主要配置：</p>\n<h3 id=\"Favicon-amp-Logo\"><a href=\"#Favicon-amp-Logo\" class=\"headerlink\" title=\"Favicon &amp; Logo\"></a>Favicon &amp; Logo</h3><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Version of the Icarus theme that is currently used</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"number\">2.3</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"comment\"># Path or URL to the website's icon</span></span><br><span class=\"line\"><span class=\"attr\">favicon:</span> <span class=\"string\">/images/favicon.svg</span></span><br><span class=\"line\"><span class=\"comment\"># Path or URL to RSS atom.xml</span></span><br><span class=\"line\"><span class=\"attr\">rss:</span> </span><br><span class=\"line\"><span class=\"comment\"># Path or URL to the website's logo to be shown on the left of the navigation bar or footer</span></span><br><span class=\"line\"><span class=\"attr\">logo:</span> <span class=\"string\">/images/logo.svg</span></span><br></pre></td></tr></table></figure>\n<p>＊ 推薦兩個SVG線上製作工具：<a href=\"https://www.vectorizer.io\" target=\"_blank\" rel=\"noopener\">Image Vectorizer</a>、<a href=\"http://vectorpaint.yaks.co.nz\" target=\"_blank\" rel=\"noopener\">SVG Editor</a></p>\n<h3 id=\"Navbar-amp-Footer\"><a href=\"#Navbar-amp-Footer\" class=\"headerlink\" title=\"Navbar &amp; Footer\"></a>Navbar &amp; Footer</h3><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Navigation bar link settings</span></span><br><span class=\"line\"><span class=\"attr\">navbar:</span></span><br><span class=\"line\">    <span class=\"comment\"># Navigation bar menu links</span></span><br><span class=\"line\"><span class=\"attr\">    menu:</span></span><br><span class=\"line\"><span class=\"attr\">        Home:</span> <span class=\"string\">/</span></span><br><span class=\"line\"><span class=\"attr\">        Archives:</span> <span class=\"string\">/archives</span></span><br><span class=\"line\"><span class=\"attr\">        Categories:</span> <span class=\"string\">/categories</span></span><br><span class=\"line\"><span class=\"attr\">        Tags:</span> <span class=\"string\">/tags</span></span><br><span class=\"line\">        <span class=\"comment\"># About: /about</span></span><br><span class=\"line\">    <span class=\"comment\"># Navigation bar links to be shown on the right</span></span><br><span class=\"line\"><span class=\"attr\">    links:</span></span><br><span class=\"line\"><span class=\"attr\">        GitHub_LaplaceTW:</span></span><br><span class=\"line\"><span class=\"attr\">            icon:</span> <span class=\"string\">fab</span> <span class=\"string\">fa-github</span></span><br><span class=\"line\"><span class=\"attr\">            url:</span> <span class=\"string\">'https://github.com/laplacetw'</span></span><br><span class=\"line\"><span class=\"comment\"># Footer section link settings</span></span><br><span class=\"line\"><span class=\"attr\">footer:</span></span><br><span class=\"line\">    <span class=\"comment\"># Links to be shown on the right of the footer section</span></span><br><span class=\"line\"><span class=\"attr\">    links:</span></span><br><span class=\"line\">        <span class=\"string\">CC</span> <span class=\"string\">BY</span> <span class=\"number\">4.0</span><span class=\"string\">:</span></span><br><span class=\"line\"><span class=\"attr\">            icon:</span> <span class=\"string\">fab</span> <span class=\"string\">fa-creative-commons</span></span><br><span class=\"line\"><span class=\"attr\">            url:</span> <span class=\"string\">'https://creativecommons.org/licenses/by/4.0/'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Comment\"><a href=\"#Comment\" class=\"headerlink\" title=\"Comment\"></a>Comment</h3><p></p><p><br>評論系統使用DISQUS服務<br><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">comment:</span></span><br><span class=\"line\">    <span class=\"comment\"># Name of the comment plugin</span></span><br><span class=\"line\"><span class=\"attr\">    type:</span> <span class=\"string\">disqus</span></span><br><span class=\"line\"><span class=\"attr\">    enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    shortname:</span> <span class=\"string\">&#123;disqus</span> <span class=\"string\">shortname&#125;</span></span><br><span class=\"line\"><span class=\"attr\">    count:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    lazyload:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Wiget\"><a href=\"#Wiget\" class=\"headerlink\" title=\"Wiget\"></a>Wiget</h3><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">widgets:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span></span><br><span class=\"line\">        <span class=\"comment\"># Widget name</span></span><br><span class=\"line\"><span class=\"attr\">        type:</span> <span class=\"string\">profile</span></span><br><span class=\"line\">        <span class=\"comment\"># Where should the widget be placed, left or right</span></span><br><span class=\"line\"><span class=\"attr\">        position:</span> <span class=\"string\">left</span></span><br><span class=\"line\">        <span class=\"comment\"># Author name to be shown in the profile widget</span></span><br><span class=\"line\"><span class=\"attr\">        author:</span> <span class=\"string\">LaplaceTW</span></span><br><span class=\"line\">        <span class=\"comment\"># Title of the author to be shown in the profile widget</span></span><br><span class=\"line\"><span class=\"attr\">        author_title:</span> <span class=\"string\">learning</span> <span class=\"string\">by</span> <span class=\"string\">doing</span></span><br><span class=\"line\">        <span class=\"comment\"># Author's current location to be shown in the profile widget</span></span><br><span class=\"line\"><span class=\"attr\">        location:</span> <span class=\"string\">Taiwan,</span> <span class=\"string\">Earth</span></span><br><span class=\"line\">        <span class=\"comment\"># Path or URL to the avatar to be shown in the profile widget</span></span><br><span class=\"line\"><span class=\"attr\">        avatar:</span> </span><br><span class=\"line\">        <span class=\"comment\"># Email address for the Gravatar to be shown in the profile widget</span></span><br><span class=\"line\"><span class=\"attr\">        gravatar:</span> </span><br><span class=\"line\">        <span class=\"comment\"># Whether to show avatar image rounded or square</span></span><br><span class=\"line\"><span class=\"attr\">        avatar_rounded:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"comment\"># Path or URL for the follow button</span></span><br><span class=\"line\"><span class=\"attr\">        follow_link:</span> <span class=\"string\">'https://github.com/laplacetw'</span></span><br><span class=\"line\">        <span class=\"comment\"># Links to be shown on the bottom of the profile widget</span></span><br><span class=\"line\"><span class=\"attr\">        social_links:</span></span><br><span class=\"line\"><span class=\"attr\">            Email:</span></span><br><span class=\"line\"><span class=\"attr\">                icon:</span> <span class=\"string\">far</span> <span class=\"string\">fa-envelope</span></span><br><span class=\"line\"><span class=\"attr\">                url:</span> <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"attr\">            Github:</span></span><br><span class=\"line\"><span class=\"attr\">                icon:</span> <span class=\"string\">fab</span> <span class=\"string\">fa-github</span></span><br><span class=\"line\"><span class=\"attr\">                url:</span> <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"attr\">            Linkedin:</span></span><br><span class=\"line\"><span class=\"attr\">                icon:</span> <span class=\"string\">fab</span> <span class=\"string\">fa-linkedin</span></span><br><span class=\"line\"><span class=\"attr\">                url:</span> <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"attr\">            RSS:</span></span><br><span class=\"line\"><span class=\"attr\">                icon:</span> <span class=\"string\">fas</span> <span class=\"string\">fa-rss</span></span><br><span class=\"line\"><span class=\"attr\">                url:</span> <span class=\"string\">/atom.xml</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span></span><br><span class=\"line\">        <span class=\"comment\"># Widget name (文章內容目錄)</span></span><br><span class=\"line\"><span class=\"attr\">        type:</span> <span class=\"string\">toc</span></span><br><span class=\"line\">        <span class=\"comment\"># Where should the widget be placed, left or right</span></span><br><span class=\"line\"><span class=\"attr\">        position:</span> <span class=\"string\">right</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span></span><br><span class=\"line\">        <span class=\"comment\"># Widget name (友情連結)</span></span><br><span class=\"line\"><span class=\"attr\">        type:</span> <span class=\"string\">links</span></span><br><span class=\"line\">        <span class=\"comment\"># Where should the widget be placed, left or right</span></span><br><span class=\"line\"><span class=\"attr\">        position:</span> <span class=\"string\">left</span></span><br><span class=\"line\">        <span class=\"comment\"># Links to be shown in the links widget</span></span><br><span class=\"line\"><span class=\"attr\">        links:</span></span><br><span class=\"line\"><span class=\"attr\">            Hexo:</span> <span class=\"string\">'https://hexo.io'</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span></span><br><span class=\"line\">        <span class=\"comment\"># Widget name (全站分類)</span></span><br><span class=\"line\"><span class=\"attr\">        type:</span> <span class=\"string\">category</span></span><br><span class=\"line\">        <span class=\"comment\"># Where should the widget be placed, left or right</span></span><br><span class=\"line\"><span class=\"attr\">        position:</span> <span class=\"string\">left</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span></span><br><span class=\"line\">        <span class=\"comment\"># Widget name (最新文章)</span></span><br><span class=\"line\"><span class=\"attr\">        type:</span> <span class=\"string\">recent_posts</span></span><br><span class=\"line\">        <span class=\"comment\"># Where should the widget be placed, left or right</span></span><br><span class=\"line\"><span class=\"attr\">        position:</span> <span class=\"string\">right</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span></span><br><span class=\"line\">        <span class=\"comment\"># Widget name (時間軸)</span></span><br><span class=\"line\"><span class=\"attr\">        type:</span> <span class=\"string\">archive</span></span><br><span class=\"line\">        <span class=\"comment\"># Where should the widget be placed, left or right</span></span><br><span class=\"line\"><span class=\"attr\">        position:</span> <span class=\"string\">right</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span></span><br><span class=\"line\">        <span class=\"comment\"># Widget name (標籤雲)</span></span><br><span class=\"line\"><span class=\"attr\">        type:</span> <span class=\"string\">tagcloud</span></span><br><span class=\"line\">        <span class=\"comment\"># Where should the widget be placed, left or right</span></span><br><span class=\"line\"><span class=\"attr\">        position:</span> <span class=\"string\">right</span></span><br></pre></td></tr></table></figure>\n<p>＊ hyphen 為每個 Wiget 的起始，多一個少一個都會導致Error</p>\n<h3 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h3><p></p><p><br>啟用不蒜子網站流量統計設定(預設為關閉)<br><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plugins:</span></span><br><span class=\"line\">    <span class=\"comment\"># BuSuanZi site/page view counter</span></span><br><span class=\"line\">    <span class=\"comment\"># https://busuanzi.ibruce.info</span></span><br><span class=\"line\"><span class=\"attr\">    busuanzi:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><img src=\"https://i.imgur.com/DXsTbdB.png\" alt><br><img src=\"https://i.imgur.com/9t5QT9J.png\" alt><br>更進一步個人化ICARUS主題的部分，例如調整文章版面配置、文末版權宣告等，網路教學的版本似乎都有點舊了，自己也是搞了很久…我懶得寫了，因為代碼高亮的問題一直無法順利解決，浪費太多時間了。一番折騰後我又換回NEXT…</p>\n","categories":["Hexo"],"tags":["hexo","github pages"]},{"title":"Hexo on GitHub Pages:不蒜子統計失效","url":"/hexo-error-busuanzi/","content":"<p>今天PO文後發現…所以我說那個文章閱讀次數呢?頁面底部的流量統計也消失了。<br><a id=\"more\"></a><br>推測是.js檔出了什麼問題，先到<a href=\"https://busuanzi.ibruce.info\" target=\"_blank\" rel=\"noopener\">不蒜子</a>的頁面瞧瞧，發現一行小小的紅字，寫著「因七牛強制過期『dn-lbstatics.qbox.me』域名，與客服溝通無果，只能更換域名到『busuanzi.ibruce.info』!」，雖然不知道七牛到底是什麼牛，但可以確定問題來源是域名更換。</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p></p><p><br>在NexT資料夾中找到不蒜子的設定檔，路徑為layout/_third-party/analytics/busuanzi-counter.swig<br><img src=\"https://i.imgur.com/rpVQnFj.png\" alt></p>\n<p>修改.js路徑為:<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>\b重新\bdeploy後便會發現統計數字又回來啦。</p>\n","categories":["Hexo"],"tags":["hexo","github pages"]},{"title":"Excel:公式、圖表與樞紐分析","url":"/excel-func-chart-pivot-table/","content":"<p>常用公式、圖表與樞紐分析之基本操作。<br><a id=\"more\"></a></p>\n<h1 id=\"常用公式\"><a href=\"#常用公式\" class=\"headerlink\" title=\"常用公式\"></a>常用公式</h1><p><br></p>\n<h2 id=\"IF\"><a href=\"#IF\" class=\"headerlink\" title=\"IF\"></a>IF</h2><ul>\n<li>用法:IF(條件,符合條件,不符合條件)</li>\n<li>範例:判斷訂單金額是否大於70(億)<br><img src=\"https://i.imgur.com/wQeP7th.png\" alt></li>\n</ul>\n<h2 id=\"多重條件判斷\"><a href=\"#多重條件判斷\" class=\"headerlink\" title=\"多重條件判斷\"></a>多重條件判斷</h2><ul>\n<li>用法:IF(條件,IF(…),不符合條件)</li>\n<li>範例:呈上例，進一步做訂單金額分級<br><img src=\"https://i.imgur.com/27kZEy2.png\" alt></li>\n</ul>\n<h2 id=\"SUM\"><a href=\"#SUM\" class=\"headerlink\" title=\"SUM\"></a>SUM</h2><ul>\n<li>用法:SUM(範圍1,範圍2…)</li>\n<li>範例:計算化學品與塑膠/橡膠年度訂單金額加總<br><img src=\"https://i.imgur.com/krLlYE2.png\" alt></li>\n</ul>\n<h2 id=\"MAX\"><a href=\"#MAX\" class=\"headerlink\" title=\"MAX\"></a>MAX</h2><ul>\n<li>用法:MAX(範圍1,範圍2…)</li>\n<li>範例:找出各類別每月訂單金額中最高者<br><img src=\"https://i.imgur.com/uDmIaxx.png\" alt></li>\n</ul>\n<h2 id=\"INT-ROUND\"><a href=\"#INT-ROUND\" class=\"headerlink\" title=\"INT/ROUND\"></a>INT/ROUND</h2><ul>\n<li>用法:INT(儲存格)/ROUND(儲存格,小數位數)</li>\n<li>範例:INT無條件捨去/ROUND四捨五入<br><img src=\"https://i.imgur.com/sZLMI11.png\" alt></li>\n</ul>\n<h2 id=\"AVERAGE\"><a href=\"#AVERAGE\" class=\"headerlink\" title=\"AVERAGE\"></a>AVERAGE</h2><ul>\n<li>用法:AVERAGE(範圍1,範圍2…)</li>\n<li>範例:計算年度平均值之無條件捨去與四捨五入<br><img src=\"https://i.imgur.com/F8FyAzn.png\" alt></li>\n</ul>\n<h2 id=\"SUMIF\"><a href=\"#SUMIF\" class=\"headerlink\" title=\"SUMIF\"></a>SUMIF</h2><ul>\n<li>用法:SUMIF(條件範圍,條件,合計範圍)</li>\n<li>範例:計算各種商品之銷售總額<br><img src=\"https://i.imgur.com/xz1FZ5Z.png\" alt></li>\n</ul>\n<h2 id=\"COUNTIF\"><a href=\"#COUNTIF\" class=\"headerlink\" title=\"COUNTIF\"></a>COUNTIF</h2><ul>\n<li>用法:COUNTIF(條件範圍,條件)</li>\n<li>範例:統計年度化學品訂單金額分級<br><img src=\"https://i.imgur.com/V7LXB0g.png\" alt></li>\n</ul>\n<h2 id=\"VLOOKUP\"><a href=\"#VLOOKUP\" class=\"headerlink\" title=\"VLOOKUP\"></a>VLOOKUP</h2><ul>\n<li>用法:VLOOKUP(搜尋條件,範圍,目標欄位,精確度)</li>\n<li>範例:搜尋指定月份訂單金額<br><img src=\"https://i.imgur.com/sa39mn2.png\" alt></li>\n</ul>\n<h2 id=\"多條件搜尋\"><a href=\"#多條件搜尋\" class=\"headerlink\" title=\"多條件搜尋\"></a>多條件搜尋</h2><ul>\n<li>用法:LOOKUP(1,0/((條件1)<em>(條件2)</em>…),目標範圍)</li>\n<li>範例:尋找訂單金額分級為Ａ級且大於100(億)之月份<br><img src=\"https://i.imgur.com/kJxlPKI.png\" alt></li>\n</ul>\n<h2 id=\"重點整理\"><a href=\"#重點整理\" class=\"headerlink\" title=\"重點整理\"></a>重點整理</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">公式</th>\n<th style=\"text-align:center\">說明  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">IF</td>\n<td style=\"text-align:center\">條件式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SUM</td>\n<td style=\"text-align:center\">加總</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MAX</td>\n<td style=\"text-align:center\">最大值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">INT</td>\n<td style=\"text-align:center\">無條件捨去</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ROUND</td>\n<td style=\"text-align:center\">四捨五入</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AVERAGE</td>\n<td style=\"text-align:center\">平均值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SUMIF</td>\n<td style=\"text-align:center\">有條件加總</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">COUNTIF</td>\n<td style=\"text-align:center\">有條件統計</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">VLOOKUP</td>\n<td style=\"text-align:center\">尋找      </td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"常用圖表\"><a href=\"#常用圖表\" class=\"headerlink\" title=\"常用圖表\"></a>常用圖表</h1><p><br></p>\n<h2 id=\"錯誤範例\"><a href=\"#錯誤範例\" class=\"headerlink\" title=\"錯誤範例\"></a>錯誤範例</h2><p>說明:折線圖所表達的為<span style=\"color:red;\">趨勢、變化</span>，而下圖中\b\b\b\b\b\b水平軸項目為類別，離散型數據不具連續性，這樣的圖表<strong>不具任何意義</strong>，應使用直條圖比較各項目之大小，或使用圓形圖呈現各項目佔整體之比重。<br><img src=\"https://i.imgur.com/UswDs8J.png\" alt></p>\n<h2 id=\"基本設定\"><a href=\"#基本設定\" class=\"headerlink\" title=\"基本設定\"></a>基本設定</h2><ul>\n<li>圖表設計與格式設定在圖表工具的頁籤中</li>\n<li>圖表項目細部設定在圖表右側的”＋”號中<br><img src=\"https://i.imgur.com/67Z3T4H.png\" alt></li>\n</ul>\n<h2 id=\"直條圖\"><a href=\"#直條圖\" class=\"headerlink\" title=\"直條圖\"></a>直條圖</h2><ul>\n<li>使用時機:做<span style=\"color:red;\">比較</span>，呈現數據的「相對大小」</li>\n<li>範例:100年度化學品外銷月訂單金額比較<br><img src=\"https://i.imgur.com/sHPqEjn.png\" alt></li>\n</ul>\n<h2 id=\"堆疊直條圖\"><a href=\"#堆疊直條圖\" class=\"headerlink\" title=\"堆疊直條圖\"></a>堆疊直條圖</h2><ul>\n<li>範例說明:呈現整體營業額與個別業務人員表現，可明顯看出業務A(藍色區塊)與業務C(灰色區塊)的成長與衰退，以及對整體的影響。<br><img src=\"https://i.imgur.com/UcZuOEu.png\" alt></li>\n</ul>\n<h2 id=\"折線圖\"><a href=\"#折線圖\" class=\"headerlink\" title=\"折線圖\"></a>折線圖</h2><ul>\n<li>使用時機:讀<span style=\"color:red;\">趨勢</span>，呈現數據的「變化、走勢」</li>\n<li>範例:100年度化學品外銷月訂單金額走勢<br><img src=\"https://i.imgur.com/FATm3bE.png\" alt></li>\n</ul>\n<h2 id=\"圓形圖\"><a href=\"#圓形圖\" class=\"headerlink\" title=\"圓形圖\"></a>圓形圖</h2><ul>\n<li>使用時機:看<span style=\"color:red;\">比例</span>，呈現數據的「相對比例」</li>\n<li>範例:\b100年度外銷訂單項目比重<br><img src=\"https://i.imgur.com/TBfdio3.png\" alt></li>\n</ul>\n<h2 id=\"重點整理-1\"><a href=\"#重點整理-1\" class=\"headerlink\" title=\"重點整理\"></a>重點整理</h2><p>\b數據視覺化須依據所欲呈現之數據統計摘要，進而選擇適當的圖表形式，避免<span style=\"color:red;\">誤用圖表、為分析而分析</span>。</p>\n<ul>\n<li>直條圖:做<span style=\"color:red;\">比較</span></li>\n<li>折線圖:讀<span style=\"color:red;\">趨勢</span></li>\n<li>圓形圖:看<span style=\"color:red;\">比例</span></li>\n</ul>\n<hr>\n<h1 id=\"樞紐分析\"><a href=\"#樞紐分析\" class=\"headerlink\" title=\"樞紐分析\"></a>樞紐分析</h1><p>以經濟部101-106年外銷美國訂單統計資料為例。</p>\n<h2 id=\"Step-1-選取數據範圍\"><a href=\"#Step-1-選取數據範圍\" class=\"headerlink\" title=\"Step 1:選取數據範圍\"></a>Step 1:選取數據範圍</h2><p><strong>數據範圍中不允許空白欄位</strong></p>\n<p><img src=\"https://i.imgur.com/joDfNB9.png\" alt></p>\n<h2 id=\"欄位說明\"><a href=\"#欄位說明\" class=\"headerlink\" title=\"欄位說明\"></a>欄位說明</h2><ul>\n<li>篩選:報表之篩選條件</li>\n<li>欄  :樞紐分析表<span style=\"color:red;\">行</span>數據</li>\n<li>列  :樞紐分析表<span style=\"color:red;\">列</span>數據</li>\n<li>值  :欲統計之數據，例如加總、平均值</li>\n</ul>\n<p><img src=\"https://i.imgur.com/UH01LrN.png\" alt></p>\n<h2 id=\"Step-2-拖曳調整欄位與排列順序\"><a href=\"#Step-2-拖曳調整欄位與排列順序\" class=\"headerlink\" title=\"Step 2:拖曳調整欄位與排列順序\"></a>Step 2:拖曳調整欄位與排列順序</h2><p><img src=\"https://i.imgur.com/E8Alrt1.png\" alt><br>↓點選值欄位設定可選擇其他計算類型<br><img src=\"https://i.imgur.com/tEI1LCA.png\" alt></p>\n<h2 id=\"Step-3-插入樞紐分析圖\"><a href=\"#Step-3-插入樞紐分析圖\" class=\"headerlink\" title=\"Step 3:插入樞紐分析圖\"></a>Step 3:插入樞紐分析圖</h2><p>樞紐分析工具(頁籤) –&gt; 分析 –&gt; 樞紐分析圖</p>\n<p><img src=\"https://i.imgur.com/2bgZqAX.png\" alt></p>\n<h2 id=\"樞紐分析-堆疊直條圖\"><a href=\"#樞紐分析-堆疊直條圖\" class=\"headerlink\" title=\"樞紐分析-堆疊直條圖\"></a>樞紐分析-堆疊直條圖</h2><p><img src=\"https://i.imgur.com/UGRPdUl.png\" alt></p>\n<h2 id=\"樞紐分析-圓形圖\"><a href=\"#樞紐分析-圓形圖\" class=\"headerlink\" title=\"樞紐分析-圓形圖\"></a>樞紐分析-圓形圖</h2><p><strong>注意圖表的行列數據呈現是否合適</strong></p>\n<p><img src=\"https://i.imgur.com/B5bdN0S.png\" alt><br>↓調整行列數據<br><img src=\"https://i.imgur.com/0WAn7Aa.png\" alt><br>↓調整後<br><img src=\"https://i.imgur.com/itrWKwo.png\" alt></p>\n","categories":["Excel"],"tags":["excel","pivot table"]},{"title":"Django2.0筆記(3):軟體架構","url":"/django-software-architecture/","content":"<p>模型、視圖與模板。<br><a id=\"more\"></a></p>\n<h2 id=\"Model–View–Controller\"><a href=\"#Model–View–Controller\" class=\"headerlink\" title=\"Model–View–Controller\"></a>Model–View–Controller</h2><ul>\n<li>Model: 資料庫存取</li>\n<li>View:  使用者介面</li>\n<li>Controller: 控制整合</li>\n</ul>\n<p>說到網頁開發，就不得不提一下MVC架構，維基百科如是說：MVC為軟體工程中的一種軟體架構，將軟體系統分為三個部分：模型(Model)、視圖(View)和控制器(Controller)，目的是為了實現一種<span style=\"color:red;\">動態</span>的程式設計，使後續對程式的修改及擴充簡化，並且使程式某一部分的重複利用成為可能。</p>\n<p>MVC是一種<span style=\"color:red;\">設計理念</span>而非技術，旨在提高開發項目的可擴展性及可維護性，而這樣一個從實際開發所歸納出來的抽象概念，事實上其定義是相當模糊的，尤其是在經過了多年發展後…\b在Django筆記就不多做探討了。</p>\n<h2 id=\"Model-Template-View\"><a href=\"#Model-Template-View\" class=\"headerlink\" title=\"Model-Template-View\"></a>Model-Template-View</h2><ul>\n<li>Model: 資料庫存取</li>\n<li>Template: 使用者介面</li>\n<li>View:  控制整合</li>\n</ul>\n<p>Django雖然看似獨樹一格自定義了MTV架構，但MTV和MVC的概念是相同的，我嘗試畫了架構對照圖：<br><img src=\"https://i.imgur.com/vAeWv7K.png\" alt><br>以較為白話的方式來描述MTV架構，就是依開發需求去定義Model在資料庫中生成對應的Table，透過View所定義的程式邏輯去整合、控制數據，再交由負責前端的Template呈現給使用者，而使用者亦是透過Template和後端數據做互動。</p>\n<p>我認為Django初學者只是抽象地討論MTV是無法很好地理解其互動關係的，還是喜歡learning by doing。</p>\n","categories":["Django"],"tags":["python","django","web"]},{"title":"Django2.0筆記(2):專案設定與應用程式","url":"/django-app-and-settings/","content":"<p>專案下的環境設定、如何建立Django App。<br><a id=\"more\"></a></p>\n<h2 id=\"Settings-py\"><a href=\"#Settings-py\" class=\"headerlink\" title=\"Settings.py\"></a>Settings.py</h2><p>在Windows terminal透過tree指令可查看專案結構<br><img src=\"https://i.imgur.com/19G7Lvu.jpg\" alt><br>Mac環境下要使用tree指令則需另外安裝package :<br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install tree</span><br></pre></td></tr></table></figure><br>從專案結構可以發現，根目錄下有個和專案名稱相同的資料夾，其中主要有3個檔案:</p>\n<ul>\n<li>settings.py : 專案設定檔</li>\n<li>url.py      : 網頁路徑設定</li>\n<li>wsgi.py     : 伺服器閘道介面設定</li>\n</ul>\n<p>＊ manage.py為負責專案管理的Python指令檔<br>＊ 什麼是WSGI(Web Server Gateway Interface)? 簡而言之，WSGI就是Server與Web App之間的溝通介面</p>\n<p>開啟settings.py，可以看到官方註解寫得挺詳細的，主要設定：</p>\n<ul>\n<li><p>除錯模式設定為True表示網頁拋出Error會直接顯示錯誤訊息，正式發佈網站前務必記得關閉，以免網站弱點就這麼公開了(汗)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> SECURITY WARNING: don<span class=\"string\">'t run with debug turned on in production!</span></span></span><br><span class=\"line\">DEBUG = True</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建立的App必須在這裡被定義</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Application definition</span></span><br><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.admin'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.auth'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.contenttypes'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.sessions'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.messages'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.staticfiles'</span>,</span><br><span class=\"line\">    ‘&#123;app_name&#125;’,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>網頁模版路徑</p>\n</li>\n</ul>\n<p>在專案目錄下建立templates資料夾:<br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">md templates  # build folder for web templates</span><br></pre></td></tr></table></figure><br>＊ Mac terminal建立資料夾指令和Linux同為mkdir</p>\n<p>接著在settings.py中設定路徑，於TEMPLATES中的’DIRS’加入：<br><span cstyle=\"color:red;\">os.path.join(BASE_DIR, ‘templates’)</span><br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">TEMPLATES = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">'BACKEND'</span>: <span class=\"string\">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class=\"line\">        <span class=\"string\">'DIRS'</span>: [os.path.join(BASE_DIR, <span class=\"string\">'templates'</span>)],</span><br><span class=\"line\">        <span class=\"string\">'APP_DIRS'</span>: <span class=\"keyword\">True</span>,</span><br><span class=\"line\">        <span class=\"string\">'OPTIONS'</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">'context_processors'</span>: [</span><br><span class=\"line\">                <span class=\"string\">'django.template.context_processors.debug'</span>,</span><br><span class=\"line\">                <span class=\"string\">'django.template.context_processors.request'</span>,</span><br><span class=\"line\">                <span class=\"string\">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class=\"line\">                <span class=\"string\">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>語系、時區\b:修改為繁體中文、台灣時區</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">LANGUAGE_CODE = <span class=\"string\">'zh-Hant'</span></span><br><span class=\"line\"></span><br><span class=\"line\">TIME_ZONE = <span class=\"string\">'Asia/Taipei'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>靜態文件路徑</p>\n</li>\n</ul>\n<p>在專案目錄下建立static資料夾:<br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">md static  # build folder for static files(e.g. css, images...)</span><br></pre></td></tr></table></figure><br>接著在settings.py中設定路徑，於”STATIC_URL”後面加上:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">STATICFILES_DIRS = [</span><br><span class=\"line\">    os.path.join(BASE_DIR, <span class=\"string\">'static'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"Django-App\"><a href=\"#Django-App\" class=\"headerlink\" title=\"Django App\"></a>Django App</h2><p>建立應用程式，專案底下可建立多個App，而每個App都可以視為Package<br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> start virtual environment first</span></span><br><span class=\"line\">cd &#123;project_name&#125;</span><br><span class=\"line\">python manage.py startapp &#123;app_name&#125;  # build application</span><br><span class=\"line\"></span><br><span class=\"line\">python manage.py makemigrations &#123;app_name(optional)&#125;  # build data migration for database</span><br><span class=\"line\">python manage.py migrate &#123;app_name(optional)&#125;  # data synchronization</span><br></pre></td></tr></table></figure></p>\n<p>＊ makemigrations與migrate為資料庫同步設定，預設為對所有應用程式同步，因此應用程式名稱為選填</p>\n","categories":["Django"],"tags":["python","django","web"]},{"title":"Django2.0筆記(1):初始化設定","url":"/django-start/","content":"<p>近期耗費大量心力在學習Django，因為Google搜尋到的教學文多數版本停留在Django 1.x，對初學者來說略過太多細節。<a id=\"more\"></a>作為WEB初學者，Django有許多概念並不是很直觀，必須實際測試來幫助自己理解。目前所使用的版本為Django 2.1，於是我踩了相當、相當多的坑，感謝無數撰寫教學文的高手前輩讓自己學習了很多。在各種線索的拼湊之下、終於讓Django Project在Apache Server順利運作了(汗)。</p>\n<h1 id=\"Django-Virtual-Environment-amp-New-Project\"><a href=\"#Django-Virtual-Environment-amp-New-Project\" class=\"headerlink\" title=\"Django:Virtual Environment &amp; New Project\"></a>Django:Virtual Environment &amp; New Project</h1><p>雖然網路上有許多教學文，但最詳細也最可靠的還是官方文件：<a href=\"https://docs.djangoproject.com/en/2.1/\" target=\"_blank\" rel=\"noopener\">Django2.1 Doc</a>。</p>\n<h2 id=\"Virtual-Environment-for-Django\"><a href=\"#Virtual-Environment-for-Django\" class=\"headerlink\" title=\"Virtual Environment for Django\"></a>Virtual Environment for Django</h2><p>開發Django Project建議另建一個乾淨的虛擬環境，只安裝專案所需套件，Python環境建置就不贅述，從安裝及建立虛擬環境開始:<br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install virtualenv  # install virtual environment package</span><br><span class=\"line\">cd c:\\</span><br><span class=\"line\">virtualenv &#123;virtualenv_name&#125;  # build virtual environment for Django</span><br><span class=\"line\"></span><br><span class=\"line\">cd &#123;virtualenv_name&#125;</span><br><span class=\"line\">Scripts\\activate  # start virtual environment</span><br><span class=\"line\">pip install django  # install Django package</span><br><span class=\"line\">deactivate  # stop virtual environment</span><br></pre></td></tr></table></figure><br>＊ 在Mac環境下啟動虛擬環境的指令為source bin/activate<br>＊ 提示字元前面的(virtualenv_name)表示目前已啟動虛擬環境</p>\n<h2 id=\"Start-New-Django-Project\"><a href=\"#Start-New-Django-Project\" class=\"headerlink\" title=\"Start New Django Project\"></a>Start New Django Project</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> start virtual environment first</span></span><br><span class=\"line\">django-admin startproject &#123;project_name&#125;  # build new project</span><br></pre></td></tr></table></figure>\n<h2 id=\"Run-Django-Server\"><a href=\"#Run-Django-Server\" class=\"headerlink\" title=\"Run Django Server\"></a>Run Django Server</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> start virtual environment first</span></span><br><span class=\"line\">cd &#123;project_name&#125;</span><br><span class=\"line\">python manage.py runserver</span><br></pre></td></tr></table></figure>\n<p>＊ 在專案目錄下成功啟動測試Server後，在瀏覽器輸入127.0.0.1:8000，應該要看見以下畫面：<br><img src=\"https://i.imgur.com/9pdBamW.jpg\" alt></p>\n","categories":["Django"],"tags":["python","django","web"]},{"title":"兩個月後的魚缸","url":"/restart-planted-tank-2month/","content":"<p>近況更新。</p>\n<ul>\n<li>前景的牛毛氈因為長得過高更換為很趴又很會爬的新大珍珠草</li>\n<li>綠宮廷一直縮頂…只好汰除…我還得多努力<a id=\"more\"></a></li>\n<li>後景增加了紅雨傘…但好景不常，其實是我不會照顧呵，變成綠雨傘了ＱＱ</li>\n<li>藍綠藻解決後換黑毛藻…石頭全拿掉…開始投藥(TBS)，目前蝦子全掛ＱＱ</li>\n<li>珊瑚莫斯沈木因黑毛藻而被檸檬酸處理後看起來了無生機，目前有恢復的跡象</li>\n</ul>\n<p>↓紅雨傘剛種植＋紅宮廷重新種植後的樣子(汗)<br><img src=\"https://i.imgur.com/po1wwVW.jpg\" alt></p>\n<p><img src=\"https://i.imgur.com/UL8a4xC.jpg\" alt></p>\n<p>我想，之後重新整理，可能會換成一呎的魚缸，然後底土一樣矽沙，但會嘗試鋪設基肥，大概會用洗衣袋裝著吧，免得造成日後矽沙要重複使用的麻煩。</p>\n<p>再努力。</p>\n","categories":["Aquarium"],"tags":["aquarium","planted tank"]},{"title":"正則式與re模組","url":"/data-sci-re/","content":"<p>什麼是正則式(Regex)？常見的說法有正規表示式、正則表達式…等等，維基百科是如此描述的：使用單個字串來描述、符合某個句法規則的字串。在很多文字編輯器裡，正則運算式通常被用來檢索、替換那些符合某個模式的文字，總之就是「描述某種規則的表達式」。<br><a id=\"more\"></a><br>舉例來說，email address其格式具有一定規則，假設要在一堆密密麻麻的html中尋找Gmail郵件地址，就必須使用正則式來描述過濾規則，讓程式能準確判斷出符合Gmail郵件地址格式的字串。<br><img src=\"https://i.imgur.com/lZufQJS.png\" alt></p>\n<h2 id=\"Pythex\"><a href=\"#Pythex\" class=\"headerlink\" title=\"Pythex\"></a>Pythex</h2><p>上述示範如何用正則式表達Gmail郵件地址規則的網站為<a href=\"https://pythex.org\" target=\"_blank\" rel=\"noopener\">pythex.org</a>，可以用來驗證Regex正確與否，因為Regex的符號有點複雜，該頁面也相當貼心地放了速查表呢～只要按下regular expression cheatsheet按鈕即可查看。<br><img src=\"https://i.imgur.com/DIorI8v.png\" alt></p>\n<h2 id=\"re-module\"><a href=\"#re-module\" class=\"headerlink\" title=\"re module\"></a>re module</h2><p>在Python中使用正則式需要import re模組，常用的方法有search()、match()、findall()等，可參考<a href=\"https://docs.python.org/2/library/re.html\" target=\"_blank\" rel=\"noopener\">官方文件</a>以取得更詳盡的說明。</p>\n<p>\b那麼，search跟match有什麼不同呢？這是我一開始對這兩個方法的疑問，那就<a href=\"https://docs.python.org/2/library/re.html#search-vs-match\" target=\"_blank\" rel=\"noopener\">看看官方文件怎麼說</a>，但實際編寫程式碼會幫助自己理解兩者間的差異。</p>\n<p>根據官方文件的解釋：re.match() checks for a match only at the <span style=\"color:red;\">beginning</span> of the string, while re.search() checks for a match <span style=\"color:red;\">anywhere</span> in the string.</p>\n<ul>\n<li>match的搜尋方式為「從字串起始開始搜索，遇到不符合的字元便停止」</li>\n<li>search的搜尋方式為「整個字串」</li>\n</ul>\n<p>個人覺得最常用到的應該是findall()，比對所有符合規則的字串並返回串列：<br><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">str_ =  <span class=\"string\">'_.Aa123Bb456Cc789Dd3.14'</span></span><br><span class=\"line\"></span><br><span class=\"line\">find_alphabet = re.findall(<span class=\"string\">r'[A-Za-z]+'</span>, str_)</span><br><span class=\"line\">print(find_alphabet)  ＃ [<span class=\"string\">'Aa'</span>, <span class=\"string\">'Bb'</span>, <span class=\"string\">'Cc'</span>, <span class=\"string\">'Dd'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">find_rational = re.findall(<span class=\"string\">r'[0-9]+\\.?[0-9]*'</span>, str_)</span><br><span class=\"line\">print(find_rational)  ＃ [<span class=\"string\">'123'</span>, <span class=\"string\">'456'</span>, <span class=\"string\">'789'</span>, <span class=\"string\">'3.14'</span>]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>在Google首頁中尋找.jpg/.png，雖然只有一張圖片(笑)，另外，常用的Regex可以透過re.compile()轉換為Regex Object，以便於直接呼叫search()、match()、findall()，也可以在使用bs4模組解析網頁時使用:<br><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># coding:utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> rq</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup <span class=\"keyword\">as</span> bs</span><br><span class=\"line\"></span><br><span class=\"line\">pattern = re.compile(<span class=\"string\">r'.+\\.jpg|.+\\.png'</span>)</span><br><span class=\"line\">url = <span class=\"string\">'https://www.google.com'</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    res = rq.get(url)</span><br><span class=\"line\">    res.raise_for_status()</span><br><span class=\"line\"><span class=\"keyword\">except</span> rq.HTTPError:</span><br><span class=\"line\">    print(<span class=\"string\">'HTTP Error!'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">soup = bs(res.text, <span class=\"string\">'html.parser'</span>)</span><br><span class=\"line\">imgs = soup.find_all(<span class=\"string\">\"meta\"</span>, &#123;<span class=\"string\">\"content\"</span>:pattern&#125;)  <span class=\"comment\"># find all images in attr 'content' of tag 'meta'</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> img <span class=\"keyword\">in</span> imgs:</span><br><span class=\"line\">    print(img[<span class=\"string\">'content'</span>])  <span class=\"comment\"># /images/branding/googleg/1x/googleg_standard_color_128dp.png</span></span><br></pre></td></tr></table></figure></p>\n","categories":["Data Science"],"tags":["python","regex"]},{"title":"以 Requests 取得 Google 搜尋結果","url":"/data-sci-google-search/","content":"<h2 id=\"Web-Analytics\"><a href=\"#Web-Analytics\" class=\"headerlink\" title=\"Web Analytics\"></a>Web Analytics</h2><p>首先瞧瞧Google Search的網址，嘗試輸入任意關鍵字執行搜尋後可以發現，搜尋的網址是長這樣的：<a id=\"more\"></a><br><figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//www.google.com.tw/search?q=</span></span><br></pre></td></tr></table></figure><br>“=”後面便是搜尋的關鍵字了，再觀察網頁原始碼，搜尋結果就在class=”g”的div區塊中。</p>\n<p>既然爬蟲能這樣到處玩耍，想必也會有不歡迎爬蟲的網站，畢竟要是放任大量爬蟲在自家網站撒野，可是會給伺服器帶來困擾的呢。所以Web Crawler也會有許多技巧來偽裝，讓自己在伺服器的認知裡看起來像是人為操作：例如，在request加上user agent偽裝成瀏覽器，或在多個request之間設置隨機延遲，除了模擬人為操作，亦避免造成他人伺服器的負擔…</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># *** coding : utf-8 ***</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> rq</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup <span class=\"keyword\">as</span> bs</span><br><span class=\"line\"></span><br><span class=\"line\">user_agent = [<span class=\"string\">\"Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">target = input(<span class=\"string\">'search:'</span>)</span><br><span class=\"line\">url = <span class=\"string\">'http://www.google.com.tw/search?q='</span> + target</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    res = rq.get(url=url, headers=&#123;<span class=\"string\">'User-Agent'</span>: random.choice(user_agent)&#125;)</span><br><span class=\"line\">    res.raise_for_status()</span><br><span class=\"line\"><span class=\"keyword\">except</span> rq.exceptions.HTTPError:</span><br><span class=\"line\">    print(<span class=\"string\">'[HTTP_Error]'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">soup = bs(res.text, <span class=\"string\">'html.parser'</span>)</span><br><span class=\"line\">link = soup.select(<span class=\"string\">'.g .r a'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>):</span><br><span class=\"line\">    print(link[index].string)   <span class=\"comment\"># title</span></span><br><span class=\"line\">    print(link[index][<span class=\"string\">'href'</span>])  <span class=\"comment\"># link</span></span><br></pre></td></tr></table></figure>\n<p>輸出結果：<br><img src=\"https://i.imgur.com/EcaezM5.png\" alt></p>\n","categories":["Data Science"],"tags":["python","web crawler"]},{"title":"以 BeautifulSoup 解析網頁內容","url":"/data-sci-bs4/","content":"<p>發出請求取得網頁內容後，會得到密密麻麻的 HTML，此時便可以讓 BeautifulSoup 來協助解析網頁內容。<br><a id=\"more\"></a></p>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span>pip3 install bs4</span><br></pre></td></tr></table></figure>\n<h2 id=\"Web-Analytics\"><a href=\"#Web-Analytics\" class=\"headerlink\" title=\"Web Analytics\"></a>Web Analytics</h2><p>寫個簡單的 Web Crawler 去 PTT 西斯版逛逛吧，但因為西斯版有年齡驗證，所以必須利用 Requests.Session()物件去做 post，按下大家在\b美好童年就已經按過的「我已滿18歲按鈕」，讓 Web Crawler 取得伺服器驗證後就可以在西斯版橫行無阻(嘿嘿)。</p>\n<p>從截圖可以看到，url 為 <a href=\"https://www.ptt.cc/ask/over18..\" target=\"_blank\" rel=\"noopener\">https://www.ptt.cc/ask/over18..</a>. 這就是取得驗證的網址，注意 url 後頭的 from=%2Fbbs%2Fsex…在 post 驗證的 payload 要寫入 from 這個 key，表示 post 來自西斯版。<br><img src=\"https://i.imgur.com/PAuJRHa.png\" alt></p>\n<p>關於 BeautifulSoup 更多細節可參考<a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html\" target=\"_blank\" rel=\"noopener\">官方文件</a>，這邊簡單說明，基本上就是把 request 取得的 html 丟給 Soup 去解析，接著可以使用 find(), find_all(), select()等方法來篩選尋找目標數據所在的區塊。</p>\n<p>舉例來說，若要讓 Web Crawler 去爬取西斯版的文章標題＆連結，觀察網頁原始碼後可以發現目標數據就在 class＝r-ent 的區塊裡面。<br><img src=\"https://i.imgur.com/56hpBfq.png\" alt></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> rq</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup <span class=\"keyword\">as</span> bs</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">'https://www.ptt.cc/bbs/sex/index.html'</span></span><br><span class=\"line\">payload = &#123;</span><br><span class=\"line\">    <span class=\"string\">'from'</span>:url,</span><br><span class=\"line\">    <span class=\"string\">'yes'</span>:<span class=\"string\">'yes'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">session = rq.Session()</span><br><span class=\"line\">session.post(<span class=\"string\">'https://www.ptt.cc/ask/over18'</span>, data=payload)</span><br><span class=\"line\">res = session.get(url)</span><br><span class=\"line\"></span><br><span class=\"line\">soup = bs(res.text, <span class=\"string\">'html.parser'</span>)</span><br><span class=\"line\">result = soup.select(<span class=\"string\">'.r-ent .title a'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> title <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">    print(title.text, title[<span class=\"string\">'href'</span>])</span><br></pre></td></tr></table></figure>\n<p>輸出結果：<br><img src=\"https://i.imgur.com/NmCiRB0.png\" alt></p>\n","categories":["Data Science"],"tags":["python","web crawler"]},{"title":"Requests 模組測試","url":"/data-sci-requests/","content":"<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">pip3 install requests</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"Get\"><a href=\"#Get\" class=\"headerlink\" title=\"Get\"></a>Get</h2><p>範例程式為對網頁做基本請求＆接收回應，raise_for_status()為return檢查，若返回異常則拋出error<br><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> rq</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">'http://www.google.com.tw/search?'</span>  <span class=\"comment\"># target url</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    res = rq.get(url)</span><br><span class=\"line\">    res.raise_for_status()</span><br><span class=\"line\"><span class=\"keyword\">except</span> rq.HTTPError:</span><br><span class=\"line\">    print(<span class=\"string\">'HTTP Error!'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(res.text)  <span class=\"comment\"># html</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Payload\"><a href=\"#Payload\" class=\"headerlink\" title=\"Payload\"></a>Payload</h2><p>必要時可以加上參數，例如Google Search:<br><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload = &#123;<span class=\"string\">'q'</span>:<span class=\"string\">'data science'</span>&#125;</span><br><span class=\"line\">res = rq.get(url, params=payload)  <span class=\"comment\"># http://www.google.com.tw/search?q=data+science</span></span><br></pre></td></tr></table></figure><br>＊參數的部分為字典結構，key則視url結構而定</p>\n<h2 id=\"Post\"><a href=\"#Post\" class=\"headerlink\" title=\"Post\"></a>Post</h2><p>針對網頁中的表單，可以使用Post來傳送Payload<br><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">res = rq.post(url, params=payload)</span><br></pre></td></tr></table></figure></p>\n<p>但…對Google Search頁面做Post會得到這樣的回應：<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">//www.google.com/</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">logo</span> <span class=\"attr\">aria-label</span>=<span class=\"string\">Google</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>405.<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">ins</span>&gt;</span>That’s an error.<span class=\"tag\">&lt;/<span class=\"name\">ins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>The request method <span class=\"tag\">&lt;<span class=\"name\">code</span>&gt;</span>POST<span class=\"tag\">&lt;/<span class=\"name\">code</span>&gt;</span> is inappropriate for the URL <span class=\"tag\">&lt;<span class=\"name\">code</span>&gt;</span>/search?q=data+science<span class=\"tag\">&lt;/<span class=\"name\">code</span>&gt;</span>.  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ins</span>&gt;</span>That’s all we know.<span class=\"tag\">&lt;/<span class=\"name\">ins</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Google說這樣是不當的行為呢，我只是做個示範，好孩子不要學呀＾.&lt;</p>\n","categories":["Data Science"],"tags":["python","web crawler"]},{"title":"Hexo on GitHub Pages:從Win轉移到Mac","url":"/hexo-switching-from-win-to-mac/","content":"<p>一直以來都有想換筆電的想法，但總是能撐則撐，畢竟會是不小的支出呢…不過前陣子需要帶著筆電趴趴造，而跟著我8年的老Win筆電過於笨重，這實在令人感到非常困擾，經考量後換了Mac Air，讓老Win正式退役。<br><a id=\"more\"></a><br>既然換了電腦換了系統，除了熟悉系統操作，再來就是開發環境的建置，趕緊先把Hexo環境先建置起來才能更新部落格。</p>\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><p></p><p><br><a href=\"https://git-scm.com\" target=\"_blank\" rel=\"noopener\">官方載點</a>，若是已安裝過自帶Git環境的XCode可以略過。</p>\n<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><p></p><p><br><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">官方載點</a></p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm install -g hexo-cli</span><br><span class=\"line\">sudo npm install hexo-deployer-git --save</span><br><span class=\"line\">cd &#123;blog_name&#125;        # build folder of blog</span><br><span class=\"line\">hexo init &#123;blog_name&#125;</span><br><span class=\"line\">hexo</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo s --debug  # run local server(127.0.0.1:4000)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/iftnF8e.jpg\" alt></p>\n<h2 id=\"Data\"><a href=\"#Data\" class=\"headerlink\" title=\"Data\"></a>Data</h2><p></p><p><br>確定在本機可以正常運作後，接下來只要把根目錄下的_config.yml、scaffolds資料夾及source資料夾覆寫到Blog根目錄下就完成~</p>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p></p><p></p>\n<ol>\n<li>在發佈這篇文章後發現Blog分類及標籤頁面消失了…原來是我只把source底下的“_posts”複製到新的根目錄下，只要重新建立“categories”及”tags”兩個new page就行啦。</li>\n<li>原本使用的NexT主題為舊版，這次乾脆就更新到v6.4.0啦，配置檔只有微幅的調整，需注意的是languages的部分，檔名中hyphen後的字改為大寫字母了，如果根目錄配置檔沒有修改，Blog預設語言就會因爲找不到對應檔案而變成英文。</li>\n</ol>\n","categories":["Hexo"],"tags":["hexo","github pages"]},{"title":"Error:檔案無法載入，因為這個系統已停用指令碼執行","url":"/django-execution-of-scripts-is-disabled/","content":"<p>問題來源 : 今日在Win10作業系統下建立Python virtual environment for Django，接著要用Scripts/activate指令啟動虛擬環境時，CLI顯示了這個令人錯愕的訊息:</p>\n<p>「檔案無法載入，因為這個系統已停用指令碼執行」</p>\n<a id=\"more\"></a>\n<p>代表目前作業系統的Execution Policy設定為Restricted(不允許執行)這是我在Win7作業系統下使用虛擬環境從沒遇過的狀況，而Google搜尋結果顯示有許多人在PowerShell執行Script遇到相同問題。</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>以系統管理員權限執行PowerShell，執行以下指令:<br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure><br>使作業系統接受所有自訂或信任來源的Script，如此問題便解決啦。</p>\n","categories":["Django"],"tags":["pyhton","django","error"]},{"title":"VS Code快速建立Python開發環境","url":"/python-vscode-setup/","content":"<p>個人從自學Python到現在，一直都是使用工具書所推薦的IDE:PyCharm，它確實是相當優秀的整合開發環境，但過胖這一點偶爾還是會令人感到困擾…每次打開程式就是要等它大爺暖身一下(白眼)。而開始學習在GitHub Pages寫Blog以來，我都是用VS Code發文，它的輕量化和豐富的擴充套件真是令人感到愉悅呢ヽ(●´∀`●)ﾉ 所以說，乾脆就在VS Code寫Python就好啦。<br><a id=\"more\"></a></p>\n<h2 id=\"Download-VS-Code\"><a href=\"#Download-VS-Code\" class=\"headerlink\" title=\"Download VS Code\"></a>Download VS Code</h2><p></p><p><br><a href=\"https://code.visualstudio.com/download\" target=\"_blank\" rel=\"noopener\">官方載點</a></p>\n<h2 id=\"Install-Python-Extension-for-VS-Code\"><a href=\"#Install-Python-Extension-for-VS-Code\" class=\"headerlink\" title=\"Install Python Extension for VS Code\"></a>Install Python Extension for VS Code</h2><p></p><p><br>↓點側邊工具列的’擴充功能’，然後搜尋’Python’，就會看到MS官方為Python開發的擴充套件，直接安裝即可。<br><img src=\"https://i.imgur.com/HD4254a.jpg\" alt></p>\n<h2 id=\"Build-Working-Directory\"><a href=\"#Build-Working-Directory\" class=\"headerlink\" title=\"Build Working Directory\"></a>Build Working Directory</h2><p></p><p><br>建立一個工作目錄，理由後面會說明。</p>\n<h2 id=\"Run-Python-File\"><a href=\"#Run-Python-File\" class=\"headerlink\" title=\"Run Python File\"></a>Run Python File</h2><p></p><p><br>要在VS Code環境執行Python程式，可以直接右鍵–&gt;在終端機(CLI)執行Python檔案，或者按下ctrl + `叫出CLI用’Python {file_path}’去執行也可以…但每次都這樣搞就太麻煩了，所以來建個任務組態檔吧。<br><img src=\"https://i.imgur.com/hT5hAXa.jpg\" alt></p>\n<p>重點，首先點選上方工作列’檔案’–&gt;’開啟資料夾’，選擇剛剛建立的工作目錄，若是沒有先選擇工作目錄，那麼接下來的步驟就會發生錯誤，VS Code會告訴你一句莫名其妙的話 :’這些工作只會出現在工作區資料夾中’。選擇好工作目錄後，按下ctrl + shift + P接著搜尋’task’，點選’工作:設定工作(Tasks:Configure Task)‘，然後VS Code會在工作目錄下產生一個’tasks.json’，將下方內容直接覆蓋並存檔 :<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">\"version\": \"2.0.0\",</span><br><span class=\"line\">    \"tasks\": [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"label\"</span>: <span class=\"string\">\"Run Python Code\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"shell\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"python\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"args\"</span>: [</span><br><span class=\"line\">                    <span class=\"string\">\"$&#123;file&#125;\"</span></span><br><span class=\"line\">                ],</span><br><span class=\"line\">                <span class=\"attr\">\"group\"</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">\"kind\"</span>: <span class=\"string\">\"build\"</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"isDefault\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">\"presentation\"</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">\"echo\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"reveal\"</span>: <span class=\"string\">\"always\"</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"focus\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">\"panel\"</span>: <span class=\"string\">\"shared\"</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br></pre></td></tr></table></figure></p>\n<p>然後就可以透過快捷鍵’ctrl + shift + B’執行程式了，順帶一提，這是LineBot Web Crawler XD<br><img src=\"https://i.imgur.com/PZreIqo.jpg\" alt></p>\n","categories":["Python"],"tags":["python","vs code"]},{"title":"Hexo on GitHub Pages:發文","url":"/hexo-first-post/","content":"<p>關於發文這件事，正所謂工欲善其事，必先利其器，就從選擇一個好用的文字編輯器或IDE開始，個人私心推薦VSCode。<br><a id=\"more\"></a><br>決定好工具後，首先看到blog根目錄底下有個叫’scaffolds’的資料夾，這裡面放的是Blog頁面模板。打開’post.md’會見到預先寫入的title、date等等，此為發文的模板，當然我們也可以編輯它。例如，模板預設是沒有寫入’categories’的，那我會把它加上去，就不必每次發文還得補上。<br><img src=\"https://i.imgur.com/TaK8Wzc.jpg\" alt></p>\n<p>在Hexo框架下撰文是使用Markdown，不熟悉語法可以參考<a href=\"https://markdown.tw/\" target=\"_blank\" rel=\"noopener\">官方文件</a>，很簡單的~ 接著就可以開始撰文了，相關指令如下:</p>\n<h2 id=\"Start-New-Post\"><a href=\"#Start-New-Post\" class=\"headerlink\" title=\"Start New Post\"></a>Start New Post</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd blog</span><br><span class=\"line\">hexo new post post-title  # 'post-title'請置換為自己的文章標題</span><br></pre></td></tr></table></figure>\n<h2 id=\"Publish-New-Post\"><a href=\"#Publish-New-Post\" class=\"headerlink\" title=\"Publish New Post\"></a>Publish New Post</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d -g  # generate --&gt; deploy</span><br></pre></td></tr></table></figure>\n<h2 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h2><p></p><p><br>1.categories是唯一、有序的，tags則沒有區分(關鍵字的概念)，意思是如果你的文章設定了A、B兩個類別，那麼這篇文章的分類就會變成’類別A底下的類別B’。<br>2.在new post指令輸入文章標題時，因為標題也是.md的檔名，所以一開始我用underline做區隔(a_b_c)，但我發現Hexo會自動把underline轉成hyphen(a-b-c，順帶一提這條短線叫hyphen…dash是破折號呀)，所以就配合它啦，反正title可以建立文章後再修改為中文，檔名還是英文命名比較不會有什麼光怪陸離的事情發生(怕.jpg)</p>\n","categories":["Hexo"],"tags":["hexo","github pages"]},{"title":"關於Python的變數範圍","url":"/python-scope-of-variables/","content":"<p>在Python的世界裡，變數是不需要事先宣告就能直接賦値並使用的，而<strong>變數的作用範圍會在賦値的時候建立</strong>，除非你指定了global或nonlocal關鍵字。<br><a id=\"more\"></a><br>先看看<a href=\"https://docs.python.org/3/faq/programming.html#id9\" target=\"_blank\" rel=\"noopener\">官方文件</a>怎麼說:<br><blockquote><p>In Python, variables that are only referenced inside a function are implicitly global. If a variable is <strong>assigned a value</strong> anywhere within the function’s body, it’s assumed to be a local unless explicitly declared as global.</p>\n<p>Though a bit surprising at first, a moment’s consideration explains this. On one hand, requiring global for assigned variables provides a bar against unintended side-effects. On the other hand, if global was required for all global references, you’d be using global all the time. You’d have to declare as global every reference to a built-in function or to a component of an imported module. This clutter would defeat the usefulness of the global declaration for identifying side-effects.</p>\n</blockquote></p>\n<p>簡而言之，在函式區塊內部賦値的變數即為區域變數(除非指定global或nonlocal)，於函式區塊之外賦値的便是全域變數。</p>\n<p>直接敲幾段code來看會更清楚 :</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/evn python3</span></span><br><span class=\"line\"><span class=\"comment\"># *** coding : utf-8 ***</span></span><br><span class=\"line\"></span><br><span class=\"line\">a, b = <span class=\"number\">1</span>, <span class=\"number\">2</span>  <span class=\"comment\"># Global Variable</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func_a</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> a  <span class=\"comment\"># Global Variable</span></span><br><span class=\"line\">    print(a, <span class=\"string\">\"# Global Variable a\"</span>)</span><br><span class=\"line\">    a = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func_b</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    b = <span class=\"number\">3</span>  <span class=\"comment\"># Local Variable in func_a()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func_c</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">nonlocal</span> b  <span class=\"comment\"># Local Variable in func_a()</span></span><br><span class=\"line\">        b = <span class=\"number\">4</span></span><br><span class=\"line\">        print(b, <span class=\"string\">\"# Local Variable b\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(b, <span class=\"string\">\"# Local Variable b\"</span>)</span><br><span class=\"line\">    func_c()</span><br><span class=\"line\"></span><br><span class=\"line\">func_a()</span><br><span class=\"line\">func_b()</span><br><span class=\"line\">print(b, <span class=\"string\">\"# Global Variable b\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>輸出結果:</strong><br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">1 # Global Variable a</span><br><span class=\"line\">3 # Local Variable b</span><br><span class=\"line\">4 # Local Variable b</span><br><span class=\"line\">2 # Global Variable b</span><br></pre></td></tr></table></figure></p>\n","categories":["Python"],"tags":["python"]},{"title":"在Heroku環境下使用自訂字型","url":"/line-use-custom-fonts-in-heroku-apps/","content":"<p>事情是這樣子的，持續努力讓Bot能查教師課表的某一天，在經歷了數據蒐集、數據處理、介接imgur api…等等，終於讓Bot傳來了一張圖片啦~但仔細一看似乎不太對勁!<br><a id=\"more\"></a></p>\n<h2 id=\"How-to-Use-Custom-Fonts-in-Heroku-Apps\"><a href=\"#How-to-Use-Custom-Fonts-in-Heroku-Apps\" class=\"headerlink\" title=\"How to Use Custom Fonts in Heroku Apps?\"></a>How to Use Custom Fonts in Heroku Apps?</h2><p></p><p><br>我X，踩雷了，竟然出現中文亂碼的狀況，這課表鬼才看得懂(鬼:口口口口口這鬼也看不懂好嘛)於是又開始try&amp;error loop…甚至讓Bot去下CLI指令刪除搬移檔案…繞了好一大圈，終於讓我找到答案了!!!令人難過的是，這方法非常簡單…雖然這是常有的事，可就是白耗了好多時間。但沒關係，讓碰見相同問題的人能快速找到解決方案，這就是學習筆記的意義所在。</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p></p><p><br>1.準備好你要的字型，要<span style=\"color:red;\">特別注意</span>的是，該字型必須是Linux/Ubuntu所支援的字型。<br>2.在專案根目錄下新增一個名稱為「.fonts」的資料夾(tips:在命名時輸入.fonts.)<br>3.把字型檔案(.ttf)放到上述資料夾中<br>4.重新push專案</p>\n<p><img src=\"https://i.imgur.com/uxdEvJZ.png\" alt></p>\n<p>關於中文亂碼，似乎是matplotlib無法在Heroku環境下找到可套用的中文字型，但我在本機測試是沒問題的…所以要自己提供字型就是了，真是踩了個莫名其妙的雷，總之中文亂碼問題就這麼解決了。</p>\n","categories":["LineBot"],"tags":["python","heroku","matplotlib"]},{"title":"翻缸Day21:藍綠藻來襲","url":"/restart-planted-tank-day21/","content":"<p>開始新工作，下了班想發文卻提不起勁…呵。但還是利用假日來紀錄一下魚缸的近況吧。<br><a id=\"more\"></a><br>↓上週三出門辦事發現水族店在隔壁，就進去逛了<br><img src=\"https://i.imgur.com/8QSsMfb.jpg\" alt><br>↓於是加入新成員<br><img src=\"https://i.imgur.com/himpyCZ.jpg\" alt><br>↓綠宮廷轉水中葉，全數拔起整理再植草<br><img src=\"https://i.imgur.com/k5Jxf0j.jpg\" alt><br>↓角螺開心地啃藻…這缸子該刷了<br><img src=\"https://i.imgur.com/lSF2Z0A.jpg\" alt><br>↓僱來一批除藻小幫手<br><img src=\"https://i.imgur.com/pkNizEv.jpg\" alt></p>\n<p>然後呢，最近幾天發現藍綠藻持續蔓延，底砂、牛毛氈甚至入水口生化棉也染上了噁心的藍綠色…即使拔起來用檸檬酸浸泡清洗試圖阻止，依然無效。經過爬文吸收資訊，也確定不會對魚蝦造成傷害，決定直接使用紅黴素來處理。雖然不會對魚蝦造成影響，但對於硝化菌們來說可就不妙了，所以投藥前必須將濾材另行安置才行。</p>\n<p>↓到處生長的藍綠藻<br><img src=\"https://i.imgur.com/cEm4u6i.jpg\" alt><br>↓移出圓桶中的濾材並加強打氣維持好氧的硝化菌<br><img src=\"https://i.imgur.com/umj5hh7.jpg\" alt><br>↓然後紅黴素便可以登場了!(決鬥吧藍綠藻!抽牌!)<br><img src=\"https://i.imgur.com/X3OmePn.jpg\" alt></p>\n<h2 id=\"※關於投藥劑量\"><a href=\"#※關於投藥劑量\" class=\"headerlink\" title=\"※關於投藥劑量\"></a>※關於投藥劑量</h2><p>根據<a href=\"https://www.paludarium.net/aquarium/48\" target=\"_blank\" rel=\"noopener\">P大</a>所說的2.5ppm來計算，我的魚缸水量約23L:23000000 * 0.00025% = 57.5(mg)，一顆紅黴素膠囊為250mg，所以我只需要1/5顆左右的劑量、持續投藥四日。</p>\n<h2 id=\"2018-7-23-連續投藥Day3\"><a href=\"#2018-7-23-連續投藥Day3\" class=\"headerlink\" title=\"2018/7/23 連續投藥Day3\"></a>2018/7/23 連續投藥Day3</h2><p>除了每日換水1/2，光源也調整為上午與傍晚開啟、不連續合計8小時(有一說如此中斷能干擾藻類生長)，目前觀察到藍綠藻已停止蔓延，清洗後的入水口綿也沒有藍綠藻生長。</p>\n<h2 id=\"2018-7-25-連續投藥Day5\"><a href=\"#2018-7-25-連續投藥Day5\" class=\"headerlink\" title=\"2018/7/25 連續投藥Day5\"></a>2018/7/25 連續投藥Day5</h2><p>↓藍綠藻明顯消失，但我決定今日不換水，讓藥物的效用多殘留一天，確保能控制住…別再來啦，真的是挺麻煩的。<br><img src=\"https://i.imgur.com/wtmQzkE.jpg\" alt></p>\n","categories":["Aquarium"],"tags":["aquarium","planted tank","cyanobacteria"]},{"title":"先別管Hexo如何發文了，你聽過NexT嗎?(2019/04更新)","url":"/hexo-config/","content":"<p>部署完部落格別急著發文，先來找個喜歡的佈景主題。<br><a id=\"more\"></a><br>Hexo如此熱門的框架，有許多<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">第三方主題</a>能套用，或者想<a href=\"https://hexo.io/zh-tw/docs/themes.html\" target=\"_blank\" rel=\"noopener\">打造一個自己的主題</a>也行，而我選擇的是最熱門的經典主題──NexT。</p>\n<h2 id=\"安裝NexT主題\"><a href=\"#安裝NexT主題\" class=\"headerlink\" title=\"安裝NexT主題\"></a>安裝NexT主題</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd blog    # 移動至Blog根目錄下 </span><br><span class=\"line\">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<h3 id=\"設定主題\"><a href=\"#設定主題\" class=\"headerlink\" title=\"設定主題\"></a>設定主題</h3><p></p><p><br>打開Blog根目錄下的root配置檔(_config.yml)，找到#Extensions區塊，將theme屬性設置為next<br><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Local-Host測試\"><a href=\"#Local-Host測試\" class=\"headerlink\" title=\"Local Host測試\"></a>Local Host測試</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean        # 清除hexo cache</span><br><span class=\"line\">hexo s --debug    # 以debug模式啟動local host server</span><br></pre></td></tr></table></figure>\n<p>如果CLI沒有輸出錯誤訊息，應該會見到這段文字:<br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><br>接著打開瀏覽器輸入localhost:4000便能在本機查看、測試Blog囉。</p>\n<h2 id=\"配置檔-config-yml\"><a href=\"#配置檔-config-yml\" class=\"headerlink\" title=\"配置檔(_config.yml)\"></a>配置檔(_config.yml)</h2><p><strong>詳細Config設定請參考官方文件，僅紀錄個人設定部分</strong></p>\n<p>*官方文件:<br>  1.<a href=\"https://hexo.io/zh-tw/docs/\" target=\"_blank\" rel=\"noopener\">Hexo docs</a><br>  2.<a href=\"https://theme-next.org/docs/\" target=\"_blank\" rel=\"noopener\">NexT docs</a></p>\n<h3 id=\"Root-Config\"><a href=\"#Root-Config\" class=\"headerlink\" title=\"Root Config\"></a>Root Config</h3><p></p><p><br>檔案位址:~/_config.yml<br><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span>              <span class=\"comment\"># 網站標題</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span>           <span class=\"comment\"># 網站副標題</span></span><br><span class=\"line\"><span class=\"attr\">description:</span>        <span class=\"comment\"># 網站描述</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span>           <span class=\"comment\"># 網站關鍵字</span></span><br><span class=\"line\"><span class=\"attr\">author:</span>             <span class=\"comment\"># 作者名稱</span></span><br><span class=\"line\"><span class=\"attr\">language:</span>           <span class=\"comment\"># 網站語言</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span>           <span class=\"comment\"># 時區</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"attr\">https://username.github.io/</span>  <span class=\"comment\"># 網站首頁網址</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:title/</span>                <span class=\"comment\"># 文章永久連結，基於SEO考量不建議使用預設值(:year/:month/:day/:title/)</span></span><br><span class=\"line\"><span class=\"attr\">permalink_defaults:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Writing</span></span><br><span class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:title.md</span> <span class=\"comment\"># File name of new posts</span></span><br><span class=\"line\"><span class=\"attr\">default_layout:</span> <span class=\"string\">post</span></span><br><span class=\"line\"><span class=\"attr\">titlecase:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></span><br><span class=\"line\"><span class=\"attr\">external_link:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Open external links in new tab</span></span><br><span class=\"line\"><span class=\"attr\">filename_case:</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">render_drafts:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">relative_link:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">future:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">highlight:</span>          <span class=\"comment\"># 代碼高亮</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  line_number:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  auto_detect:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  tab_replace:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Home page setting</span></span><br><span class=\"line\"><span class=\"comment\"># path: Root path for your blogs index page. (default = '')</span></span><br><span class=\"line\"><span class=\"comment\"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class=\"line\"><span class=\"comment\"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class=\"line\"><span class=\"attr\">index_generator:</span></span><br><span class=\"line\"><span class=\"attr\">path:</span> <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"attr\">per_page:</span> <span class=\"number\">5</span>      <span class=\"comment\"># 每頁顯示文章數(預設值為10)</span></span><br><span class=\"line\"><span class=\"attr\">order_by:</span> <span class=\"bullet\">-date</span>  <span class=\"comment\"># 排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repository:</span> <span class=\"attr\">https://&#123;username&#125;:&#123;password&#125;@github.com/&#123;username&#125;/&#123;username&#125;.github.io.git</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure></p>\n<p>Root Config沒什麼複雜設定，不過在#site設定部分，我以為subtitle文字會顯示在author下方(紅框處)…結果顯示的文字是description，所以我說內個subtitle呢???<br><img src=\"https://i.imgur.com/3YLGWXs.jpg\" alt></p>\n<h3 id=\"Theme-Config-2019-04更新\"><a href=\"#Theme-Config-2019-04更新\" class=\"headerlink\" title=\"Theme Config(2019.04更新)\"></a>Theme Config(2019.04更新)</h3><p></p><p><br>檔案位址:~/themes/next/_config.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Allow to cache content generation. Introduced in NexT v6.0.0.</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">false</span>    <span class=\"comment\">#啟用cache可改善網站載入速度</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"favicon\"><a href=\"#favicon\" class=\"headerlink\" title=\"favicon\"></a>favicon</h4><p></p><p><br>尺寸調整好後，修改為同樣的檔名直接取代掉就行(懶)<br>圖片位址:~/themes/next/source/images<br><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span></span><br><span class=\"line\"><span class=\"attr\">small:</span> <span class=\"string\">/images/favicon-16x16-next.png</span></span><br><span class=\"line\"><span class=\"attr\">medium:</span> <span class=\"string\">/images/favicon-32x32-next.png</span></span><br><span class=\"line\"><span class=\"attr\">apple_touch_icon:</span> <span class=\"string\">/images/apple-touch-icon-next.png</span></span><br><span class=\"line\"><span class=\"attr\">safari_pinned_tab:</span> <span class=\"string\">/images/logo.svg</span></span><br><span class=\"line\"><span class=\"comment\">#android_manifest: /images/manifest.json</span></span><br><span class=\"line\"><span class=\"comment\">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure><br>↓SVG Editor<br><img src=\"https://i.imgur.com/u9lSfGq.png\" alt></p>\n<h4 id=\"subtitle\"><a href=\"#subtitle\" class=\"headerlink\" title=\"subtitle\"></a>subtitle</h4><p>index_with_subtitle改為true依然不見subtitle顯示於何處。<br><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># If true, will add site-subtitle to index page, added in main hexo config.</span></span><br><span class=\"line\"><span class=\"comment\">#subtitle: Subtitle</span></span><br><span class=\"line\"><span class=\"attr\">index_with_subtitle:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"footer\"><a href=\"#footer\" class=\"headerlink\" title=\"footer\"></a>footer</h4><p>網站底部顯示起始年份、icon、版權宣告、框架＆主題版本等設定，Config註解相當詳細。</p>\n<h5 id=\"自定義footer文字\"><a href=\"#自定義footer文字\" class=\"headerlink\" title=\"自定義footer文字\"></a>自定義footer文字</h5><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Any custom text can be defined here.</span></span><br><span class=\"line\"><span class=\"attr\">  custom_text:</span> <span class=\"string\">&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;span style=\"color:#3b5998;\"&gt;&lt;i class=\"fa fa-hand-o-right fa-lg\"&gt;&lt;/i&gt;&lt;/span&gt;&amp;nbsp;All articles in this blog are </span></span><br><span class=\"line\"><span class=\"string\">    licensed under &lt;a href=\"https://creativecommons.org/licenses/by/4.0/\"&gt;CC BY 4.0&lt;/a&gt; </span></span><br><span class=\"line\"><span class=\"string\">    unless stating additionally.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"creative-commons\"><a href=\"#creative-commons\" class=\"headerlink\" title=\"creative commons\"></a>creative commons</h4><p>覺得有點礙眼所以將side bar跟文末的版權宣告拿掉，直接寫在footer。<br><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Creative Commons 4.0 International License.</span></span><br><span class=\"line\"><span class=\"comment\"># See: https://creativecommons.org/share-your-work/licensing-types-examples</span></span><br><span class=\"line\"><span class=\"comment\"># Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class=\"line\"><span class=\"comment\"># You can set a language value if you prefer a translated version of CC license.</span></span><br><span class=\"line\"><span class=\"comment\"># CC licenses are available in 39 languages, where you can find the specific and correct abbreviation you need.</span></span><br><span class=\"line\"><span class=\"comment\"># Valid values of language: deed.zh, deed.fr, deed.de, etc.</span></span><br><span class=\"line\"><span class=\"attr\">creative_commons:</span></span><br><span class=\"line\"><span class=\"attr\">  license:</span> <span class=\"string\">by</span></span><br><span class=\"line\"><span class=\"attr\">  sidebar:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  post:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  language:</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"scheme-settings\"><a href=\"#scheme-settings\" class=\"headerlink\" title=\"scheme settings\"></a>scheme settings</h4><p>NexT主題目前有四種<a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">外觀模式</a>可選擇，將偏好的模式取消註解即可。<br><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Scheme Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Mist</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Pisces</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Gemini</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"sidebar-settings\"><a href=\"#sidebar-settings\" class=\"headerlink\" title=\"sidebar settings\"></a>sidebar settings</h4><p>側邊欄依設定的Scheme不同，細部設定會有些微差異。<br><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Sidebar Settings</span></span><br><span class=\"line\"><span class=\"comment\"># See: https://theme-next.org/docs/theme-settings/sidebar</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Posts / Categories / Tags in sidebar.  #sidebar顯示統計(文章/分類/標籤)</span></span><br><span class=\"line\"><span class=\"attr\">site_state:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Social Links                           ＃社群連結設置</span></span><br><span class=\"line\"><span class=\"comment\"># Usage: `Key: permalink || icon`</span></span><br><span class=\"line\"><span class=\"comment\"># Key is the link label showing to end users.</span></span><br><span class=\"line\"><span class=\"comment\"># Value before `||` delimeter is the target permalink.</span></span><br><span class=\"line\"><span class=\"comment\"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.</span></span><br><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\"><span class=\"attr\">  GitHub:</span> <span class=\"attr\">https://github.com/&#123;username&#125;</span> <span class=\"string\">||</span> <span class=\"string\">github</span></span><br><span class=\"line\"><span class=\"attr\">  Linkedin:</span> <span class=\"attr\">https://www.linkedin.com/</span> <span class=\"string\">||</span> <span class=\"string\">linkedin-square</span>  <span class=\"comment\">#可自行增加項目</span></span><br><span class=\"line\"><span class=\"attr\">  Twitter:</span> <span class=\"attr\">https://twitter.com/</span> <span class=\"string\">||</span> <span class=\"string\">twitter</span></span><br><span class=\"line\"><span class=\"attr\">  E-Mail:</span> <span class=\"attr\">mailto:&#123;username&#125;@gmail.com</span> <span class=\"string\">||</span> <span class=\"string\">envelope</span></span><br><span class=\"line\">  <span class=\"comment\">#Weibo: https://weibo.com/yourname || weibo</span></span><br><span class=\"line\">  <span class=\"comment\">#Google: https://plus.google.com/yourname || google</span></span><br><span class=\"line\">  <span class=\"comment\">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class=\"line\">  <span class=\"comment\">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br><span class=\"line\">  <span class=\"comment\">#VK Group: https://vk.com/yourname || vk</span></span><br><span class=\"line\">  <span class=\"comment\">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class=\"line\">  <span class=\"comment\">#YouTube: https://youtube.com/yourname || youtube</span></span><br><span class=\"line\">  <span class=\"comment\">#Instagram: https://instagram.com/yourname || instagram</span></span><br><span class=\"line\">  <span class=\"comment\">#Skype: skype:yourname?call|chat || skype</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">social_icons:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  icons_only:</span> <span class=\"literal\">true</span>  <span class=\"comment\">#省略文字僅顯示社群icon</span></span><br><span class=\"line\"><span class=\"attr\">  transition:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Blog rolls        #友情連結設置</span></span><br><span class=\"line\"><span class=\"attr\">links_icon:</span> <span class=\"string\">link</span></span><br><span class=\"line\"><span class=\"attr\">links_title:</span> <span class=\"string\">Links</span></span><br><span class=\"line\"><span class=\"comment\">#links_layout: block</span></span><br><span class=\"line\"><span class=\"attr\">links_layout:</span> <span class=\"string\">inline</span></span><br><span class=\"line\"><span class=\"attr\">links:</span></span><br><span class=\"line\">  <span class=\"comment\">#Title1: http://example.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Sidebar Avatar  #頭像設置(方框或圓框/放大倍率/滑鼠游標碰觸旋轉XD)</span></span><br><span class=\"line\"><span class=\"attr\">avatar:</span></span><br><span class=\"line\">  <span class=\"comment\"># In theme directory (source/images): /images/avatar.gif</span></span><br><span class=\"line\">  <span class=\"comment\"># In site directory (source/uploads): /uploads/avatar.gif</span></span><br><span class=\"line\">  <span class=\"comment\"># You can also use other linking images.</span></span><br><span class=\"line\"><span class=\"attr\">  url:</span> <span class=\"string\">/images/avatar.png</span></span><br><span class=\"line\">  <span class=\"comment\"># If true, the avatar would be dispalyed in circle.</span></span><br><span class=\"line\"><span class=\"attr\">  rounded:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.</span></span><br><span class=\"line\"><span class=\"attr\">  opacity:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\"># If true, the avatar would be rotated with the cursor.</span></span><br><span class=\"line\"><span class=\"attr\">  rotated:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Table Of Contents in the Sidebar  ＃文章目錄顯示設置</span></span><br><span class=\"line\"><span class=\"attr\">toc:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Automatically add list number to toc.</span></span><br><span class=\"line\"><span class=\"attr\">  number:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class=\"line\"><span class=\"attr\">  wrap:</span> <span class=\"literal\">false</span>    <span class=\"comment\">#false＝truncate</span></span><br><span class=\"line\">  <span class=\"comment\"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class=\"line\"><span class=\"attr\">  expand_all:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Maximum heading depth of generated toc. You can set it in one post through `toc_max_depth` in Front Matter.</span></span><br><span class=\"line\"><span class=\"attr\">  max_depth:</span> <span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">sidebar:</span></span><br><span class=\"line\">  <span class=\"comment\"># Sidebar Position, available values: left | right (only for Pisces | Gemini).</span></span><br><span class=\"line\"><span class=\"attr\">  position:</span> <span class=\"string\">left</span></span><br><span class=\"line\">  <span class=\"comment\">#position: right</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Manual define the sidebar width. If commented, will be default for:</span></span><br><span class=\"line\">  <span class=\"comment\"># Muse | Mist: 320</span></span><br><span class=\"line\">  <span class=\"comment\"># Pisces | Gemini: 240</span></span><br><span class=\"line\">  <span class=\"comment\">#width: 300</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Sidebar Display, available values (only for Muse | Mist):    #sidebar顯示時機設置</span></span><br><span class=\"line\">  <span class=\"comment\">#  - post    expand on posts automatically. Default.</span></span><br><span class=\"line\">  <span class=\"comment\">#  - always  expand for all pages automatically.</span></span><br><span class=\"line\">  <span class=\"comment\">#  - hide    expand only when click on the sidebar toggle icon.</span></span><br><span class=\"line\">  <span class=\"comment\">#  - remove  totally remove sidebar including sidebar toggle.</span></span><br><span class=\"line\"><span class=\"attr\">  display:</span> <span class=\"string\">post</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span></span><br><span class=\"line\"><span class=\"attr\">  offset:</span> <span class=\"number\">12</span></span><br><span class=\"line\">  <span class=\"comment\"># Enable sidebar on narrow view (only for Muse | Mist).</span></span><br><span class=\"line\"><span class=\"attr\">  onmobile:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Click any blank part of the page to close sidebar (only for Muse | Mist).</span></span><br><span class=\"line\"><span class=\"attr\">  dimmer:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">back2top:</span>    <span class=\"comment\">#返回頂部按鈕設置</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Back to top in sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">  sidebar:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Scroll percent label in b2t button.</span></span><br><span class=\"line\"><span class=\"attr\">  scrollpercent:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"code-highlight\"><a href=\"#code-highlight\" class=\"headerlink\" title=\"code highlight\"></a>code highlight</h4><p><span style=\"color:red;\">代碼高亮問題</span>讓我困擾了好一段時間，也就是部落格更改為ICARUS主題的時候(只設置了一週又換回NexT)，因此才開始追究代碼高亮無作用的原因。實測後我的結論是，在Hexo框架下使用內建的<a href=\"https://hexo.io/zh-tw/docs/tag-plugins.html\" target=\"_blank\" rel=\"noopener\">Tag Plugins</a>來標記程式碼區塊，最能確保代碼高亮的顯示，縮進跟反引號(backtick)的用法都不是很可靠。另外，自動偵測語言也並非完全準確，建議程式區塊要註記<a href=\"https://highlightjs.readthedocs.io/en/latest/css-classes-reference.html\" target=\"_blank\" rel=\"noopener\">language</a>。<br><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Tag Plugins - code block語法</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;figure class=\"highlight plain\"&gt;&lt;figcaption&gt;&lt;span&gt;[title] [] [url] [link text]&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=\"gutter\"&gt;&lt;pre&gt;&lt;span class=\"line\"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=\"line\"&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"code\"&gt;&lt;pre&gt;&lt;span class=\"line\"&gt;# your code here&lt;/span&gt;&lt;br&gt;&lt;span class=\"line\"&gt;# &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;h1</span> <span class=\"string\">id=\"Code-Highlight-theme-代碼高亮主題設置\"&gt;&lt;a</span> <span class=\"string\">href=\"#Code-Highlight-theme-代碼高亮主題設置\"</span> <span class=\"string\">class=\"headerlink\"</span> <span class=\"string\">title=\"Code</span> <span class=\"string\">Highlight</span> <span class=\"string\">theme</span>  <span class=\"comment\">#代碼高亮主題設置\"&gt;&lt;/a&gt;Code Highlight theme  #代碼高亮主題設置&lt;/h1&gt;&lt;h1 id=\"Available-values-normal-night-night-eighties-night-blue-night-bright\"&gt;&lt;a href=\"#Available-values-normal-night-night-eighties-night-blue-night-bright\" class=\"headerlink\" title=\"Available values: normal | night | night eighties | night blue | night bright\"&gt;&lt;/a&gt;Available values: normal | night | night eighties | night blue | night bright&lt;/h1&gt;&lt;h1 id=\"https-github-com-chriskempson-tomorrow-theme\"&gt;&lt;a href=\"#https-github-com-chriskempson-tomorrow-theme\" class=\"headerlink\" title=\"https://github.com/chriskempson/tomorrow-theme\"&gt;&lt;/a&gt;&lt;a href=\"https://github.com/chriskempson/tomorrow-theme\"&gt;https://github.com/chriskempson/tomorrow-theme&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;highlight_theme: night eighties&lt;br&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"third-party-services\"><a href=\"#third-party-services\" class=\"headerlink\" title=\"third party services\"></a>third party services</h4><p>關於NexT所支援之第三方服務可參考<a href=\"https://theme-next.org/docs/third-party-services/\" target=\"_blank\" rel=\"noopener\">官方文件說明</a></p>\n<h4 id=\"note\"><a href=\"#note\" class=\"headerlink\" title=\"note\"></a>note</h4><p>NexT config隨著版本演進，設定項目變得更多、更細，就不逐項列出了，只寫重點。</p>\n","categories":["Hexo"],"tags":["hexo","github pages"]},{"title":"翻缸Day8:除藻生物","url":"/restart-planted-tank-day8/","content":"<p>目前光照時間已拉長至8小時，光源為Johnlen LED 1.5呎19W水草自然混光燈、色溫4000k&amp;7000k的燈珠各3顆，CO2則是24小時不間斷，唯夜間會降低出氣量。重新翻缸後，底床僅有舊矽砂無鋪設基肥，依植草位置適量埋入ISTA水草根肥，因此在每週換水1/2後會酌量添加TBS綠色&amp;紅色水草液肥。雖然目前並無藻類大量滋生的跡象，但除藻生物可是水草缸不可或缺的小幫手呢。<br><a id=\"more\"></a></p>\n<p>因為前景的牛毛氈仍是以相當緩慢的生長速度在蔓延中，大概還要兩三週我才敢放入黑殼蝦…以免維護中的草皮被連根拔起!而說到除藻生物，我偏好可愛的小精靈~但水族店老闆表示折損率太高沒有再引進T.T 看來小精靈真的不好飼養，個人經驗…撐不過半年就上天堂了，我也是搞不懂問題出在哪。唉，只好退而求其次以小猴飛狐代替，以及好飼養又很勤奮工作的角螺~</p>\n<p>↓換了新環境的小猴飛狐目前看來有點膽小<br><img src=\"https://i.imgur.com/rmBmzwM.jpg\" alt=\"restart_day8_01\"></p>\n<p>↓小而圓的綠宮廷水上葉逐漸轉化為細長的水中葉了<br><img src=\"https://i.imgur.com/9C9KqUd.jpg\" alt=\"restart_day8_02\"></p>\n<p>今早一看，小猴飛狐已經跟黑燈們開始混熟了…再觀察觀察吧，因為北辰大有提過<a href=\"http://northernstar-aquarium.blogspot.com/2011/09/blog-post.html\" target=\"_blank\" rel=\"noopener\">小猴飛狐的危險性</a>，希望這傢伙安份點。</p>\n","categories":["Aquarium"],"tags":["aquarium","planted tank","algae control"]},{"title":"只要6塊錢~第一次自拍證件照就上手","url":"/take-a-headshot-yourself/","content":"<p>說到 <strong>大頭照</strong> 這個東西，其實使用到的機會不多，但要用的時候總是被要求繳交 <strong>6個月內</strong>的證件照…照相館動輒兩三百塊，拍出來的大頭照多麼不堪我就不說了，大家應該都很有經驗(菸)。雖說市面上已有證件快照的機器，但也不是說很普及，收費大約是$150，於是我想起有看過在家自拍大頭照的教學，就決定來試試了，也讓我的700D在平淡無奇的日常生活中能有登場的機會。<br><a id=\"more\"></a></p>\n<p>首先呢，找面明亮、乾淨的牆當背景，然後想辦法架好相機，手邊有腳架的話當然是最方便啦…如果相機螢幕能翻轉那就更好囉 : )<br><img src=\"https://i.imgur.com/IYuC7Q9.jpg\" alt></p>\n<p>接下來就是設定倒數連拍，我覺得10秒比較夠用XD 證件照的規定可以參考<a href=\"https://www.boca.gov.tw/cp-16-4123-c2932-1.html\" target=\"_blank\" rel=\"noopener\">外交部領事局</a>的說明，我就不贅述，總之，拍出理想的照片後就是去背、裁剪。若是不會使用專業的修圖軟體，可以參考<a href=\"http://gigikaren1104.pixnet.net/blog/post/383578103\" target=\"_blank\" rel=\"noopener\">這篇</a>用PPT處理大頭照的教學，還能調膚色呢XD</p>\n<p>說到裁剪照片呢，這個<strong>2吋</strong>到底是多大呢?拜了Google大神後得到很多答案…眾說紛紜!我個人認為看起來最順眼、最2吋的是像素寬高比為433x581 pixel、實際寬高比為3.5x5.08的大小，提供參考。</p>\n<p>裁剪完成後，在修圖軟體上開一張4x6的畫布…小畫家也是可以，那麼4x6是多大呢?(尺寸什麼的好煩)像素寬高比為1795x1205 pixel，然後把大頭照貼滿整個畫布吧!(說貼滿其實也不過8張啦XD)<br><img src=\"https://i.imgur.com/7WE4wAb.jpg\" alt></p>\n<p>上述準備就緒，<a href=\"http://www.likoda.com.tw/info/store/\" target=\"_blank\" rel=\"noopener\">尋找</a>你附近的 <strong>立可得</strong> 吧~ 許多便利商店及大賣場都有設置喔，可以透過APP將照片傳輸至機器來列印照片，非常方便。<br><img src=\"https://i.imgur.com/3Dg9R1U.jpg\" alt><br><img src=\"https://i.imgur.com/gZpfIw5.jpg\" alt></p>\n<p>我是在便利商店的立可得列印的，傳輸照片、設定列印選項後，機器會列印繳費單，4x6一張6元，拿著它去櫃檯繳費後就可以回到機器前面取照片囉。<br><img src=\"https://i.imgur.com/a246LAA.jpg\" alt><br><img src=\"https://i.imgur.com/kHUHVTO.jpg\" alt></p>\n<p>第一次自拍證件照就上手，成功~</p>\n","categories":["Daily"],"tags":["DIY","headshot"]},{"title":"部署失敗:Failed to Execute Prompt Script","url":"/hexo-failed-to-execute-prompt-script/","content":"<p>在搭建好部落格、龜毛地設定了root配置檔，然後抱持著既期待又怕受傷害的心情，在CLI敲下部署指令後，得到了error: failed to execute prompt script (exit code 1)這這般無情的回應…嗯，部署失敗！ 我X，都還沒發文呢。<br><a id=\"more\"></a></p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p></p><p><br>找到Blog根目錄下的root配置檔_config.yml，修正部署設定。</p>\n<p>原始設定:<br><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repository:</span> <span class=\"attr\">https://github.com/username/username.github.io.git</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure></p>\n<p>修改為:<br><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repository:</span> <span class=\"attr\">https://username:userpassword@github.com/username/username.github.io.git</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure></p>\n<p>部署成功 : )</p>\n<p>*<a href=\"https://www.zhihu.com/question/38219432\" target=\"_blank\" rel=\"noopener\">參考資料</a></p>\n","categories":["Hexo"],"tags":["error","hexo","github pages"]},{"title":"Hexo on GitHub Pages:從零開始","url":"/hexo-on-github-pages/","content":"<p>程式寫了幾年，遇到Bug總是靠著拜Google大神，就這麼一路走來，看過無數高手們手把手的教學文，心裡想著自己哪天也來寫寫學習筆記，紀錄學習歷程以及遇到的問題(以及至今仍在摸索中的水草缸…)，也許在某個夜深人靜的時刻，能幫助到和我一樣經常廢寢忘食、苦苦追尋解決方案的某個誰。於是部落格就這麼建起來了，學習筆記就從部落格的搭建過程開始紀錄吧。<br><a id=\"more\"></a></p>\n<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><p><br></p>\n<h3 id=\"安裝Node-js\"><a href=\"#安裝Node-js\" class=\"headerlink\" title=\"安裝Node.js\"></a>安裝Node.js</h3><p></p><p><br><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">官網載點</a></p>\n<p>接著執行作業系統CLI(command-line interface)輸入以下安裝指令</p>\n<h3 id=\"安裝Hexo\"><a href=\"#安裝Hexo\" class=\"headerlink\" title=\"安裝Hexo\"></a>安裝Hexo</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">hexo version            # 若安裝成功可查看Hexo版本</span><br></pre></td></tr></table></figure>\n<h3 id=\"安裝Hexo-Git\"><a href=\"#安裝Hexo-Git\" class=\"headerlink\" title=\"安裝Hexo Git\"></a>安裝Hexo Git</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"註冊GitHub帳號\"><a href=\"#註冊GitHub帳號\" class=\"headerlink\" title=\"註冊GitHub帳號\"></a>註冊GitHub帳號</h3><p></p><p><br><a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">GitHub官網</a><br><span style=\"color:red;\">特別注意 : </span>為避免某些文件配置錯誤的發生，使用者名稱(username)務必設定為小寫，使用者名稱也將成為部落格網址的主要部分</p>\n<h3 id=\"新增GitHub專案\"><a href=\"#新增GitHub專案\" class=\"headerlink\" title=\"新增GitHub專案\"></a>新增GitHub專案</h3><ul>\n<li>按下New repository<br><img src=\"https://i.imgur.com/hoQ0WZP.jpg\" alt></li>\n<li>輸入專案名稱username.github.io，username請填寫自己的使用者名稱，接著按下create repository，前置作業到此告一段落<br><img src=\"https://i.imgur.com/wHAh9q5.jpg\" alt></li>\n</ul>\n<hr>\n<h3 id=\"開始建置\"><a href=\"#開始建置\" class=\"headerlink\" title=\"開始建置\"></a>開始建置</h3><p><br></p>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><p>回到CLI輸入以下指令開始建立部落格</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init blog    # 初始化</span><br><span class=\"line\">cd blog           # 移動至上一步所建立的blog資料夾</span><br><span class=\"line\">npm install       # 安裝blog相關套件</span><br></pre></td></tr></table></figure>\n<h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p>至blog資料夾底下找到Hexo root配置檔，文件名稱為_config.yml，打開文件找到部署設定區塊填入相關資訊<br><span style=\"color:red;\">特別注意 </span>: 每個項目的冒號後面一定要空格，username一樣改寫為自己的使用者名稱</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">    type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">    repository:</span> <span class=\"attr\">https://github.com/username/username.github.io.git</span></span><br><span class=\"line\"><span class=\"attr\">    branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n<p>接著就可以部署到GitHub : )</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d -g    # generate --&gt; deploy</span><br></pre></td></tr></table></figure>\n<p>部署成功後在瀏覽器輸入網址 https://{username}.github.io/ 就可以看到自己的部落格囉~</p>\n<hr>\n<h3 id=\"更新版本\"><a href=\"#更新版本\" class=\"headerlink\" title=\"更新版本\"></a>更新版本</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd hexo root  # CLI移至hexo根目錄</span><br><span class=\"line\">npm outdated  # 檢查版本</span><br></pre></td></tr></table></figure>\n<p>將package.json相關的package版本號修改為最新然後安裝即可<br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://i.imgur.com/B6Z6Hee.png\" alt></p>\n<p>＊CLI如有顯示類似的錯誤訊息<br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm WARN babel-eslint@10.0.1 requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer dependencies yourself.</span><br></pre></td></tr></table></figure></p>\n<p>peer dependencies是已發佈套件的相依關係，表示使用者需自行安裝額外的相依套件<br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install eslint@4.12.1 --save-dev</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><a href=\"https://hexo.io/zh-tw/\" target=\"_blank\" rel=\"noopener\">Hexo官網</a></li>\n</ul>\n","categories":["Hexo"],"tags":["hexo","gitHub pages"]},{"title":"1.5呎翻缸重整","url":"/restart-my-1.5ft-planted-tank/","content":"<h2 id=\"放置play很久很久的魚缸\"><a href=\"#放置play很久很久的魚缸\" class=\"headerlink\" title=\"放置play很久很久的魚缸\"></a>放置play很久很久的魚缸</h2><p>本來是想撤掉了，因為需要定期維護清洗設備…但又覺得可惜。<a id=\"more\"></a>後來又想改設置好整理的一呎缸，不過又考慮到水體小、水質相對難維持穩定的問題。經過一番掙扎，還是決定翻缸重新設景(天啊，水草缸都成了 <strong>水藻缸</strong>，這工程之浩大用想的就覺得累了…)。<br>因為，我還是想要一個很療癒的水草缸啊。</p>\n<p>↓魚缸刷洗完成<br><img src=\"https://i.imgur.com/riEPpd9.jpg\" alt=\"刷洗後的魚缸\"><br>↓重新設景、植草<br><img src=\"https://i.imgur.com/le3gi6j.jpg\" alt=\"植草設景完成\"></p>\n<h2 id=\"設備更換\"><a href=\"#設備更換\" class=\"headerlink\" title=\"設備更換\"></a>設備更換</h2><p>  1.不鏽鋼出入水口(玻璃美觀但…易髒難洗)<br>  2.外置CO2霧化器(放在缸內各種藻類實在困擾)<br>  3.致冷晶片冷水機(嗯，為了讓水草度過夏天，但經費有限…)</p>\n<p>↓外置CO2霧化器<br><img src=\"https://i.imgur.com/Dd3j2RI.jpg\" alt=\"外置CO2霧化器\"><br>↓本次升級的重磅武器(?)─致冷晶片冷水機<br><img src=\"https://i.imgur.com/F4EQYpT.jpg\" alt=\"致冷晶片冷水機\"></p>\n<p>↓重新設缸Day3，僅保留一株的溫蒂椒草已經開始冒出新葉了…生長速度如此之快，我用了個養樂多瓶底當草盆再植入底床，希望能限制它的植株大小，當個稱職的中景草。<br><img src=\"https://i.imgur.com/lmTVpf9.jpg\" alt=\"溫蒂椒草\"></p>\n<p>期盼能順利成景，尤其是前景的草皮。<br>※GitHub Pages首PO!! (灑花)</p>\n","categories":["Aquarium"],"tags":["aquarium","planted tank"]}]